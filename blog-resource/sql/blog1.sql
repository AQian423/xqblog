/*
 Navicat Premium Data Transfer

 Source Server         : Qwz_local
 Source Server Type    : MySQL
 Source Server Version : 80028
 Source Host           : localhost:3306
 Source Schema         : blog

 Target Server Type    : MySQL
 Target Server Version : 80028
 File Encoding         : 65001

 Date: 30/03/2022 00:55:53
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for attachments
-- ----------------------------
DROP TABLE IF EXISTS `attachments`;
CREATE TABLE `attachments` (
  `id` int NOT NULL AUTO_INCREMENT,
  `create_time` datetime(6) DEFAULT NULL,
  `update_time` datetime(6) DEFAULT NULL,
  `file_key` varchar(2047) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL,
  `height` int DEFAULT '0',
  `media_type` varchar(127) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `path` varchar(1023) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `size` bigint NOT NULL,
  `suffix` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL,
  `thumb_path` varchar(1023) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL,
  `type` int DEFAULT '0',
  `width` int DEFAULT '0',
  PRIMARY KEY (`id`) USING BTREE,
  KEY `attachments_media_type` (`media_type`) USING BTREE,
  KEY `attachments_create_time` (`create_time`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=84 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Records of attachments
-- ----------------------------
BEGIN;
INSERT INTO `attachments` (`id`, `create_time`, `update_time`, `file_key`, `height`, `media_type`, `name`, `path`, `size`, `suffix`, `thumb_path`, `type`, `width`) VALUES (83, '2022-03-24 13:55:34.998000', '2022-03-24 13:55:34.998000', 'upload/2022/03/1-270fa7cde6294f7b922b7709e58ff272.jpeg', 400, 'image/jpeg', '1', 'upload/2022/03/1-270fa7cde6294f7b922b7709e58ff272.jpeg', 16369, 'jpeg', 'upload/2022/03/1-270fa7cde6294f7b922b7709e58ff272-thumbnail.jpeg', 0, 400);
COMMIT;

-- ----------------------------
-- Table structure for categories
-- ----------------------------
DROP TABLE IF EXISTS `categories`;
CREATE TABLE `categories` (
  `id` int NOT NULL AUTO_INCREMENT,
  `create_time` datetime(6) DEFAULT NULL,
  `update_time` datetime(6) DEFAULT NULL,
  `description` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL,
  `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `parent_id` int DEFAULT '0',
  `password` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL,
  `slug` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `slug_name` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL,
  `thumbnail` varchar(1023) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE KEY `UK_oul14ho7bctbefv8jywp5v3i2` (`slug`) USING BTREE,
  KEY `categories_name` (`name`) USING BTREE,
  KEY `categories_parent_id` (`parent_id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=45 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Records of categories
-- ----------------------------
BEGIN;
INSERT INTO `categories` (`id`, `create_time`, `update_time`, `description`, `name`, `parent_id`, `password`, `slug`, `slug_name`, `thumbnail`) VALUES (1, '2021-11-01 13:37:52.000000', '2022-01-05 10:59:38.908000', '', '操作系统', 0, NULL, 'os', NULL, 'https://i.picsum.photos/id/20/350/200.jpg?hmac=NqR02FXxx0R_8oAcy8GCrG-Kj-flccF5HYAAU0YB5zc');
INSERT INTO `categories` (`id`, `create_time`, `update_time`, `description`, `name`, `parent_id`, `password`, `slug`, `slug_name`, `thumbnail`) VALUES (2, '2021-11-02 14:00:14.000000', '2021-11-15 14:00:14.682000', '', '编程语言', 0, NULL, 'language', NULL, 'https://i.picsum.photos/id/20/350/200.jpg?hmac=NqR02FXxx0R_8oAcy8GCrG-Kj-flccF5HYAAU0YB5zc');
INSERT INTO `categories` (`id`, `create_time`, `update_time`, `description`, `name`, `parent_id`, `password`, `slug`, `slug_name`, `thumbnail`) VALUES (3, '2021-11-03 13:35:17.000000', '2021-11-15 13:35:17.399000', '', '服务器', 0, NULL, 'server', NULL, 'https://i.picsum.photos/id/20/350/200.jpg?hmac=NqR02FXxx0R_8oAcy8GCrG-Kj-flccF5HYAAU0YB5zc');
INSERT INTO `categories` (`id`, `create_time`, `update_time`, `description`, `name`, `parent_id`, `password`, `slug`, `slug_name`, `thumbnail`) VALUES (4, '2021-11-04 13:43:29.000000', '2021-11-15 13:43:29.467000', '', '数据库', 0, NULL, 'database', NULL, 'https://i.picsum.photos/id/20/350/200.jpg?hmac=NqR02FXxx0R_8oAcy8GCrG-Kj-flccF5HYAAU0YB5zc');
INSERT INTO `categories` (`id`, `create_time`, `update_time`, `description`, `name`, `parent_id`, `password`, `slug`, `slug_name`, `thumbnail`) VALUES (5, '2021-11-05 13:42:54.000000', '2022-01-05 10:58:41.338000', '', '中间件', 0, NULL, 'middleware', NULL, 'https://i.picsum.photos/id/20/350/200.jpg?hmac=NqR02FXxx0R_8oAcy8GCrG-Kj-flccF5HYAAU0YB5zc');
INSERT INTO `categories` (`id`, `create_time`, `update_time`, `description`, `name`, `parent_id`, `password`, `slug`, `slug_name`, `thumbnail`) VALUES (6, '2022-01-07 16:19:00.516000', '2022-03-06 18:25:59.342000', '', '分布式', 0, NULL, 'distributed', NULL, 'https://i.picsum.photos/id/20/350/200.jpg?hmac=NqR02FXxx0R_8oAcy8GCrG-Kj-flccF5HYAAU0YB5zc');
INSERT INTO `categories` (`id`, `create_time`, `update_time`, `description`, `name`, `parent_id`, `password`, `slug`, `slug_name`, `thumbnail`) VALUES (7, '2022-03-06 18:36:38.886000', '2022-03-06 18:36:38.886000', '', '微服务', 0, NULL, 'microservice', NULL, 'https://i.picsum.photos/id/20/350/200.jpg?hmac=NqR02FXxx0R_8oAcy8GCrG-Kj-flccF5HYAAU0YB5zc');
INSERT INTO `categories` (`id`, `create_time`, `update_time`, `description`, `name`, `parent_id`, `password`, `slug`, `slug_name`, `thumbnail`) VALUES (8, '2021-11-07 13:41:22.000000', '2022-01-05 18:19:47.111000', '', '工具', 0, NULL, 'tool', NULL, 'https://i.picsum.photos/id/20/350/200.jpg?hmac=NqR02FXxx0R_8oAcy8GCrG-Kj-flccF5HYAAU0YB5zc');
INSERT INTO `categories` (`id`, `create_time`, `update_time`, `description`, `name`, `parent_id`, `password`, `slug`, `slug_name`, `thumbnail`) VALUES (9, '2021-11-09 13:43:11.000000', '2022-01-05 10:58:17.622000', '', '框架', 0, NULL, 'framework', NULL, 'https://i.picsum.photos/id/20/350/200.jpg?hmac=NqR02FXxx0R_8oAcy8GCrG-Kj-flccF5HYAAU0YB5zc');
INSERT INTO `categories` (`id`, `create_time`, `update_time`, `description`, `name`, `parent_id`, `password`, `slug`, `slug_name`, `thumbnail`) VALUES (10, '2021-11-06 13:39:58.000000', '2021-11-15 13:39:58.505000', '', '其他', 0, NULL, 'other', NULL, 'https://i.picsum.photos/id/20/350/200.jpg?hmac=NqR02FXxx0R_8oAcy8GCrG-Kj-flccF5HYAAU0YB5zc');
INSERT INTO `categories` (`id`, `create_time`, `update_time`, `description`, `name`, `parent_id`, `password`, `slug`, `slug_name`, `thumbnail`) VALUES (11, '2022-03-06 21:48:38.717000', '2022-03-06 21:48:38.717000', '', '网络', 0, NULL, 'internet', NULL, 'https://i.picsum.photos/id/20/350/200.jpg?hmac=NqR02FXxx0R_8oAcy8GCrG-Kj-flccF5HYAAU0YB5zc');
INSERT INTO `categories` (`id`, `create_time`, `update_time`, `description`, `name`, `parent_id`, `password`, `slug`, `slug_name`, `thumbnail`) VALUES (12, '2022-03-06 21:53:23.081000', '2022-03-06 21:53:23.081000', '', '项目', 0, NULL, 'project', NULL, '');
COMMIT;

-- ----------------------------
-- Table structure for city
-- ----------------------------
DROP TABLE IF EXISTS `city`;
CREATE TABLE `city` (
  `id` int NOT NULL AUTO_INCREMENT,
  `level` int DEFAULT NULL,
  `name` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

-- ----------------------------
-- Records of city
-- ----------------------------
BEGIN;
COMMIT;

-- ----------------------------
-- Table structure for comment_black_list
-- ----------------------------
DROP TABLE IF EXISTS `comment_black_list`;
CREATE TABLE `comment_black_list` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `create_time` datetime(6) DEFAULT NULL,
  `update_time` datetime(6) DEFAULT NULL,
  `ban_time` datetime(6) DEFAULT NULL,
  `ip_address` varchar(127) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Records of comment_black_list
-- ----------------------------
BEGIN;
COMMIT;

-- ----------------------------
-- Table structure for comments
-- ----------------------------
DROP TABLE IF EXISTS `comments`;
CREATE TABLE `comments` (
  `type` int NOT NULL DEFAULT '0',
  `id` bigint NOT NULL AUTO_INCREMENT,
  `create_time` datetime(6) DEFAULT NULL,
  `update_time` datetime(6) DEFAULT NULL,
  `allow_notification` bit(1) DEFAULT b'1',
  `author` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `author_url` varchar(511) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL,
  `content` varchar(1023) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `email` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `gravatar_md5` varchar(127) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL,
  `ip_address` varchar(127) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL,
  `is_admin` bit(1) DEFAULT b'0',
  `parent_id` bigint DEFAULT '0',
  `post_id` int NOT NULL,
  `status` int DEFAULT '1',
  `top_priority` int DEFAULT '0',
  `user_agent` varchar(511) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  KEY `comments_post_id` (`post_id`) USING BTREE,
  KEY `comments_type_status` (`type`,`status`) USING BTREE,
  KEY `comments_parent_id` (`parent_id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Records of comments
-- ----------------------------
BEGIN;
COMMIT;

-- ----------------------------
-- Table structure for flyway_schema_history
-- ----------------------------
DROP TABLE IF EXISTS `flyway_schema_history`;
CREATE TABLE `flyway_schema_history` (
  `installed_rank` int NOT NULL,
  `version` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL,
  `description` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `type` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `script` varchar(1000) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `checksum` int DEFAULT NULL,
  `installed_by` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `installed_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `execution_time` int NOT NULL,
  `success` tinyint(1) NOT NULL,
  PRIMARY KEY (`installed_rank`) USING BTREE,
  KEY `flyway_schema_history_s_idx` (`success`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Records of flyway_schema_history
-- ----------------------------
BEGIN;
INSERT INTO `flyway_schema_history` (`installed_rank`, `version`, `description`, `type`, `script`, `checksum`, `installed_by`, `installed_on`, `execution_time`, `success`) VALUES (1, '1', '<< Flyway Baseline >>', 'BASELINE', '<< Flyway Baseline >>', NULL, 'root', '2021-06-08 16:10:09', 0, 1);
INSERT INTO `flyway_schema_history` (`installed_rank`, `version`, `description`, `type`, `script`, `checksum`, `installed_by`, `installed_on`, `execution_time`, `success`) VALUES (2, '2', 'migrate 1.2.0-beta.1 to 1.2.0-beta.2', 'SQL', 'V2__migrate_1.2.0-beta.1_to_1.2.0-beta.2.sql', 623818472, 'root', '2021-06-08 16:10:10', 57, 1);
INSERT INTO `flyway_schema_history` (`installed_rank`, `version`, `description`, `type`, `script`, `checksum`, `installed_by`, `installed_on`, `execution_time`, `success`) VALUES (3, '3', 'migrate 1.3.0-beta.1 to 1.3.0-beta.2', 'SQL', 'V3__migrate_1.3.0-beta.1_to_1.3.0-beta.2.sql', -417975340, 'root', '2021-06-08 16:10:10', 278, 1);
INSERT INTO `flyway_schema_history` (`installed_rank`, `version`, `description`, `type`, `script`, `checksum`, `installed_by`, `installed_on`, `execution_time`, `success`) VALUES (4, '4', 'migrate 1.3.0-beta.2 to 1.3.0-beta.3', 'SQL', 'V4__migrate_1.3.0-beta.2_to_1.3.0-beta.3.sql', 589261839, 'root', '2021-06-08 16:10:10', 30, 1);
COMMIT;

-- ----------------------------
-- Table structure for journals
-- ----------------------------
DROP TABLE IF EXISTS `journals`;
CREATE TABLE `journals` (
  `id` int NOT NULL AUTO_INCREMENT,
  `create_time` datetime(6) DEFAULT NULL,
  `update_time` datetime(6) DEFAULT NULL,
  `content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `likes` bigint DEFAULT '0',
  `source_content` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `type` int DEFAULT '0',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Records of journals
-- ----------------------------
BEGIN;
INSERT INTO `journals` (`id`, `create_time`, `update_time`, `content`, `likes`, `source_content`, `type`) VALUES (1, '2021-09-15 14:37:04.978000', '2021-09-16 17:54:32.997000', '<h1 id=\"linux下查找jdk默认安装路径\">Linux下查找JDK默认安装路径</h1>\n<p><a href=\"https://blog.csdn.net/zhao_crystal/article/details/104193564\">https://blog.csdn.net/zhao_crystal/article/details/104193564</a></p>\n', 0, '# Linux下查找JDK默认安装路径\nhttps://blog.csdn.net/zhao_crystal/article/details/104193564', 1);
INSERT INTO `journals` (`id`, `create_time`, `update_time`, `content`, `likes`, `source_content`, `type`) VALUES (2, '2021-09-15 23:56:32.595000', '2021-09-16 17:54:12.270000', '<h1 id=\"centos-7-安装和配置-git\">CentOS 7 安装和配置 Git</h1>\n<p><a href=\"https://blog.csdn.net/xwj1992930/article/details/96428998\">https://blog.csdn.net/xwj1992930/article/details/96428998</a></p>\n', 0, '# CentOS 7 安装和配置 Git\nhttps://blog.csdn.net/xwj1992930/article/details/96428998', 1);
INSERT INTO `journals` (`id`, `create_time`, `update_time`, `content`, `likes`, `source_content`, `type`) VALUES (3, '2021-09-16 17:35:01.782000', '2021-09-16 17:57:53.015000', '<p>git：\'remote-https\' 不是一个 git 命令<br />\n<a href=\"https://blog.csdn.net/Fenggms/article/details/83051423\">https://blog.csdn.net/Fenggms/article/details/83051423</a></p>\n', 0, 'git：\'remote-https\' 不是一个 git 命令\nhttps://blog.csdn.net/Fenggms/article/details/83051423', 1);
INSERT INTO `journals` (`id`, `create_time`, `update_time`, `content`, `likes`, `source_content`, `type`) VALUES (4, '2021-09-16 18:06:50.813000', '2021-09-16 18:06:50.813000', '<h1 id=\"windows与linux相互远程桌面连接\">Windows与Linux相互远程桌面连接</h1>\n<p><a href=\"https://blog.csdn.net/weixin_38889300/article/details/104355132\">https://blog.csdn.net/weixin_38889300/article/details/104355132</a></p>\n', 0, '# Windows与Linux相互远程桌面连接\nhttps://blog.csdn.net/weixin_38889300/article/details/104355132', 0);
COMMIT;

-- ----------------------------
-- Table structure for links
-- ----------------------------
DROP TABLE IF EXISTS `links`;
CREATE TABLE `links` (
  `id` int NOT NULL AUTO_INCREMENT,
  `create_time` datetime(6) DEFAULT NULL,
  `update_time` datetime(6) DEFAULT NULL,
  `description` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL,
  `logo` varchar(1023) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL,
  `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `priority` int DEFAULT '0',
  `team` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL,
  `url` varchar(1023) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  KEY `links_name` (`name`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Records of links
-- ----------------------------
BEGIN;
COMMIT;

-- ----------------------------
-- Table structure for logs
-- ----------------------------
DROP TABLE IF EXISTS `logs`;
CREATE TABLE `logs` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `create_time` datetime(6) DEFAULT NULL,
  `update_time` datetime(6) DEFAULT NULL,
  `content` varchar(1023) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `ip_address` varchar(127) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL,
  `log_key` varchar(1023) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL,
  `type` int NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  KEY `logs_create_time` (`create_time`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=681 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Records of logs
-- ----------------------------
BEGIN;
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (23, '2021-06-08 22:30:55.819000', '2021-06-08 22:30:55.819000', 'YVKG', '101.228.200.115', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (24, '2021-06-08 22:34:51.656000', '2021-06-08 22:34:51.656000', 'test', '101.228.200.115', '8', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (25, '2021-06-08 23:32:08.029000', '2021-06-08 23:32:08.029000', 'test', '101.228.200.115', '8', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (26, '2021-06-09 11:16:37.008000', '2021-06-09 11:16:37.008000', 's', '180.171.83.17', '9', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (27, '2021-06-09 11:17:41.532000', '2021-06-09 11:17:41.532000', '测试标题', '180.171.83.17', '10', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (28, '2021-06-09 17:46:37.486000', '2021-06-09 17:46:37.486000', '6/9/ff', '180.171.83.17', '11', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (29, '2021-06-10 19:45:19.444000', '2021-06-10 19:45:19.444000', 'YVKG', '180.171.83.17', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (30, '2021-06-10 19:45:33.911000', '2021-06-10 19:45:33.911000', '6/9/ff', '180.171.83.17', '11', 20);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (31, '2021-06-10 19:45:45.320000', '2021-06-10 19:45:45.320000', '测试标题', '180.171.83.17', '10', 20);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (32, '2021-06-10 19:45:50.050000', '2021-06-10 19:45:50.050000', 's', '180.171.83.17', '9', 20);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (33, '2021-06-10 19:45:53.873000', '2021-06-10 19:45:53.873000', 'test', '180.171.83.17', '8', 20);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (34, '2021-07-12 15:14:57.650000', '2021-07-12 15:14:57.650000', 'YVKG', '218.82.154.99', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (35, '2021-07-20 16:45:50.379000', '2021-07-20 16:45:50.379000', 'YVKG', '218.82.154.99', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (36, '2021-07-20 17:55:29.707000', '2021-07-20 17:55:29.707000', 'YVKG', '218.82.154.99', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (37, '2021-07-21 17:45:45.265000', '2021-07-21 17:45:45.265000', 'YVKG', '218.82.154.99', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (38, '2021-07-21 17:46:40.959000', '2021-07-21 17:46:40.959000', 'YVKG', '218.82.154.99', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (39, '2021-07-21 19:36:39.204000', '2021-07-21 19:36:39.204000', 'YVKG', '218.82.154.99', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (40, '2021-07-21 19:38:00.792000', '2021-07-21 19:38:00.792000', 'Nginx 服务器 SSL 证书安装部署.md', '218.82.154.99', '5', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (41, '2021-07-21 19:42:26.894000', '2021-07-21 19:42:26.894000', '2021-07-21-19-42-26', '218.82.154.99', '6', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (42, '2021-07-22 00:06:58.898000', '2021-07-22 00:06:58.898000', 'YVKG', '101.228.200.115', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (43, '2021-07-22 14:12:21.735000', '2021-07-22 14:12:21.735000', '2021-07-21-19-42-26', '218.82.154.99', '6', 20);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (44, '2021-07-22 14:12:32.911000', '2021-07-22 14:12:32.911000', 'Nginx 服务器 SSL 证书安装部署.md', '218.82.154.99', '5', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (45, '2021-07-22 16:34:51.419000', '2021-07-22 16:34:51.419000', 'YVKG', '218.82.154.99', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (46, '2021-07-22 16:35:34.844000', '2021-07-22 16:35:34.844000', 'Nginx 服务器 SSL 证书安装部署.md', '218.82.154.99', '5', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (47, '2021-07-22 16:36:08.819000', '2021-07-22 16:36:08.819000', 'Nginx 服务器 SSL 证书安装部署', '218.82.154.99', '5', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (48, '2021-07-22 16:45:03.665000', '2021-07-22 16:45:03.665000', 'YVKG', '218.82.154.99', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (49, '2021-07-22 17:24:15.203000', '2021-07-22 17:24:15.203000', 'Monday_1201', '218.82.154.99', '1', 45);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (50, '2021-07-22 17:36:37.634000', '2021-07-22 17:36:37.634000', 'Nginx 服务器 SSL 证书安装部署', '218.82.154.99', '5', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (51, '2021-07-22 17:39:42.151000', '2021-07-22 17:39:42.151000', 'Git的基本使用', '218.82.154.99', '6', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (52, '2021-07-22 17:39:54.639000', '2021-07-22 17:39:54.639000', 'Git的基本使用', '218.82.154.99', '6', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (53, '2021-07-22 19:05:07.842000', '2021-07-22 19:05:07.842000', ' GitHub加速', '218.82.154.99', '7', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (54, '2021-07-22 19:05:26.722000', '2021-07-22 19:05:26.722000', ' GitHub加速', '218.82.154.99', '7', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (55, '2021-07-22 23:58:36.260000', '2021-07-22 23:58:36.260000', 'YVKG', '101.228.200.115', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (56, '2021-07-23 10:22:29.632000', '2021-07-23 10:22:29.632000', 'Nginx 服务器 SSL 证书安装部署', '218.82.154.99', '5', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (57, '2021-07-23 10:25:30.758000', '2021-07-23 10:25:30.758000', 'Nginx 服务器 SSL 证书安装部署', '218.82.154.99', '5', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (58, '2021-07-23 10:28:01.044000', '2021-07-23 10:28:01.044000', ' GitHub加速', '218.82.154.99', '7', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (59, '2021-07-23 10:34:07.044000', '2021-07-23 10:34:07.044000', ' GitHub加速', '218.82.154.99', '7', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (60, '2021-07-23 10:34:31.162000', '2021-07-23 10:34:31.162000', ' GitHub加速', '218.82.154.99', '7', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (61, '2021-07-23 11:16:08.586000', '2021-07-23 11:16:08.586000', ' Git 的工作流程', '218.82.154.99', '8', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (62, '2021-07-23 11:25:30.492000', '2021-07-23 11:25:30.492000', 'Monday_1201', '218.82.154.99', '1', 45);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (63, '2021-07-23 15:22:54.428000', '2021-07-23 15:22:54.428000', 'VMware安装Centos7', '218.82.154.99', '9', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (64, '2021-07-23 15:27:52.559000', '2021-07-23 15:27:52.559000', 'VMware安装Centos7', '218.82.154.99', '9', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (65, '2021-07-23 16:53:54.795000', '2021-07-23 16:53:54.795000', 'VMware安装Centos7', '218.82.154.99', '9', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (66, '2021-07-23 18:38:41.424000', '2021-07-23 18:38:41.424000', ' Centos7 安装Maven', '218.82.154.99', '10', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (67, '2021-07-23 18:41:38.296000', '2021-07-23 18:41:38.296000', ' Centos7 安装Maven', '218.82.154.99', '10', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (68, '2021-07-23 18:58:42.465000', '2021-07-23 18:58:42.465000', ' Centos7 安装Maven', '218.82.154.99', '10', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (69, '2021-07-23 19:03:35.866000', '2021-07-23 19:03:35.866000', 'Nginx 服务器 SSL 证书安装部署', '218.82.154.99', '5', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (70, '2021-07-23 19:08:25.815000', '2021-07-23 19:08:25.815000', ' Centos7 安装Maven', '218.82.154.99', '10', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (71, '2021-07-23 19:09:25.725000', '2021-07-23 19:09:25.725000', ' Centos7 安装Maven', '218.82.154.99', '10', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (72, '2021-07-26 01:54:05.908000', '2021-07-26 01:54:05.908000', 'YVKG', '101.228.200.115', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (73, '2021-07-26 13:54:31.362000', '2021-07-26 13:54:31.362000', ' Centos7 安装Maven', '218.82.154.99', '10', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (74, '2021-07-26 15:56:48.177000', '2021-07-26 15:56:48.177000', ' Centos7 安装Maven', '218.82.154.99', '10', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (75, '2021-07-26 15:57:39.359000', '2021-07-26 15:57:39.359000', ' Centos7 安装Maven', '218.82.154.99', '10', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (76, '2021-07-26 15:58:32.645000', '2021-07-26 15:58:32.645000', ' Centos7 安装Maven', '218.82.154.99', '10', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (77, '2021-07-26 16:00:17.589000', '2021-07-26 16:00:17.589000', ' Centos7 安装Maven', '218.82.154.99', '10', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (78, '2021-07-26 16:00:49.987000', '2021-07-26 16:00:49.987000', ' Centos7 安装Maven', '218.82.154.99', '10', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (79, '2021-07-26 16:19:34.552000', '2021-07-26 16:19:34.552000', 'Nginx 服务器 SSL 证书安装部署', '218.82.154.99', '5', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (80, '2021-07-26 16:22:14.323000', '2021-07-26 16:22:14.323000', 'Nginx 服务器 SSL 证书安装部署', '218.82.154.99', '5', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (81, '2021-07-26 16:23:52.326000', '2021-07-26 16:23:52.326000', 'VMware安装Centos7', '218.82.154.99', '9', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (82, '2021-07-26 16:24:31.530000', '2021-07-26 16:24:31.530000', ' Git 的工作流程', '218.82.154.99', '8', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (83, '2021-07-26 16:24:46.279000', '2021-07-26 16:24:46.279000', 'Git的基本使用', '218.82.154.99', '6', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (84, '2021-07-26 16:26:11.445000', '2021-07-26 16:26:11.445000', 'Git的基本使用', '218.82.154.99', '6', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (85, '2021-07-26 16:27:36.686000', '2021-07-26 16:27:36.686000', 'Git的基本使用', '218.82.154.99', '6', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (86, '2021-07-26 17:00:48.051000', '2021-07-26 17:00:48.051000', 'Centos7命令行和图形界面的相互切换', '218.82.154.99', '11', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (87, '2021-07-26 17:01:46.714000', '2021-07-26 17:01:46.714000', 'CentOS7命令行和图形界面的相互切换', '218.82.154.99', '11', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (88, '2021-07-26 17:02:00.773000', '2021-07-26 17:02:00.773000', ' CentOS7 安装Maven', '218.82.154.99', '10', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (89, '2021-07-26 17:02:09.406000', '2021-07-26 17:02:09.406000', ' CentOS7 安装Maven', '218.82.154.99', '10', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (90, '2021-07-26 17:02:41.143000', '2021-07-26 17:02:41.143000', 'CentOS7 命令行和图形界面的相互切换', '218.82.154.99', '11', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (91, '2021-07-26 17:02:57.665000', '2021-07-26 17:02:57.665000', 'CentOS7 命令行和图形界面的相互切换', '218.82.154.99', '11', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (92, '2021-07-26 17:04:53.766000', '2021-07-26 17:04:53.766000', 'VMware安装Centos7', '218.82.154.99', '9', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (93, '2021-07-26 19:06:01.986000', '2021-07-26 19:06:01.986000', 'CentOS7 命令行和图形界面的相互切换', '218.82.154.99', '11', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (94, '2021-07-26 19:06:23.722000', '2021-07-26 19:06:23.722000', 'CentOS7 命令行和图形界面的相互切换', '218.82.154.99', '11', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (95, '2021-07-27 15:19:01.825000', '2021-07-27 15:19:01.825000', 'VMware安装Centos7', '218.82.154.99', '9', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (96, '2021-07-27 15:19:06.645000', '2021-07-27 15:19:06.645000', 'VMware安装Centos7', '218.82.154.99', '9', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (97, '2021-07-27 15:19:27.862000', '2021-07-27 15:19:27.862000', ' CentOS7 安装Maven', '218.82.154.99', '10', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (98, '2021-07-27 15:19:46.883000', '2021-07-27 15:19:46.883000', ' CentOS7 安装Maven', '218.82.154.99', '10', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (99, '2021-07-27 15:19:52.988000', '2021-07-27 15:19:52.988000', ' CentOS7 安装Maven', '218.82.154.99', '10', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (100, '2021-07-27 15:20:45.194000', '2021-07-27 15:20:45.194000', ' GitHub加速', '218.82.154.99', '7', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (101, '2021-07-28 16:49:31.807000', '2021-07-28 16:49:31.807000', 'YVKG', '218.82.154.99', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (102, '2021-07-30 00:34:59.170000', '2021-07-30 00:34:59.170000', 'YVKG', '101.228.200.115', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (103, '2021-07-30 00:36:42.974000', '2021-07-30 00:36:42.974000', 'List 集合去除 null 元素', '101.228.200.115', '12', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (104, '2021-07-30 09:53:00.668000', '2021-07-30 09:53:00.668000', 'YVKG', '218.82.154.99', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (105, '2021-07-30 09:53:19.578000', '2021-07-30 09:53:19.578000', 'List 集合去除 null 元素', '218.82.154.99', '12', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (106, '2021-07-30 11:11:44.986000', '2021-07-30 11:11:44.986000', 'MySQL 查询表的所有列名', '218.82.154.99', '13', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (107, '2021-07-30 11:13:06.914000', '2021-07-30 11:13:06.914000', 'MySQL 查询表的所有列名', '218.82.154.99', '13', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (108, '2021-07-30 11:13:21.200000', '2021-07-30 11:13:21.200000', 'MySQL 查询表的所有列名', '218.82.154.99', '13', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (109, '2021-07-30 11:13:24.258000', '2021-07-30 11:13:24.258000', 'MySQL 查询表的所有列名', '218.82.154.99', '13', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (110, '2021-08-03 15:22:01.377000', '2021-08-03 15:22:01.377000', 'YVKG', '218.82.154.99', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (111, '2021-08-03 15:22:23.938000', '2021-08-03 15:22:23.938000', 'Spring Security 的执行流程', '218.82.154.99', '14', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (112, '2021-08-03 15:36:27.959000', '2021-08-03 15:36:27.959000', 'Spring Security 的执行流程', '218.82.154.99', '14', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (113, '2021-08-03 15:36:33.315000', '2021-08-03 15:36:33.315000', 'Spring Security 的执行流程', '218.82.154.99', '14', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (114, '2021-08-03 15:37:00.894000', '2021-08-03 15:37:00.894000', 'Spring Security 认证原理（UsernamePasswordAuthenticationFilter）', '218.82.154.99', '15', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (115, '2021-08-03 15:39:42.513000', '2021-08-03 15:39:42.513000', 'Spring Security 认证原理（UsernamePasswordAuthenticationFilter）', '218.82.154.99', '15', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (116, '2021-08-03 16:54:03.752000', '2021-08-03 16:54:03.752000', 'Spring Security 认证原理（UsernamePasswordAuthenticationFilter）', '218.82.154.99', '15', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (117, '2021-08-03 16:54:35.016000', '2021-08-03 16:54:35.016000', 'SpringBean 的生命周期和作用域详解', '218.82.154.99', '16', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (118, '2021-08-03 16:55:26.467000', '2021-08-03 16:55:26.467000', 'SpringBean 的生命周期和作用域详解', '218.82.154.99', '16', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (119, '2021-08-03 16:56:10.085000', '2021-08-03 16:56:10.085000', 'Spring Security 认证原理（UsernamePasswordAuthenticationFilter）', '218.82.154.99', '15', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (120, '2021-08-03 16:56:18.535000', '2021-08-03 16:56:18.535000', 'Spring Security 的执行流程', '218.82.154.99', '14', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (121, '2021-08-03 16:58:20.042000', '2021-08-03 16:58:20.042000', ' GitHub加速', '218.82.154.99', '7', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (122, '2021-08-03 17:00:22.478000', '2021-08-03 17:00:22.478000', ' Git 的工作流程', '218.82.154.99', '8', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (123, '2021-08-03 17:00:39.090000', '2021-08-03 17:00:39.090000', ' Git 的工作流程', '218.82.154.99', '8', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (124, '2021-08-04 23:50:38.743000', '2021-08-04 23:50:38.743000', 'YVKG', '101.228.200.115', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (125, '2021-08-04 23:51:17.115000', '2021-08-04 23:51:17.115000', '物理分页与（逻辑分页就是内存分页）', '101.228.200.115', '17', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (126, '2021-08-06 16:31:15.831000', '2021-08-06 16:31:15.831000', 'YVKG', '218.82.154.99', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (127, '2021-08-06 16:33:14.542000', '2021-08-06 16:33:14.542000', 'SpringBean 的生命周期和作用域详解', '218.82.154.99', '16', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (128, '2021-08-06 16:35:28.997000', '2021-08-06 16:35:28.997000', '物理分页与（逻辑分页就是内存分页）', '218.82.154.99', '17', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (129, '2021-08-06 16:35:55.712000', '2021-08-06 16:35:55.712000', 'Spring Security 认证原理（UsernamePasswordAuthenticationFilter）', '218.82.154.99', '15', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (130, '2021-08-06 16:35:58.939000', '2021-08-06 16:35:58.939000', 'Spring Security 认证原理（UsernamePasswordAuthenticationFilter）', '218.82.154.99', '15', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (131, '2021-08-06 16:36:17.492000', '2021-08-06 16:36:17.492000', 'Spring Security 的执行流程', '218.82.154.99', '14', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (132, '2021-08-06 16:36:42.707000', '2021-08-06 16:36:42.707000', 'MySQL 查询表的所有列名', '218.82.154.99', '13', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (133, '2021-08-06 16:36:46.656000', '2021-08-06 16:36:46.656000', 'MySQL 查询表的所有列名', '218.82.154.99', '13', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (134, '2021-08-06 16:44:14.201000', '2021-08-06 16:44:14.201000', '物理分页与（逻辑分页就是内存分页）', '218.82.154.99', '17', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (135, '2021-08-09 15:11:24.196000', '2021-08-09 15:11:24.196000', 'YVKG', '218.82.154.99', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (136, '2021-08-09 15:29:16.503000', '2021-08-09 15:29:16.503000', 'Spring Security 的执行流程', '218.82.154.99', '14', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (137, '2021-08-09 15:29:22.046000', '2021-08-09 15:29:22.046000', 'Spring Security 的执行流程', '218.82.154.99', '14', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (138, '2021-08-09 15:29:37.980000', '2021-08-09 15:29:37.980000', 'Spring Security 的执行流程', '218.82.154.99', '14', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (139, '2021-08-09 15:34:39.284000', '2021-08-09 15:34:39.284000', 'Spring Security 的执行流程', '218.82.154.99', '14', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (140, '2021-08-09 15:35:29.112000', '2021-08-09 15:35:29.112000', 'Spring Security 认证原理（UsernamePasswordAuthenticationFilter）', '218.82.154.99', '15', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (141, '2021-08-09 15:36:15.357000', '2021-08-09 15:36:15.357000', 'CentOS 7 命令行和图形界面的相互切换', '218.82.154.99', '11', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (142, '2021-08-09 15:37:32.122000', '2021-08-09 15:37:32.122000', ' CentOS7 安装Maven', '218.82.154.99', '10', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (143, '2021-08-09 15:38:08.191000', '2021-08-09 15:38:08.191000', ' CentOS 7 安装Maven', '218.82.154.99', '10', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (144, '2021-08-09 15:38:33.988000', '2021-08-09 15:38:33.988000', 'SpringBean 的生命周期和作用域详解', '218.82.154.99', '16', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (145, '2021-08-09 15:41:57.005000', '2021-08-09 15:41:57.005000', 'MySQL 查询表的所有列名', '218.82.154.99', '13', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (146, '2021-08-09 15:47:06.805000', '2021-08-09 15:47:06.805000', '物理分页与逻辑分页（内存分页）', '218.82.154.99', '17', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (147, '2021-08-09 16:24:36.459000', '2021-08-09 16:24:36.459000', 'List 集合去除 null 元素', '218.82.154.99', '12', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (148, '2021-08-09 16:37:25.537000', '2021-08-09 16:37:25.537000', ' Git 的工作流程', '218.82.154.99', '8', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (149, '2021-08-09 16:37:56.734000', '2021-08-09 16:37:56.734000', ' Git 的工作流程', '218.82.154.99', '8', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (150, '2021-08-09 16:56:36.899000', '2021-08-09 16:56:36.899000', 'VMware 安装 Centos 7', '218.82.154.99', '9', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (151, '2021-08-09 16:56:55.086000', '2021-08-09 16:56:55.086000', ' Git 的工作流程', '218.82.154.99', '8', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (152, '2021-08-09 16:57:19.242000', '2021-08-09 16:57:19.242000', ' GitHub加速', '218.82.154.99', '7', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (153, '2021-08-09 16:57:55.471000', '2021-08-09 16:57:55.471000', ' GitHub加速', '218.82.154.99', '7', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (154, '2021-08-09 16:58:07.016000', '2021-08-09 16:58:07.016000', 'Git的基本使用', '218.82.154.99', '6', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (155, '2021-08-09 16:59:03.978000', '2021-08-09 16:59:03.978000', 'Nginx 服务器 SSL 证书安装部署', '218.82.154.99', '5', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (156, '2021-08-09 16:59:31.043000', '2021-08-09 16:59:31.043000', 'Nginx 服务器 SSL 证书安装部署', '218.82.154.99', '5', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (157, '2021-08-09 17:54:14.126000', '2021-08-09 17:54:14.126000', 'Git的基本使用', '218.82.154.99', '6', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (158, '2021-08-09 17:58:52.077000', '2021-08-09 17:58:52.077000', 'Nginx 服务器 SSL 证书安装部署', '218.82.154.99', '5', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (159, '2021-08-09 18:11:19.221000', '2021-08-09 18:11:19.221000', 'Git的基本使用', '218.82.154.99', '6', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (160, '2021-08-09 18:12:35.767000', '2021-08-09 18:12:35.767000', 'Git的基本使用', '218.82.154.99', '6', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (161, '2021-08-09 18:13:35.381000', '2021-08-09 18:13:35.381000', 'Git的基本使用', '218.82.154.99', '6', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (162, '2021-08-10 15:38:19.693000', '2021-08-10 15:38:19.693000', 'CentOS 7 设置静态IP', '218.82.154.99', '18', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (163, '2021-08-10 15:39:22.060000', '2021-08-10 15:39:22.060000', 'CentOS 7 设置静态IP', '218.82.154.99', '18', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (164, '2021-08-10 15:42:48.419000', '2021-08-10 15:42:48.419000', 'CentOS 7 设置静态IP', '218.82.154.99', '18', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (165, '2021-08-10 19:12:26.617000', '2021-08-10 19:12:26.617000', 'CentOS 7 设置静态IP', '218.82.154.99', '18', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (166, '2021-08-10 19:13:56.135000', '2021-08-10 19:13:56.135000', 'CentOS 7 设置静态IP', '218.82.154.99', '18', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (167, '2021-08-10 20:16:58.112000', '2021-08-10 20:16:58.112000', 'CentOS 更换 yum 源', '218.82.154.99', '19', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (168, '2021-08-13 17:59:13.819000', '2021-08-13 17:59:13.819000', 'YVKG', '218.82.154.99', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (169, '2021-08-14 17:54:43.747000', '2021-08-14 17:54:43.747000', 'YVKG', '101.228.200.115', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (170, '2021-08-14 17:55:13.421000', '2021-08-14 17:55:13.421000', 'Git 生成 SSH key', '101.228.200.115', '20', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (171, '2021-08-14 17:57:17.040000', '2021-08-14 17:57:17.040000', 'Windows 配置 Java 开发环境', '101.228.200.115', '21', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (172, '2021-08-14 18:03:18.590000', '2021-08-14 18:03:18.590000', '配置 Java 开发环境', '101.228.200.115', '21', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (173, '2021-08-14 18:04:56.419000', '2021-08-14 18:04:56.419000', '配置 Java 开发环境', '101.228.200.115', '21', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (174, '2021-08-14 18:05:26.523000', '2021-08-14 18:05:26.523000', '配置 Java 开发环境', '101.228.200.115', '21', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (175, '2021-08-14 18:05:46.476000', '2021-08-14 18:05:46.476000', '配置 Java 开发环境', '101.228.200.115', '21', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (176, '2021-08-14 18:06:07.429000', '2021-08-14 18:06:07.429000', '配置 Java 开发环境', '101.228.200.115', '21', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (177, '2021-08-14 18:07:25.852000', '2021-08-14 18:07:25.852000', '配置 Java 开发环境', '101.228.200.115', '21', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (178, '2021-08-14 18:07:56.009000', '2021-08-14 18:07:56.009000', '配置 Java 开发环境', '101.228.200.115', '21', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (179, '2021-08-14 18:08:37.277000', '2021-08-14 18:08:37.277000', '配置 Java 开发环境', '101.228.200.115', '21', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (180, '2021-08-14 18:08:58.833000', '2021-08-14 18:08:58.833000', '配置 Java 开发环境', '101.228.200.115', '21', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (181, '2021-08-14 18:09:48.145000', '2021-08-14 18:09:48.145000', '配置 Java 开发环境', '101.228.200.115', '21', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (182, '2021-08-14 18:11:50.559000', '2021-08-14 18:11:50.559000', '配置 Java 开发环境', '101.228.200.115', '21', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (183, '2021-08-14 18:13:17.180000', '2021-08-14 18:13:17.180000', '配置 Java 开发环境', '101.228.200.115', '21', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (184, '2021-08-14 18:22:54.053000', '2021-08-14 18:22:54.053000', '配置 Java 开发环境', '101.228.200.115', '21', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (185, '2021-08-14 18:25:04.654000', '2021-08-14 18:25:04.654000', '配置 Java 开发环境', '101.228.200.115', '21', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (186, '2021-08-14 18:27:16.939000', '2021-08-14 18:27:16.939000', '配置 Java 开发环境', '101.228.200.115', '21', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (187, '2021-08-14 18:31:55.878000', '2021-08-14 18:31:55.878000', '图床地址', '101.228.200.115', '22', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (188, '2021-08-14 18:32:28.437000', '2021-08-14 18:32:28.437000', '图床地址', '101.228.200.115', '22', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (189, '2021-08-14 18:33:14.044000', '2021-08-14 18:33:14.044000', '图床地址', '101.228.200.115', '22', 20);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (190, '2021-08-14 18:47:32.264000', '2021-08-14 18:47:32.264000', '配置 Maven 开发环境', '101.228.200.115', '23', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (191, '2021-08-14 18:47:56.735000', '2021-08-14 18:47:56.735000', '配置 Java 开发环境', '101.228.200.115', '21', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (192, '2021-08-14 19:13:12.053000', '2021-08-14 19:13:12.053000', 'Maven 配置仓库', '101.228.200.115', '24', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (193, '2021-08-14 19:14:05.497000', '2021-08-14 19:14:05.497000', '配置 Maven 仓库', '101.228.200.115', '24', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (194, '2021-08-14 22:45:16.968000', '2021-08-14 22:45:16.968000', '配置 Gradle 开发环境', '101.228.200.115', '25', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (195, '2021-08-15 11:32:01.301000', '2021-08-15 11:32:01.301000', '配置 Gradle 环境变量', '101.228.200.115', '25', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (196, '2021-08-15 11:32:24.845000', '2021-08-15 11:32:24.845000', '配置 Maven 环境变量', '101.228.200.115', '23', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (197, '2021-08-15 11:40:02.702000', '2021-08-15 11:40:02.702000', '配置 Gradle 环境', '101.228.200.115', '25', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (198, '2021-08-17 16:48:28.021000', '2021-08-17 16:48:28.021000', 'YVKG', '218.82.154.99', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (199, '2021-08-17 16:49:03.232000', '2021-08-17 16:49:03.232000', '端口被占用处理', '218.82.154.99', '26', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (200, '2021-08-17 17:42:06.549000', '2021-08-17 17:42:06.549000', '端口被占用处理', '218.82.154.99', '26', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (201, '2021-08-17 19:04:04.090000', '2021-08-17 19:04:04.090000', '配置 Java 开发环境', '218.82.154.99', '21', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (202, '2021-08-17 19:04:58.750000', '2021-08-17 19:04:58.750000', '配置 Java 开发环境', '218.82.154.99', '21', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (203, '2021-08-18 23:55:01.085000', '2021-08-18 23:55:01.085000', 'YVKG', '101.228.200.115', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (204, '2021-08-19 20:31:10.787000', '2021-08-19 20:31:10.787000', 'VMware 安装 Centos 7', '101.228.200.115', '9', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (205, '2021-08-19 20:43:37.468000', '2021-08-19 20:43:37.468000', 'YVKG', '101.228.200.115', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (206, '2021-08-24 10:43:40.923000', '2021-08-24 10:43:40.923000', 'YVKG', '180.171.83.51', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (207, '2021-08-24 10:45:18.329000', '2021-08-24 10:45:18.329000', 'MySQL DATE_FORMAT() 函数', '180.171.83.51', '27', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (208, '2021-08-24 22:43:43.170000', '2021-08-24 22:43:43.170000', 'YVKG', '101.228.200.115', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (209, '2021-08-24 22:44:40.814000', '2021-08-24 22:44:40.814000', 'springboot', '101.228.200.115', '28', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (210, '2021-09-06 22:24:50.086000', '2021-09-06 22:24:50.086000', 'YVKG', '180.171.83.51', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (211, '2021-09-06 22:25:21.438000', '2021-09-06 22:25:21.438000', '日志框架', '180.171.83.51', '29', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (212, '2021-09-07 14:06:54.940000', '2021-09-07 14:06:54.940000', '日志框架', '180.171.83.51', '29', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (213, '2021-09-07 14:25:52.345000', '2021-09-07 14:25:52.345000', 'springboot', '180.171.83.51', '28', 20);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (214, '2021-09-07 14:30:23.766000', '2021-09-07 14:30:23.766000', '日志框架', '180.171.83.51', '29', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (215, '2021-09-07 18:44:35.298000', '2021-09-07 18:44:35.298000', 'SpringBoot 日志', '180.171.83.51', '30', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (216, '2021-09-08 13:50:37.967000', '2021-09-08 13:50:37.967000', 'SpringBoot 日志', '180.171.83.51', '30', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (217, '2021-09-08 13:50:46.616000', '2021-09-08 13:50:46.616000', '日志框架', '180.171.83.51', '29', 20);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (218, '2021-09-11 15:31:45.992000', '2021-09-11 15:31:45.992000', 'YVKG', '180.171.83.51', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (219, '2021-09-11 15:32:28.844000', '2021-09-11 15:32:28.844000', '配置 Java 开发环境', '180.171.83.51', '21', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (220, '2021-09-11 23:57:37.864000', '2021-09-11 23:57:37.864000', 'CentOS 7 通过 yum 安装 MySQL', '180.171.83.51', '31', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (221, '2021-09-12 01:25:41.576000', '2021-09-12 01:25:41.576000', 'CentOS 7 通过 yum 安装 MySQL', '180.171.83.51', '31', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (222, '2021-09-12 02:20:15.967000', '2021-09-12 02:20:15.967000', 'CentOS 7 通过 yum 安装 MySQL', '180.171.83.51', '31', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (223, '2021-09-12 16:38:00.571000', '2021-09-12 16:38:00.571000', 'CentOS 7 通过 yum 安装 MySQL 8', '180.171.83.51', '31', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (224, '2021-09-12 20:02:15.595000', '2021-09-12 20:02:15.595000', 'CentOS 7 安装 Elasticsearch 7.14', '180.171.83.51', '32', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (225, '2021-09-12 20:05:38.367000', '2021-09-12 20:05:38.367000', 'CentOS 7 安装 Elasticsearch 7.14', '180.171.83.51', '32', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (226, '2021-09-12 20:54:25.920000', '2021-09-12 20:54:25.920000', 'CentOS 7 安装 Kibana 7.14', '180.171.83.51', '33', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (227, '2021-09-12 20:58:14.748000', '2021-09-12 20:58:14.748000', 'CentOS 7 安装 Kibana 7.14', '180.171.83.51', '33', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (228, '2021-09-12 21:00:20.963000', '2021-09-12 21:00:20.963000', 'CentOS 7 安装 Kibana 7.14', '180.171.83.51', '33', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (229, '2021-09-12 22:07:53.680000', '2021-09-12 22:07:53.680000', 'CentOS 7 安装 Elasticsearch 7.14', '180.171.83.51', '32', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (230, '2021-09-12 22:09:34.354000', '2021-09-12 22:09:34.354000', 'CentOS 7 安装 Elasticsearch 7.14', '180.171.83.51', '32', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (231, '2021-09-12 22:16:34.526000', '2021-09-12 22:16:34.526000', 'CentOS 7 安装 Elasticsearch 7.14', '180.171.83.51', '32', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (232, '2021-09-14 22:42:25.001000', '2021-09-14 22:42:25.001000', 'Monday_1201', '101.88.215.42', 'Monday_1201', 35);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (233, '2021-09-14 22:42:31.248000', '2021-09-14 22:42:31.248000', 'YVKG', '101.88.215.42', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (234, '2021-09-14 22:43:02.739000', '2021-09-14 22:43:02.739000', '配置 Maven 环境变量', '101.88.215.42', '23', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (235, '2021-09-15 14:13:39.320000', '2021-09-15 14:13:39.320000', 'YVKG', '180.171.83.51', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (236, '2021-09-15 14:13:56.471000', '2021-09-15 14:13:56.471000', 'CentOS 7 Yum 命令', '180.171.83.51', '34', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (237, '2021-09-15 14:30:50.690000', '2021-09-15 14:30:50.690000', '配置 Maven 环境变量', '180.171.83.51', '23', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (238, '2021-09-15 14:31:19.640000', '2021-09-15 14:31:19.640000', 'CentOS 7 通过 Yum 安装 MySQL 8', '180.171.83.51', '31', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (239, '2021-09-15 14:49:11.415000', '2021-09-15 14:49:11.415000', 'CentOS 7 查找 OpenJDK 的安装路径', '180.171.83.51', '35', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (240, '2021-09-15 15:12:14.699000', '2021-09-15 15:12:14.699000', 'Centos 7 卸载自带的 OpenJDK', '180.171.83.51', '36', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (241, '2021-09-15 17:24:16.586000', '2021-09-15 17:24:16.586000', 'd', '180.171.83.51', '37', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (242, '2021-09-15 20:59:29.277000', '2021-09-15 20:59:29.277000', 'd', '180.171.83.51', '37', 20);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (243, '2021-09-15 20:59:48.335000', '2021-09-15 20:59:48.335000', '配置 Maven 仓库和 JDK', '180.171.83.51', '24', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (244, '2021-09-16 15:08:28.482000', '2021-09-16 15:08:28.482000', 'YVKG', '180.171.83.51', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (245, '2021-09-17 11:11:42.292000', '2021-09-17 11:11:42.292000', 'CentOS 更换 yum 源', '180.171.83.51', '19', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (246, '2021-09-17 18:24:53.737000', '2021-09-17 18:24:53.737000', 'Spring Boot 配置文件', '180.171.83.51', '38', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (247, '2021-09-18 11:21:11.545000', '2021-09-18 11:21:11.545000', 'Spring Boot 配置文件', '180.171.83.51', '38', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (248, '2021-09-18 11:23:08.601000', '2021-09-18 11:23:08.601000', 'Spring Boot 日志', '180.171.83.51', '30', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (249, '2021-09-22 18:26:31.980000', '2021-09-22 18:26:31.980000', 'YVKG', '180.171.83.51', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (250, '2021-09-22 18:27:28.473000', '2021-09-22 18:27:28.473000', 'ES 6 新特性', '180.171.83.51', '39', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (251, '2021-09-22 18:28:50.622000', '2021-09-22 18:28:50.622000', 'ES 6 新特性', '180.171.83.51', '39', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (252, '2021-09-22 23:35:07.253000', '2021-09-22 23:35:07.253000', 'YVKG', '101.88.215.42', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (253, '2021-09-22 23:35:35.780000', '2021-09-22 23:35:35.780000', 'Nodejs 环境配置', '101.88.215.42', '40', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (254, '2021-09-22 23:57:49.286000', '2021-09-22 23:57:49.286000', 'Nodejs 环境配置', '101.88.215.42', '40', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (255, '2021-09-23 10:45:21.525000', '2021-09-23 10:45:21.525000', ' CentOS7 安装 Maven', '180.171.83.51', '10', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (256, '2021-09-23 13:54:43.939000', '2021-09-23 13:54:43.939000', ' CentOS 7 安装 Maven', '180.171.83.51', '10', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (257, '2021-09-23 14:44:46.986000', '2021-09-23 14:44:46.986000', 'Nodejs 环境配置', '180.171.83.51', '40', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (258, '2021-09-23 14:45:10.747000', '2021-09-23 14:45:10.747000', 'Spring Boot 配置文件', '180.171.83.51', '38', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (259, '2021-09-23 14:45:23.390000', '2021-09-23 14:45:23.390000', 'Spring Boot 日志', '180.171.83.51', '30', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (260, '2021-09-23 14:45:39.944000', '2021-09-23 14:45:39.944000', 'ES 6 新特性', '180.171.83.51', '39', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (261, '2021-09-23 14:47:39.361000', '2021-09-23 14:47:39.361000', 'Nginx 服务器 SSL 证书安装部署', '180.171.83.51', '5', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (262, '2021-09-23 14:48:43.653000', '2021-09-23 14:48:43.653000', 'ES 6 新特性', '180.171.83.51', '39', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (263, '2021-09-23 14:50:31.906000', '2021-09-23 14:50:31.906000', 'Spring Boot 配置文件', '180.171.83.51', '38', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (264, '2021-09-23 14:51:15.313000', '2021-09-23 14:51:15.313000', 'Spring Boot 日志', '180.171.83.51', '30', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (265, '2021-09-23 14:51:35.615000', '2021-09-23 14:51:35.615000', '配置 Gradle 环境', '180.171.83.51', '25', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (266, '2021-09-23 14:51:52.183000', '2021-09-23 14:51:52.183000', '配置 Maven 仓库和 JDK', '180.171.83.51', '24', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (267, '2021-09-23 14:52:07.293000', '2021-09-23 14:52:07.293000', '配置 Maven 环境变量', '180.171.83.51', '23', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (268, '2021-09-23 14:52:28.325000', '2021-09-23 14:52:28.325000', 'Nginx 服务器 SSL 证书安装部署', '180.171.83.51', '5', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (269, '2021-09-23 14:52:43.936000', '2021-09-23 14:52:43.936000', '端口被占用处理', '180.171.83.51', '26', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (270, '2021-09-23 14:52:56.461000', '2021-09-23 14:52:56.461000', ' GitHub加速', '180.171.83.51', '7', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (271, '2021-09-23 14:54:10.175000', '2021-09-23 14:54:10.175000', 'Git 生成 SSH key', '180.171.83.51', '20', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (272, '2021-09-23 14:54:33.199000', '2021-09-23 14:54:33.199000', ' Git 的工作流程', '180.171.83.51', '8', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (273, '2021-09-23 14:54:52.535000', '2021-09-23 14:54:52.535000', 'Git的基本使用', '180.171.83.51', '6', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (274, '2021-09-23 14:55:41.858000', '2021-09-23 14:55:41.858000', '配置 Java 开发环境', '180.171.83.51', '21', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (275, '2021-09-23 14:56:07.006000', '2021-09-23 14:56:07.006000', 'List 集合去除 null 元素', '180.171.83.51', '12', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (276, '2021-09-23 14:56:25.739000', '2021-09-23 14:56:25.739000', '物理分页与逻辑分页（内存分页）', '180.171.83.51', '17', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (277, '2021-09-23 14:57:06.769000', '2021-09-23 14:57:06.769000', '物理分页与逻辑分页（内存分页）', '180.171.83.51', '17', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (278, '2021-09-23 14:57:27.069000', '2021-09-23 14:57:27.069000', 'MySQL 查询表的所有列名', '180.171.83.51', '13', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (279, '2021-09-23 14:57:52.406000', '2021-09-23 14:57:52.406000', 'MySQL DATE_FORMAT() 函数', '180.171.83.51', '27', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (280, '2021-09-23 14:58:12.525000', '2021-09-23 14:58:12.525000', 'SpringBean 的生命周期和作用域详解', '180.171.83.51', '16', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (281, '2021-09-23 14:58:46.215000', '2021-09-23 14:58:46.215000', 'CentOS 更换 Yum 源', '180.171.83.51', '19', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (282, '2021-09-23 14:59:33.793000', '2021-09-23 14:59:33.793000', 'CentOS 7 安装 Elasticsearch 7.14', '180.171.83.51', '32', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (283, '2021-09-23 14:59:58.788000', '2021-09-23 14:59:58.788000', 'CentOS 7 安装 Kibana 7.14', '180.171.83.51', '33', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (284, '2021-09-23 15:02:11.224000', '2021-09-23 15:02:11.224000', 'CentOS 7 安装和配置 Git', '180.171.83.51', '41', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (285, '2021-09-23 16:29:06.308000', '2021-09-23 16:29:06.308000', 'ES 6 新特性', '180.171.83.51', '39', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (286, '2021-09-23 16:30:25.588000', '2021-09-23 16:30:25.588000', 'ES 6 新特性', '180.171.83.51', '39', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (287, '2021-09-23 18:04:41.722000', '2021-09-23 18:04:41.722000', 'Babel', '180.171.83.51', '42', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (288, '2021-09-23 19:12:37.977000', '2021-09-23 19:12:37.977000', 'YVKG', '180.171.83.51', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (289, '2021-09-23 19:12:39.129000', '2021-09-23 19:12:39.129000', 'Babel 入门', '180.171.83.51', '42', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (290, '2021-09-27 13:38:32.571000', '2021-09-27 13:38:32.571000', 'YVKG', '180.171.83.51', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (291, '2021-09-27 13:38:54.045000', '2021-09-27 13:38:54.045000', 'Babel 入门', '180.171.83.51', '42', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (292, '2021-10-11 15:34:10.298000', '2021-10-11 15:34:10.298000', 'YVKG', '180.171.83.51', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (293, '2021-10-11 16:44:52.083000', '2021-10-11 16:44:52.083000', 'webpack', '180.171.83.51', '43', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (294, '2021-10-11 16:47:53.683000', '2021-10-11 16:47:53.683000', 'webpack', '180.171.83.51', '43', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (295, '2021-10-11 16:49:02.953000', '2021-10-11 16:49:02.953000', 'Node.js 环境配置', '180.171.83.51', '40', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (296, '2021-10-12 18:21:57.711000', '2021-10-12 18:21:57.711000', 'YVKG', '180.171.83.51', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (297, '2021-10-13 12:18:17.998000', '2021-10-13 12:18:17.998000', 'Babel', '180.171.83.51', '42', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (298, '2021-10-13 12:18:57.536000', '2021-10-13 12:18:57.536000', 'SpringBoot 集成 Swagger2 与 Swagger3 的区别', '180.171.83.51', '44', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (299, '2021-10-13 21:33:45.355000', '2021-10-13 21:33:45.355000', 'YVKG', '101.88.215.42', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (300, '2021-10-14 18:18:39.965000', '2021-10-14 18:18:39.965000', 'YVKG', '180.171.83.51', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (301, '2021-10-14 18:22:22.915000', '2021-10-14 18:22:22.915000', 'Spring Boot 配置文件', '180.171.83.51', '38', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (302, '2021-10-14 18:24:57.494000', '2021-10-14 18:24:57.494000', 'Spring Boot 配置文件', '180.171.83.51', '38', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (303, '2021-10-14 22:16:24.306000', '2021-10-14 22:16:24.306000', 'YVKG', '101.88.215.42', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (304, '2021-10-17 19:00:17.668000', '2021-10-17 19:00:17.668000', 'YVKG', '180.171.83.51', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (305, '2021-10-17 19:00:49.176000', '2021-10-17 19:00:49.176000', 'Spring Boot 解决跨域', '180.171.83.51', '45', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (306, '2021-10-17 20:51:13.830000', '2021-10-17 20:51:13.830000', 'YVKG', '101.88.215.42', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (307, '2021-10-17 20:51:25.662000', '2021-10-17 20:51:25.662000', 'Spring Boot 解决跨域', '101.88.215.42', '45', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (308, '2021-10-18 15:15:21.074000', '2021-10-18 15:15:21.074000', 'CentOS 7 安装 Redis 6.2.6', '180.171.83.51', '46', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (309, '2021-10-18 15:36:18.734000', '2021-10-18 15:36:18.734000', 'CentOS 7 安装 Redis 6.2.6', '180.171.83.51', '46', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (310, '2021-10-18 15:37:49.360000', '2021-10-18 15:37:49.360000', 'CentOS 7 安装 Redis 6.2.6', '180.171.83.51', '46', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (311, '2021-10-19 17:30:05.397000', '2021-10-19 17:30:05.397000', 'YVKG', '180.171.83.51', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (312, '2021-10-19 17:32:38.780000', '2021-10-19 17:32:38.780000', 'Docker 安装 RabbitMQ', '180.171.83.51', '47', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (313, '2021-10-19 17:41:16.692000', '2021-10-19 17:41:16.692000', 'Docker 安装 RabbitMQ', '180.171.83.51', '47', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (314, '2021-10-19 22:02:13.499000', '2021-10-19 22:02:13.499000', 'CentOS 7 安装 RabbitMQ 3.9.8', '180.171.83.51', '48', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (315, '2021-10-19 22:09:21.563000', '2021-10-19 22:09:21.563000', 'CentOS 7 安装 Redis 6.2.6', '180.171.83.51', '46', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (316, '2021-10-20 11:31:35.060000', '2021-10-20 11:31:35.060000', 'CentOS 7 安装 RabbitMQ 3.9.8', '180.171.83.51', '48', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (317, '2021-10-20 11:32:15.552000', '2021-10-20 11:32:15.552000', 'CentOS 7 安装 Redis 6.2.6', '180.171.83.51', '46', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (318, '2021-10-20 11:33:20.849000', '2021-10-20 11:33:20.849000', 'CentOS 7 安装 Redis 6.2.6', '180.171.83.51', '46', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (319, '2021-10-24 21:56:40.979000', '2021-10-24 21:56:40.979000', 'YVKG', '101.88.215.42', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (320, '2021-10-24 21:56:56.756000', '2021-10-24 21:56:56.756000', 'Git 修改历史提交的用户名和邮箱', '101.88.215.42', '49', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (321, '2021-10-24 21:58:26.220000', '2021-10-24 21:58:26.220000', 'Git 修改历史提交的用户名和邮箱', '101.88.215.42', '49', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (322, '2021-11-02 22:05:31.222000', '2021-11-02 22:05:31.222000', 'YVKG', '101.88.247.22', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (323, '2021-11-02 22:05:47.476000', '2021-11-02 22:05:47.476000', 'Nginx 配置', '101.88.247.22', '50', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (324, '2021-11-04 17:25:44.548000', '2021-11-04 17:25:44.548000', 'YVKG', '116.227.60.170', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (325, '2021-11-04 17:26:09.412000', '2021-11-04 17:26:09.412000', 'GitHub 搜索技巧', '116.227.60.170', '51', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (326, '2021-11-04 17:28:20.750000', '2021-11-04 17:28:20.750000', 'GitHub 搜索技巧', '116.227.60.170', '51', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (327, '2021-11-04 17:29:16.493000', '2021-11-04 17:29:16.493000', 'GitHub 搜索技巧', '116.227.60.170', '51', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (328, '2021-11-04 17:38:18.476000', '2021-11-04 17:38:18.476000', 'YVKG', '116.227.60.170', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (329, '2021-11-04 17:40:58.562000', '2021-11-04 17:40:58.562000', 'GitHub 搜索技巧', '116.227.60.170', '51', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (330, '2021-11-05 10:40:21.283000', '2021-11-05 10:40:21.283000', 'GitHub 搜索技巧', '116.227.60.170', '51', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (331, '2021-11-05 10:40:47.974000', '2021-11-05 10:40:47.974000', 'GitHub 搜索技巧', '116.227.60.170', '51', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (332, '2021-11-05 11:25:39.473000', '2021-11-05 11:25:39.473000', 'GitHub 搜索技巧', '116.227.60.170', '51', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (333, '2021-11-05 16:10:56.882000', '2021-11-05 16:10:56.882000', 'Docker 命令集合', '116.227.60.170', '52', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (334, '2021-11-05 16:11:17.723000', '2021-11-05 16:11:17.723000', 'Docker 命令集合', '116.227.60.170', '52', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (335, '2021-11-05 16:12:33.716000', '2021-11-05 16:12:33.716000', 'Docker 命令集合', '116.227.60.170', '52', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (336, '2021-11-05 16:20:03.305000', '2021-11-05 16:20:03.305000', 'Docker 命令集合', '116.227.60.170', '52', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (337, '2021-11-05 16:21:44.855000', '2021-11-05 16:21:44.855000', 'Docker 命令集合', '116.227.60.170', '52', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (338, '2021-11-06 18:45:41.036000', '2021-11-06 18:45:41.036000', 'YVKG', '116.227.60.170', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (339, '2021-11-06 18:47:04.185000', '2021-11-06 18:47:04.185000', 'CentOS 7 防火墙 Firewall 的使用', '116.227.60.170', '53', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (340, '2021-11-08 16:04:05.097000', '2021-11-08 16:04:05.097000', 'YVKG', '116.227.60.170', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (341, '2021-11-08 16:05:07.525000', '2021-11-08 16:05:07.525000', 'Nginx 配置', '116.227.60.170', '54', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (342, '2021-11-08 16:05:50.706000', '2021-11-08 16:05:50.706000', 'Nginx 配置', '116.227.60.170', '54', 20);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (343, '2021-11-08 16:06:13.216000', '2021-11-08 16:06:13.216000', 'Nginx 配置.md', '116.227.60.170', '55', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (344, '2021-11-08 16:06:13.222000', '2021-11-08 16:06:13.222000', 'GitHub 搜索技巧.md', '116.227.60.170', '56', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (345, '2021-11-08 16:06:13.227000', '2021-11-08 16:06:13.227000', 'Docker命令集合.md', '116.227.60.170', '57', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (346, '2021-11-08 16:06:24.966000', '2021-11-08 16:06:24.966000', 'Docker命令集合.md', '116.227.60.170', '57', 20);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (347, '2021-11-08 16:06:33.864000', '2021-11-08 16:06:33.864000', 'GitHub 搜索技巧.md', '116.227.60.170', '56', 20);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (348, '2021-11-08 16:06:36.151000', '2021-11-08 16:06:36.151000', 'Nginx 配置.md', '116.227.60.170', '55', 20);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (349, '2021-11-09 15:24:58.689000', '2021-11-09 15:24:58.689000', 'Spring Boot 配置文件', '116.227.60.170', '38', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (350, '2021-11-10 11:02:12.042000', '2021-11-10 11:02:12.042000', 'SpringBoot 集成 Swagger2 与 Swagger3 的区别', '116.227.60.170', '44', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (351, '2021-11-11 20:44:42.515000', '2021-11-11 20:44:42.515000', 'YVKG', '116.227.60.170', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (352, '2021-11-11 20:45:14.555000', '2021-11-11 20:45:14.555000', 'CentOS 7 通过 Yum 安装 MySQL 8', '116.227.60.170', '31', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (353, '2021-11-12 10:56:10.200000', '2021-11-12 10:56:10.200000', 'CentOS 更换 Yum 源', '116.227.60.170', '19', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (354, '2021-11-12 11:17:22.251000', '2021-11-12 11:17:22.251000', ' CentOS 7 安装 Maven', '116.227.60.170', '10', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (355, '2021-11-12 11:19:16.798000', '2021-11-12 11:19:16.798000', 'CentOS 7 通过 Yum 安装 MySQL 8', '116.227.60.170', '31', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (356, '2021-11-12 14:01:16.902000', '2021-11-12 14:01:16.902000', 'YVKG', '116.227.60.170', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (357, '2021-11-12 14:04:13.139000', '2021-11-12 14:04:13.139000', 'YVKG', '116.227.60.170', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (358, '2021-11-12 14:22:12.956000', '2021-11-12 14:22:12.956000', 'YVKG', '116.227.60.170', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (359, '2021-11-12 14:30:40.506000', '2021-11-12 14:30:40.506000', 'CentOS 7 防火墙 Firewall 的使用', '116.227.60.170', '53', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (360, '2021-11-12 14:31:10.325000', '2021-11-12 14:31:10.325000', 'CentOS 7 防火墙 Firewall 的使用', '116.227.60.170', '53', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (361, '2021-11-12 14:36:58.922000', '2021-11-12 14:36:58.922000', 'Monday_1201', '116.227.60.170', 'Monday_1201', 35);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (362, '2021-11-12 14:37:08.596000', '2021-11-12 14:37:08.596000', 'YVKG', '116.227.60.170', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (363, '2021-11-12 14:43:44.956000', '2021-11-12 14:43:44.956000', 'YVKG', '116.227.60.170', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (364, '2021-11-12 14:51:35.560000', '2021-11-12 14:51:35.560000', 'YVKG', '116.227.60.170', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (365, '2021-11-12 14:51:54.849000', '2021-11-12 14:51:54.849000', 'CentOS 7 防火墙 Firewall 的使用', '116.227.60.170', '53', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (366, '2021-11-12 15:21:26.276000', '2021-11-12 15:21:26.276000', 'YVKG', '116.227.60.170', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (367, '2021-11-12 18:12:28.594000', '2021-11-12 18:12:28.594000', 'Monday_1201', '116.227.60.170', '1', 45);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (368, '2021-11-12 18:12:32.897000', '2021-11-12 18:12:32.897000', 'Monday_1201', '116.227.60.170', '1', 45);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (369, '2021-11-12 19:19:22.352000', '2021-11-12 19:19:22.352000', 'CentOS 7 安装 Nginx', '116.227.60.170', '58', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (370, '2021-11-12 20:07:08.521000', '2021-11-12 20:07:08.521000', 'YVKG', '101.88.247.22', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (371, '2021-11-13 01:48:37.544000', '2021-11-13 01:48:37.544000', 'YVKG', '101.88.247.22', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (372, '2021-11-13 17:12:06.324000', '2021-11-13 17:12:06.324000', 'YVKG', '114.92.231.123', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (373, '2021-11-13 20:14:16.833000', '2021-11-13 20:14:16.833000', 'YVKG', '116.227.60.170', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (374, '2021-11-13 20:17:07.813000', '2021-11-13 20:17:07.813000', 'YVKG', '114.92.231.123', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (375, '2021-11-15 10:05:38.933000', '2021-11-15 10:05:38.933000', 'YVKG', '116.227.60.170', 'Monday_1201', 30);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (376, '2021-11-15 10:05:50.787000', '2021-11-15 10:05:50.787000', 'YVKG', '116.227.60.170', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (377, '2021-11-15 10:53:24.281000', '2021-11-15 10:53:24.281000', 'YVKG', '116.227.60.170', 'Monday_1201', 30);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (378, '2021-11-15 10:53:53.566000', '2021-11-15 10:53:53.566000', 'YVKG', '116.227.60.170', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (379, '2021-11-15 10:57:04.163000', '2021-11-15 10:57:04.163000', 'YVKG', '116.227.60.170', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (380, '2021-11-15 13:35:48.441000', '2021-11-15 13:35:48.441000', 'CentOS 7 安装 Nginx', '116.227.60.170', '58', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (381, '2021-11-15 13:38:17.828000', '2021-11-15 13:38:17.828000', 'CentOS 7 防火墙 Firewall 的使用', '116.227.60.170', '53', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (382, '2021-11-15 13:40:51.370000', '2021-11-15 13:40:51.370000', 'Nginx 配置', '116.227.60.170', '50', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (383, '2021-11-15 13:41:37.559000', '2021-11-15 13:41:37.559000', 'Git 修改历史提交的用户名和邮箱', '116.227.60.170', '49', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (384, '2021-11-15 13:43:54.669000', '2021-11-15 13:43:54.669000', 'Docker 安装 RabbitMQ', '116.227.60.170', '47', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (385, '2021-11-15 13:44:57.252000', '2021-11-15 13:44:57.252000', 'CentOS 7 安装 Redis 6.2.6', '116.227.60.170', '46', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (386, '2021-11-15 13:45:13.311000', '2021-11-15 13:45:13.311000', 'Spring Boot 解决跨域', '116.227.60.170', '45', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (387, '2021-11-15 13:45:40.557000', '2021-11-15 13:45:40.557000', 'CentOS 7 安装 RabbitMQ 3.9.8', '116.227.60.170', '48', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (388, '2021-11-15 13:47:22.378000', '2021-11-15 13:47:22.378000', 'SpringBoot 集成 Swagger2 与 Swagger3 的区别', '116.227.60.170', '44', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (389, '2021-11-15 13:48:31.474000', '2021-11-15 13:48:31.474000', 'CentOS 7 安装和配置 Git', '116.227.60.170', '41', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (390, '2021-11-15 13:49:17.805000', '2021-11-15 13:49:17.805000', 'CentOS 7 安装 Kibana 7.14', '116.227.60.170', '33', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (391, '2021-11-15 13:49:31.964000', '2021-11-15 13:49:31.964000', 'CentOS 7 Yum 命令', '116.227.60.170', '34', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (392, '2021-11-15 13:49:47.179000', '2021-11-15 13:49:47.179000', 'CentOS 7 查找 OpenJDK 的安装路径', '116.227.60.170', '35', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (393, '2021-11-15 13:49:59.465000', '2021-11-15 13:49:59.465000', 'Spring Boot 日志', '116.227.60.170', '30', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (394, '2021-11-15 13:50:08.741000', '2021-11-15 13:50:08.741000', 'MySQL DATE_FORMAT() 函数', '116.227.60.170', '27', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (395, '2021-11-15 13:50:23.569000', '2021-11-15 13:50:23.569000', 'CentOS 7 通过 Yum 安装 MySQL 8', '116.227.60.170', '31', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (396, '2021-11-15 13:51:00.366000', '2021-11-15 13:51:00.366000', 'CentOS 7 安装 Elasticsearch 7.14', '116.227.60.170', '32', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (397, '2021-11-15 13:51:37.888000', '2021-11-15 13:51:37.888000', 'Centos 7 卸载自带的 OpenJDK', '116.227.60.170', '36', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (398, '2021-11-15 13:52:16.762000', '2021-11-15 13:52:16.762000', '端口被占用处理', '116.227.60.170', '26', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (399, '2021-11-15 13:52:23.369000', '2021-11-15 13:52:23.369000', '端口被占用处理', '116.227.60.170', '26', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (400, '2021-11-15 13:52:43.865000', '2021-11-15 13:52:43.865000', '端口被占用处理', '116.227.60.170', '26', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (401, '2021-11-15 13:55:03.637000', '2021-11-15 13:55:03.637000', '配置 Gradle 环境', '116.227.60.170', '25', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (402, '2021-11-15 13:55:44.654000', '2021-11-15 13:55:44.654000', '配置 Maven 仓库和 JDK', '116.227.60.170', '24', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (403, '2021-11-15 13:55:56.497000', '2021-11-15 13:55:56.497000', '配置 Maven 环境变量', '116.227.60.170', '23', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (404, '2021-11-15 14:00:27.888000', '2021-11-15 14:00:27.888000', '配置 Java 开发环境', '116.227.60.170', '21', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (405, '2021-11-15 14:00:38.787000', '2021-11-15 14:00:38.787000', 'Git 生成 SSH key', '116.227.60.170', '20', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (406, '2021-11-15 14:00:47.940000', '2021-11-15 14:00:47.940000', 'CentOS 更换 Yum 源', '116.227.60.170', '19', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (407, '2021-11-15 14:01:41.897000', '2021-11-15 14:01:41.897000', 'Spring Bean 的生命周期和作用域详解', '116.227.60.170', '16', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (408, '2021-11-15 14:01:58.014000', '2021-11-15 14:01:58.014000', 'Spring Security 认证原理（UsernamePasswordAuthenticationFilter）', '116.227.60.170', '15', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (409, '2021-11-15 14:02:09.013000', '2021-11-15 14:02:09.013000', 'MySQL 查询表的所有列名', '116.227.60.170', '13', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (410, '2021-11-15 14:02:17.418000', '2021-11-15 14:02:17.418000', 'List 集合去除 null 元素', '116.227.60.170', '12', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (411, '2021-11-15 14:02:28.691000', '2021-11-15 14:02:28.691000', 'CentOS 7 命令行和图形界面的相互切换', '116.227.60.170', '11', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (412, '2021-11-15 14:03:18.918000', '2021-11-15 14:03:18.918000', 'VMware 安装 Centos 7', '116.227.60.170', '9', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (413, '2021-11-15 14:04:00.990000', '2021-11-15 14:04:00.990000', 'VMware 安装 Centos 7', '116.227.60.170', '9', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (414, '2021-11-15 14:04:13.627000', '2021-11-15 14:04:13.627000', ' CentOS 7 安装 Maven', '116.227.60.170', '10', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (415, '2021-11-15 14:04:30.512000', '2021-11-15 14:04:30.512000', 'Spring Security 的执行流程', '116.227.60.170', '14', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (416, '2021-11-15 14:04:40.745000', '2021-11-15 14:04:40.745000', 'Git的基本使用', '116.227.60.170', '6', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (417, '2021-11-15 14:04:56.712000', '2021-11-15 14:04:56.712000', 'Git 的基本使用', '116.227.60.170', '6', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (418, '2021-11-15 14:05:11.384000', '2021-11-15 14:05:11.384000', 'Nginx 服务器 SSL 证书安装部署', '116.227.60.170', '5', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (419, '2021-11-15 14:05:35.525000', '2021-11-15 14:05:35.525000', 'GitHub 搜索技巧', '116.227.60.170', '51', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (420, '2021-11-15 14:13:42.555000', '2021-11-15 14:13:42.555000', ' GitHub加速', '116.227.60.170', '7', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (421, '2021-11-15 14:13:56.531000', '2021-11-15 14:13:56.531000', 'Spring Boot 配置文件', '116.227.60.170', '38', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (422, '2021-11-15 14:37:03.532000', '2021-11-15 14:37:03.532000', 'Node.js 环境配置', '116.227.60.170', '40', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (423, '2021-11-15 14:37:55.282000', '2021-11-15 14:37:55.282000', 'Babel', '116.227.60.170', '42', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (424, '2021-11-15 14:38:45.412000', '2021-11-15 14:38:45.412000', 'webpack', '116.227.60.170', '43', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (425, '2021-11-15 14:39:56.605000', '2021-11-15 14:39:56.605000', 'ES 6 新特性', '116.227.60.170', '39', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (426, '2021-11-15 14:40:18.781000', '2021-11-15 14:40:18.781000', 'CentOS 7 设置静态IP', '116.227.60.170', '18', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (427, '2021-11-15 14:41:00.693000', '2021-11-15 14:41:00.693000', ' Git 的工作流程', '116.227.60.170', '8', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (428, '2021-11-15 14:42:06.121000', '2021-11-15 14:42:06.121000', '物理分页与逻辑分页（内存分页）', '116.227.60.170', '17', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (429, '2021-11-15 14:44:23.628000', '2021-11-15 14:44:23.628000', 'Docker 命令集合', '116.227.60.170', '52', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (430, '2021-11-15 14:46:41.385000', '2021-11-15 14:46:41.385000', 'VMware 安装 CentOS 7', '116.227.60.170', '9', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (431, '2021-11-15 14:46:59.199000', '2021-11-15 14:46:59.199000', 'VMware 安装 CentOS 7', '116.227.60.170', '9', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (432, '2021-11-15 14:47:42.064000', '2021-11-15 14:47:42.064000', 'CentOS 7 卸载自带的 OpenJDK', '116.227.60.170', '36', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (433, '2021-11-15 15:47:15.990000', '2021-11-15 15:47:15.990000', 'Spring Security 配置', '116.227.60.170', '59', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (434, '2021-11-16 16:00:19.784000', '2021-11-16 16:00:19.784000', 'YVKG', '116.227.60.170', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (435, '2021-11-17 16:12:36.302000', '2021-11-17 16:12:36.302000', 'YVKG', '116.227.60.170', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (436, '2021-11-17 19:04:38.297000', '2021-11-17 19:04:38.297000', 'CentOS 7 安装和配置 Git', '116.227.60.170', '41', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (437, '2021-11-19 10:44:06.916000', '2021-11-19 10:44:06.916000', 'YVKG', '116.227.60.170', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (438, '2021-11-21 19:33:37.265000', '2021-11-21 19:33:37.265000', 'YVKG', '101.88.247.22', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (439, '2021-11-21 19:34:09.320000', '2021-11-21 19:34:09.320000', ' List 去除重复数据', '101.88.247.22', '60', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (440, '2021-11-22 19:40:37.441000', '2021-11-22 19:40:37.441000', 'YVKG', '116.227.60.170', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (441, '2021-11-23 18:26:08.792000', '2021-11-23 18:26:08.792000', 'YVKG', '116.227.60.170', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (442, '2021-11-23 18:26:46.318000', '2021-11-23 18:26:46.318000', 'Docker 安装 Jenkins', '116.227.60.170', '61', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (443, '2021-11-23 18:27:23.476000', '2021-11-23 18:27:23.476000', ' List 去除重复数据', '116.227.60.170', '60', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (444, '2021-11-23 18:27:29.043000', '2021-11-23 18:27:29.043000', ' List 去除重复数据', '116.227.60.170', '60', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (445, '2021-11-23 18:27:37.889000', '2021-11-23 18:27:37.889000', 'Spring Security 配置', '116.227.60.170', '59', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (446, '2021-11-23 18:27:52.109000', '2021-11-23 18:27:52.109000', 'CentOS 7 安装 Nginx', '116.227.60.170', '58', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (447, '2021-11-23 18:28:05.381000', '2021-11-23 18:28:05.381000', 'CentOS 7 防火墙 Firewall 的使用', '116.227.60.170', '53', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (448, '2021-11-23 18:28:17.870000', '2021-11-23 18:28:17.870000', 'Docker 命令集合', '116.227.60.170', '52', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (449, '2021-11-23 18:28:27.828000', '2021-11-23 18:28:27.828000', 'GitHub 搜索技巧', '116.227.60.170', '51', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (450, '2021-11-23 18:28:49.916000', '2021-11-23 18:28:49.916000', 'CentOS 7 安装 RabbitMQ 3.9.8', '116.227.60.170', '48', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (451, '2021-11-23 18:28:54.691000', '2021-11-23 18:28:54.691000', 'Git 修改历史提交的用户名和邮箱', '116.227.60.170', '49', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (452, '2021-11-23 18:28:59.919000', '2021-11-23 18:28:59.919000', 'Nginx 配置', '116.227.60.170', '50', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (453, '2021-11-23 18:29:14.824000', '2021-11-23 18:29:14.824000', 'Nginx 服务器 SSL 证书安装部署', '116.227.60.170', '5', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (454, '2021-11-23 18:29:19.036000', '2021-11-23 18:29:19.036000', 'Git 的基本使用', '116.227.60.170', '6', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (455, '2021-11-23 18:29:25.050000', '2021-11-23 18:29:25.050000', ' Git 的工作流程', '116.227.60.170', '8', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (456, '2021-11-23 18:29:36.600000', '2021-11-23 18:29:36.600000', ' GitHub加速', '116.227.60.170', '7', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (457, '2021-11-23 18:30:06.169000', '2021-11-23 18:30:06.169000', ' CentOS 7 安装 Maven', '116.227.60.170', '10', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (458, '2021-11-23 18:30:16.250000', '2021-11-23 18:30:16.250000', 'CentOS 7 命令行和图形界面的相互切换', '116.227.60.170', '11', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (459, '2021-11-23 18:30:25.126000', '2021-11-23 18:30:25.126000', 'VMware 安装 CentOS 7', '116.227.60.170', '9', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (460, '2021-11-23 18:30:32.457000', '2021-11-23 18:30:32.457000', 'webpack', '116.227.60.170', '43', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (461, '2021-11-23 18:30:37.481000', '2021-11-23 18:30:37.481000', 'Babel', '116.227.60.170', '42', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (462, '2021-11-24 18:30:20.251000', '2021-11-24 18:30:20.251000', 'YVKG', '116.227.60.170', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (463, '2021-11-24 21:25:59.676000', '2021-11-24 21:25:59.676000', 'YVKG', '101.88.247.22', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (464, '2021-11-25 14:36:42.306000', '2021-11-25 14:36:42.306000', 'YVKG', '116.227.60.170', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (465, '2021-11-25 15:29:38.132000', '2021-11-25 15:29:38.132000', 'ES 6 新特性', '116.227.60.170', '39', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (466, '2021-11-25 15:29:55.246000', '2021-11-25 15:29:55.246000', 'Docker 安装 RabbitMQ', '116.227.60.170', '47', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (467, '2021-11-25 15:30:05.233000', '2021-11-25 15:30:05.233000', 'SpringBoot 集成 Swagger2 与 Swagger3 的区别', '116.227.60.170', '44', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (468, '2021-11-25 15:30:14.656000', '2021-11-25 15:30:14.656000', 'Spring Boot 解决跨域', '116.227.60.170', '45', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (469, '2021-11-25 15:30:26.776000', '2021-11-25 15:30:26.776000', 'CentOS 7 安装 Redis 6.2.6', '116.227.60.170', '46', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (470, '2021-11-25 15:30:37.013000', '2021-11-25 15:30:37.013000', 'CentOS 7 安装和配置 Git', '116.227.60.170', '41', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (471, '2021-11-25 15:31:24.574000', '2021-11-25 15:31:24.574000', 'Spring Boot 日志', '116.227.60.170', '30', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (472, '2021-11-25 15:31:40.423000', '2021-11-25 15:31:40.423000', 'Node.js 环境配置', '116.227.60.170', '40', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (473, '2021-11-25 15:31:46.888000', '2021-11-25 15:31:46.888000', 'Node.js 环境配置', '116.227.60.170', '40', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (474, '2021-11-25 15:31:54.699000', '2021-11-25 15:31:54.699000', 'CentOS 7 Yum 命令', '116.227.60.170', '34', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (475, '2021-11-25 15:32:01.104000', '2021-11-25 15:32:01.104000', 'CentOS 7 安装 Elasticsearch 7.14', '116.227.60.170', '32', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (476, '2021-11-25 15:32:08.259000', '2021-11-25 15:32:08.259000', 'CentOS 7 通过 Yum 安装 MySQL 8', '116.227.60.170', '31', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (477, '2021-11-25 15:32:14.753000', '2021-11-25 15:32:14.753000', 'CentOS 7 卸载自带的 OpenJDK', '116.227.60.170', '36', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (478, '2021-11-25 15:32:21.476000', '2021-11-25 15:32:21.476000', 'Spring Boot 配置文件', '116.227.60.170', '38', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (479, '2021-11-25 15:32:28.186000', '2021-11-25 15:32:28.186000', 'CentOS 7 查找 OpenJDK 的安装路径', '116.227.60.170', '35', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (480, '2021-11-25 15:32:36.046000', '2021-11-25 15:32:36.046000', 'CentOS 7 安装 Kibana 7.14', '116.227.60.170', '33', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (481, '2021-11-25 15:32:43.719000', '2021-11-25 15:32:43.719000', 'MySQL DATE_FORMAT() 函数', '116.227.60.170', '27', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (482, '2021-11-25 15:32:50.367000', '2021-11-25 15:32:50.367000', '端口被占用处理', '116.227.60.170', '26', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (483, '2021-11-25 15:32:58.561000', '2021-11-25 15:32:58.561000', '配置 Gradle 环境', '116.227.60.170', '25', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (484, '2021-11-25 15:33:23.448000', '2021-11-25 15:33:23.448000', '配置 Gradle 环境', '116.227.60.170', '25', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (485, '2021-11-25 15:33:45.940000', '2021-11-25 15:33:45.940000', '配置 Maven 仓库和 JDK', '116.227.60.170', '24', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (486, '2021-11-25 15:33:57.556000', '2021-11-25 15:33:57.556000', '配置 Java 开发环境', '116.227.60.170', '21', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (487, '2021-11-25 15:34:06.127000', '2021-11-25 15:34:06.127000', 'Spring Bean 的生命周期和作用域详解', '116.227.60.170', '16', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (488, '2021-11-25 15:34:16.135000', '2021-11-25 15:34:16.135000', 'Spring Security 认证原理（UsernamePasswordAuthenticationFilter）', '116.227.60.170', '15', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (489, '2021-11-25 15:34:33.729000', '2021-11-25 15:34:33.729000', '配置 Maven 环境变量', '116.227.60.170', '23', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (490, '2021-11-25 15:34:40.361000', '2021-11-25 15:34:40.361000', 'Git 生成 SSH key', '116.227.60.170', '20', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (491, '2021-11-25 15:34:47.608000', '2021-11-25 15:34:47.608000', 'CentOS 更换 Yum 源', '116.227.60.170', '19', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (492, '2021-11-25 15:34:55.001000', '2021-11-25 15:34:55.001000', '物理分页与逻辑分页（内存分页）', '116.227.60.170', '17', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (493, '2021-11-25 15:35:04.025000', '2021-11-25 15:35:04.025000', 'CentOS 7 设置静态IP', '116.227.60.170', '18', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (494, '2021-11-25 15:35:11.177000', '2021-11-25 15:35:11.177000', 'List 集合去除 null 元素', '116.227.60.170', '12', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (495, '2021-11-25 15:35:19.657000', '2021-11-25 15:35:19.657000', 'MySQL 查询表的所有列名', '116.227.60.170', '13', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (496, '2021-11-25 15:35:29.889000', '2021-11-25 15:35:29.889000', 'Spring Security 的执行流程', '116.227.60.170', '14', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (497, '2021-11-27 23:26:48.703000', '2021-11-27 23:26:48.703000', 'YVKG', '101.88.247.22', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (498, '2021-11-27 23:27:28.417000', '2021-11-27 23:27:28.417000', '使用 VuePress 搭建在线文档网站', '101.88.247.22', '62', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (499, '2021-11-29 10:05:17.935000', '2021-11-29 10:05:17.935000', 'YVKG', '116.227.60.170', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (500, '2021-11-29 10:16:07.467000', '2021-11-29 10:16:07.467000', 'YVKG', '116.227.60.170', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (501, '2021-11-30 15:32:43.646000', '2021-11-30 15:32:43.646000', 'YVKG', '116.227.60.170', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (502, '2021-11-30 15:33:07.743000', '2021-11-30 15:33:07.743000', 'Node.js 环境配置', '116.227.60.170', '40', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (503, '2021-12-14 18:19:18.835000', '2021-12-14 18:19:18.835000', 'Monday_1201', '116.227.60.170', 'Monday_1201', 35);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (504, '2021-12-14 18:19:24.158000', '2021-12-14 18:19:24.158000', 'YVKG', '116.227.60.170', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (505, '2021-12-16 14:51:57.961000', '2021-12-16 14:51:57.961000', 'YVKG', '180.171.90.42', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (506, '2021-12-27 10:19:01.057000', '2021-12-27 10:19:01.057000', 'YVKG', '116.227.58.110', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (507, '2021-12-27 11:29:16.357000', '2021-12-27 11:29:16.357000', 'YVKG', '127.0.0.1', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (508, '2021-12-29 14:53:00.202000', '2021-12-29 14:53:00.202000', 'YVKG', '116.227.58.110', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (509, '2021-12-29 14:53:21.513000', '2021-12-29 14:53:21.513000', 'Maven 自定义 Archetype', '116.227.58.110', '63', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (510, '2021-12-29 14:56:02.620000', '2021-12-29 14:56:02.620000', 'Maven 自定义 Archetype', '116.227.58.110', '63', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (511, '2021-12-29 17:42:06.643000', '2021-12-29 17:42:06.643000', 'Java 泛型', '116.227.58.110', '64', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (512, '2021-12-29 17:43:21.382000', '2021-12-29 17:43:21.382000', 'Java 泛型', '116.227.58.110', '64', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (513, '2021-12-29 17:53:30.732000', '2021-12-29 17:53:30.732000', 'Java 泛型', '116.227.58.110', '64', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (514, '2021-12-30 17:10:00.561000', '2021-12-30 17:10:00.561000', 'YVKG', '127.0.0.1', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (515, '2021-12-31 11:09:16.773000', '2021-12-31 11:09:16.773000', 'YVKG', '116.227.58.110', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (516, '2022-01-04 10:13:41.439000', '2022-01-04 10:13:41.439000', 'YVKG', '116.227.58.110', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (517, '2022-01-04 10:13:55.312000', '2022-01-04 10:13:55.312000', ' GitHub 加速', '116.227.58.110', '7', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (518, '2022-01-05 00:29:16.744000', '2022-01-05 00:29:16.744000', 'YVKG', '101.88.100.12', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (519, '2022-01-06 16:53:00.507000', '2022-01-06 16:53:00.507000', 'Spring Boot 整合 MybatisPlus', '116.227.58.110', '65', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (520, '2022-01-07 10:09:29.766000', '2022-01-07 10:09:29.766000', 'Spring Boot 整合 MybatisPlus', '116.227.58.110', '65', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (521, '2022-01-07 11:41:30.367000', '2022-01-07 11:41:30.367000', 'YVKG', '116.227.58.110', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (522, '2022-01-07 13:13:01.037000', '2022-01-07 13:13:01.037000', 'YVKG', '116.227.58.110', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (523, '2022-01-07 16:19:18.528000', '2022-01-07 16:19:18.528000', 'Nacos 启动失败', '116.227.58.110', '66', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (524, '2022-01-07 16:31:43.337000', '2022-01-07 16:31:43.337000', 'Nacos 启动失败', '116.227.58.110', '66', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (525, '2022-01-07 16:41:15.334000', '2022-01-07 16:41:15.334000', 'Nacos 启动失败', '116.227.58.110', '66', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (526, '2022-01-07 16:42:27.454000', '2022-01-07 16:42:27.454000', 'Nacos 启动失败', '116.227.58.110', '66', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (527, '2022-01-10 10:25:22.557000', '2022-01-10 10:25:22.557000', 'YVKG', '180.171.84.128', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (528, '2022-01-21 23:38:21.511000', '2022-01-21 23:38:21.511000', 'YVKG', '101.88.247.77', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (529, '2022-01-22 16:53:57.101000', '2022-01-22 16:53:57.101000', 'YVKG', '101.88.247.77', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (530, '2022-01-24 19:04:56.984000', '2022-01-24 19:04:56.984000', 'Monday_1201', '127.0.0.1', 'Monday_1201', 35);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (531, '2022-01-24 19:05:03.742000', '2022-01-24 19:05:03.742000', 'YVKG', '127.0.0.1', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (532, '2022-01-24 19:24:01.506000', '2022-01-24 19:24:01.506000', 'YVKG', '127.0.0.1', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (533, '2022-01-28 14:16:39.900000', '2022-01-28 14:16:39.900000', 'YVKG', '180.171.84.128', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (534, '2022-01-30 10:10:26.583000', '2022-01-30 10:10:26.583000', 'YVKG', '220.196.60.70', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (535, '2022-02-04 22:00:33.269000', '2022-02-04 22:00:33.269000', 'Monday_1201', '223.90.41.212', 'Monday_1201', 35);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (536, '2022-02-04 22:00:38.577000', '2022-02-04 22:00:38.577000', 'YVKG', '223.90.41.212', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (537, '2022-02-08 14:01:01.897000', '2022-02-08 14:01:01.897000', 'YVKG', '180.171.84.128', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (538, '2022-02-08 14:04:55.454000', '2022-02-08 14:04:55.454000', 'Spring Security 配置', '180.171.84.128', '59', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (539, '2022-02-08 14:08:40.806000', '2022-02-08 14:08:40.806000', 'Spring Security 配置', '180.171.84.128', '59', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (540, '2022-02-08 17:40:45.571000', '2022-02-08 17:40:45.571000', 'SpringBoot 事件监听', '180.171.84.128', '67', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (541, '2022-02-08 17:43:02.328000', '2022-02-08 17:43:02.328000', 'SpringBoot 事件监听', '180.171.84.128', '67', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (542, '2022-02-08 17:45:11.695000', '2022-02-08 17:45:11.695000', 'SpringBoot 事件监听', '180.171.84.128', '67', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (543, '2022-02-10 14:15:48.366000', '2022-02-10 14:15:48.366000', 'YVKG', '180.171.84.128', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (544, '2022-02-10 14:16:12.557000', '2022-02-10 14:16:12.557000', '使用 VuePress 搭建在线文档网站', '180.171.84.128', '62', 20);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (545, '2022-02-14 18:23:53.641000', '2022-02-14 18:23:53.641000', 'YVKG', '180.171.84.128', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (546, '2022-02-14 18:24:18.588000', '2022-02-14 18:24:18.588000', '遍历集合的方法总结', '180.171.84.128', '68', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (547, '2022-02-15 10:47:37.641000', '2022-02-15 10:47:37.641000', 'SpringBoot 事件监听', '180.171.84.128', '67', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (548, '2022-02-15 10:49:06.332000', '2022-02-15 10:49:06.332000', 'SpringBoot 事件监听', '180.171.84.128', '67', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (549, '2022-02-15 10:50:11.631000', '2022-02-15 10:50:11.631000', 'Java 泛型', '180.171.84.128', '64', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (550, '2022-02-15 10:51:59.602000', '2022-02-15 10:51:59.602000', 'SpringBoot 事件监听', '180.171.84.128', '67', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (551, '2022-02-21 15:20:45.990000', '2022-02-21 15:20:45.990000', 'YVKG', '180.171.84.128', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (552, '2022-02-21 15:21:33.362000', '2022-02-21 15:21:33.362000', '属性拷贝工具存在的问题', '180.171.84.128', '69', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (553, '2022-02-21 15:22:18.282000', '2022-02-21 15:22:18.282000', '属性拷贝工具存在的问题', '180.171.84.128', '69', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (554, '2022-02-21 15:59:31.066000', '2022-02-21 15:59:31.066000', '属性拷贝工具存在的问题', '180.171.84.128', '69', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (555, '2022-03-02 21:45:25.601000', '2022-03-02 21:45:25.601000', 'YVKG', '101.88.213.213', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (556, '2022-03-02 21:45:38.534000', '2022-03-02 21:45:38.534000', '遍历集合的方法总结', '101.88.213.213', '68', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (557, '2022-03-04 10:37:36.912000', '2022-03-04 10:37:36.912000', 'YVKG', '180.171.84.128', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (558, '2022-03-06 02:20:19.133000', '2022-03-06 02:20:19.133000', 'YVKG', '101.88.213.213', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (559, '2022-03-06 18:18:01.299000', '2022-03-06 18:18:01.299000', 'YVKG', '101.88.213.213', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (560, '2022-03-06 18:24:23.665000', '2022-03-06 18:24:23.665000', 'Spring Boot 整合 MybatisPlus', '101.88.213.213', '65', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (561, '2022-03-06 18:37:01.350000', '2022-03-06 18:37:01.350000', 'Nacos 启动失败', '101.88.213.213', '66', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (562, '2022-03-06 18:37:24.061000', '2022-03-06 18:37:24.061000', '属性拷贝工具存在的问题', '101.88.213.213', '69', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (563, '2022-03-06 18:42:39.809000', '2022-03-06 18:42:39.809000', 'Node.js 环境配置', '101.88.213.213', '40', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (564, '2022-03-06 18:48:53.815000', '2022-03-06 18:48:53.815000', 'CentOS 7 端口被占用处理', '101.88.213.213', '26', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (565, '2022-03-06 18:49:30.478000', '2022-03-06 18:49:30.478000', 'Windows 端口被占用处理', '101.88.213.213', '70', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (566, '2022-03-06 18:54:12.796000', '2022-03-06 18:54:12.796000', '属性拷贝工具存在的问题', '101.88.213.213', '69', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (567, '2022-03-06 18:54:43.657000', '2022-03-06 18:54:43.657000', 'Windows 端口被占用处理', '101.88.213.213', '28', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (568, '2022-03-06 19:40:40.803000', '2022-03-06 19:40:40.803000', 'Spring Security 配置', '101.88.213.213', '59', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (569, '2022-03-06 21:19:32.028000', '2022-03-06 21:19:32.028000', 'Docker 的使用', '101.88.213.213', '71', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (570, '2022-03-06 21:20:32.763000', '2022-03-06 21:20:32.763000', 'Docker 的使用', '101.88.213.213', '71', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (571, '2022-03-06 21:20:50.314000', '2022-03-06 21:20:50.314000', 'Docker 的使用', '101.88.213.213', '71', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (572, '2022-03-06 21:20:57.583000', '2022-03-06 21:20:57.583000', 'Spring Security 配置', '101.88.213.213', '59', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (573, '2022-03-06 21:41:56.588000', '2022-03-06 21:41:56.588000', 'Docker 的使用', '101.88.213.213', '71', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (574, '2022-03-06 21:42:59.922000', '2022-03-06 21:42:59.922000', 'Docker 的使用', '101.88.213.213', '71', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (575, '2022-03-07 11:01:17.275000', '2022-03-07 11:01:17.275000', 'Docker 的使用', '180.171.84.128', '71', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (576, '2022-03-07 13:31:32.246000', '2022-03-07 13:31:32.246000', 'YVKG', '180.171.84.128', 'Monday_1201', 30);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (577, '2022-03-07 20:02:16.935000', '2022-03-07 20:02:16.935000', 'YVKG', '101.88.213.213', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (578, '2022-03-07 20:02:27.545000', '2022-03-07 20:02:27.545000', 'Docker 的使用', '101.88.213.213', '71', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (579, '2022-03-07 20:04:03.467000', '2022-03-07 20:04:03.467000', 'Docker 的使用', '101.88.213.213', '71', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (580, '2022-03-07 20:05:57.022000', '2022-03-07 20:05:57.022000', 'Docker 的使用', '101.88.213.213', '71', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (581, '2022-03-07 21:21:16.308000', '2022-03-07 21:21:16.308000', 'Docker 的使用', '101.88.213.213', '71', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (582, '2022-03-07 21:25:26.896000', '2022-03-07 21:25:26.896000', 'Docker 的使用', '101.88.213.213', '71', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (583, '2022-03-07 21:28:12.086000', '2022-03-07 21:28:12.086000', 'Docker 的使用', '101.88.213.213', '71', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (584, '2022-03-07 21:30:08.228000', '2022-03-07 21:30:08.228000', 'Docker 的使用', '101.88.213.213', '71', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (585, '2022-03-07 21:31:04.540000', '2022-03-07 21:31:04.540000', 'Docker 的使用', '101.88.213.213', '71', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (586, '2022-03-07 21:31:46.330000', '2022-03-07 21:31:46.330000', 'Docker 的使用', '101.88.213.213', '71', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (587, '2022-03-08 14:25:28.603000', '2022-03-08 14:25:28.603000', 'YVKG', '180.171.84.128', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (588, '2022-03-08 14:43:35.300000', '2022-03-08 14:43:35.300000', 'Docker 的使用', '180.171.84.128', '71', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (589, '2022-03-08 14:44:28.397000', '2022-03-08 14:44:28.397000', 'Docker 的使用', '180.171.84.128', '71', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (590, '2022-03-08 14:47:12.323000', '2022-03-08 14:47:12.323000', 'Docker 的使用', '180.171.84.128', '71', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (591, '2022-03-08 20:23:17.809000', '2022-03-08 20:23:17.809000', 'YVKG', '101.88.213.213', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (592, '2022-03-08 20:24:07.802000', '2022-03-08 20:24:07.802000', 'Docker 的使用', '101.88.213.213', '71', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (593, '2022-03-08 20:24:48.729000', '2022-03-08 20:24:48.729000', 'Dockerfile', '101.88.213.213', '72', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (594, '2022-03-09 10:37:42.093000', '2022-03-09 10:37:42.093000', 'YVKG', '180.171.84.128', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (595, '2022-03-09 10:39:41.915000', '2022-03-09 10:39:41.915000', 'Docker 的使用', '180.171.84.128', '71', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (596, '2022-03-09 23:46:50.745000', '2022-03-09 23:46:50.745000', 'YVKG', '101.88.213.213', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (597, '2022-03-09 23:50:14.512000', '2022-03-09 23:50:14.512000', 'YVKG', '101.88.213.213', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (598, '2022-03-10 10:46:00.297000', '2022-03-10 10:46:00.297000', 'YVKG', '180.171.84.128', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (599, '2022-03-10 10:46:28.643000', '2022-03-10 10:46:28.643000', 'CentOS 7 设置静态IP', '180.171.84.128', '18', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (600, '2022-03-10 10:50:37.586000', '2022-03-10 10:50:37.586000', 'CentOS 7 安装 Nginx', '180.171.84.128', '58', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (601, '2022-03-12 15:55:53.200000', '2022-03-12 15:55:53.200000', 'YVKG', '101.88.213.213', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (602, '2022-03-12 15:57:48.155000', '2022-03-12 15:57:48.155000', 'Calf 项目部署', '101.88.213.213', '73', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (603, '2022-03-12 17:07:27.037000', '2022-03-12 17:07:27.037000', 'frp 实现内网穿透', '101.88.213.213', '74', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (604, '2022-03-12 17:08:32.441000', '2022-03-12 17:08:32.441000', 'frp 实现内网穿透', '101.88.213.213', '74', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (605, '2022-03-12 17:10:05.758000', '2022-03-12 17:10:05.758000', 'frp 实现内网穿透', '101.88.213.213', '74', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (606, '2022-03-12 22:46:19.780000', '2022-03-12 22:46:19.780000', 'Calf 项目部署', '101.88.213.213', '73', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (607, '2022-03-12 22:47:04.153000', '2022-03-12 22:47:04.153000', 'Docker Compose', '101.88.213.213', '75', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (608, '2022-03-12 22:48:42.099000', '2022-03-12 22:48:42.099000', 'Docker 的使用', '101.88.213.213', '71', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (609, '2022-03-12 22:49:41.624000', '2022-03-12 22:49:41.624000', 'Docker 的使用', '101.88.213.213', '71', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (610, '2022-03-12 22:50:14.666000', '2022-03-12 22:50:14.666000', 'Docker 的使用', '101.88.213.213', '71', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (611, '2022-03-12 22:51:53.388000', '2022-03-12 22:51:53.388000', 'CentOS 7 安装和配置 Docker', '101.88.213.213', '76', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (612, '2022-03-12 22:52:03.887000', '2022-03-12 22:52:03.887000', 'CentOS 7 安装和配置 Docker', '101.88.213.213', '76', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (613, '2022-03-12 22:52:07.236000', '2022-03-12 22:52:07.236000', 'CentOS 7 安装和配置 Docker', '101.88.213.213', '76', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (614, '2022-03-12 23:01:49.787000', '2022-03-12 23:01:49.787000', 'Docker 架构概念', '101.88.213.213', '77', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (615, '2022-03-12 23:02:20.200000', '2022-03-12 23:02:20.200000', 'CentOS 7 安装 Nginx', '101.88.213.213', '58', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (616, '2022-03-13 13:55:09.447000', '2022-03-13 13:55:09.447000', 'Docker 架构概念', '101.88.213.213', '77', 20);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (617, '2022-03-13 13:55:44.379000', '2022-03-13 13:55:44.379000', 'Dockerfile', '101.88.213.213', '72', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (618, '2022-03-13 13:56:26.982000', '2022-03-13 13:56:26.982000', 'Docker 的使用', '101.88.213.213', '71', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (619, '2022-03-13 13:56:38.911000', '2022-03-13 13:56:38.911000', 'Dockerfile', '101.88.213.213', '72', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (620, '2022-03-13 13:59:48.240000', '2022-03-13 13:59:48.240000', 'Dockerfile', '101.88.213.213', '72', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (621, '2022-03-13 14:51:21.688000', '2022-03-13 14:51:21.688000', 'YVKG', '101.88.213.213', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (622, '2022-03-15 15:32:15.519000', '2022-03-15 15:32:15.519000', 'YVKG', '180.171.84.128', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (623, '2022-03-15 15:32:39.706000', '2022-03-15 15:32:39.706000', 'Spring Cloud Gateway 的使用', '180.171.84.128', '78', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (624, '2022-03-15 15:34:34.143000', '2022-03-15 15:34:34.143000', 'Spring Cloud Gateway 的使用', '180.171.84.128', '78', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (625, '2022-03-15 18:24:30.072000', '2022-03-15 18:24:30.072000', 'Docker Compose', '180.171.84.128', '75', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (626, '2022-03-16 14:17:15.794000', '2022-03-16 14:17:15.794000', 'YVKG', '180.171.84.128', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (627, '2022-03-16 14:23:48.348000', '2022-03-16 14:23:48.348000', 'Spring Cloud Gateway 的基础使用', '180.171.84.128', '78', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (628, '2022-03-16 14:45:12.836000', '2022-03-16 14:45:12.836000', 'Spring Cloud Gateway 实现限流', '180.171.84.128', '79', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (629, '2022-03-16 14:46:35.245000', '2022-03-16 14:46:35.245000', 'Spring Cloud Gateway 实现限流', '180.171.84.128', '79', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (630, '2022-03-16 14:55:26.237000', '2022-03-16 14:55:26.237000', 'Spring Cloud Gateway 实现熔断降级', '180.171.84.128', '80', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (631, '2022-03-16 15:01:11.555000', '2022-03-16 15:01:11.555000', 'Spring Cloud Gateway 实现熔断降级', '180.171.84.128', '80', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (632, '2022-03-16 15:01:44.763000', '2022-03-16 15:01:44.763000', 'Spring Cloud Gateway 实现熔断降级', '180.171.84.128', '80', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (633, '2022-03-16 15:04:06.749000', '2022-03-16 15:04:06.749000', 'Spring Cloud Gateway 实现限流', '180.171.84.128', '79', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (634, '2022-03-17 20:51:36.452000', '2022-03-17 20:51:36.452000', 'YVKG', '101.88.213.213', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (635, '2022-03-17 20:53:25.537000', '2022-03-17 20:53:25.537000', 'Nacos-注册中心', '101.88.213.213', '81', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (636, '2022-03-17 21:07:49.773000', '2022-03-17 21:07:49.773000', 'Nacos-注册中心', '101.88.213.213', '81', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (637, '2022-03-17 22:43:47.670000', '2022-03-17 22:43:47.670000', 'Spring Cloud Alibaba Nacos-作为配置中心', '101.88.213.213', '82', 5);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (638, '2022-03-17 22:44:13.884000', '2022-03-17 22:44:13.884000', 'Spring Cloud Alibaba Nacos-注册中心', '101.88.213.213', '81', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (639, '2022-03-17 22:44:38.491000', '2022-03-17 22:44:38.491000', 'Spring Cloud Alibaba Nacos-配置中心', '101.88.213.213', '82', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (640, '2022-03-18 00:15:12.263000', '2022-03-18 00:15:12.263000', 'Spring Cloud Alibaba Nacos-配置中心', '101.88.213.213', '82', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (641, '2022-03-18 00:15:33.710000', '2022-03-18 00:15:33.710000', 'Spring Cloud Alibaba Nacos-注册中心', '101.88.213.213', '81', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (642, '2022-03-18 11:29:35.952000', '2022-03-18 11:29:35.952000', 'Spring Cloud Alibaba Nacos-注册中心', '180.171.84.128', '81', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (643, '2022-03-18 11:30:56.180000', '2022-03-18 11:30:56.180000', 'Spring Cloud Alibaba Nacos-配置中心', '180.171.84.128', '82', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (644, '2022-03-19 16:54:34.691000', '2022-03-19 16:54:34.691000', 'YVKG', '127.0.0.1', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (645, '2022-03-19 16:57:42.629000', '2022-03-19 16:57:42.629000', 'YVKG', '127.0.0.1', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (646, '2022-03-20 00:12:02.808000', '2022-03-20 00:12:02.808000', 'YVKG', '127.0.0.1', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (647, '2022-03-20 00:45:28.859000', '2022-03-20 00:45:28.859000', 'YVKG', '0:0:0:0:0:0:0:1', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (648, '2022-03-21 21:33:29.937000', '2022-03-21 21:33:29.937000', 'YVKG', '127.0.0.1', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (649, '2022-03-21 22:22:46.817000', '2022-03-21 22:22:46.817000', 'YVKG', '127.0.0.1', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (650, '2022-03-21 22:29:49.055000', '2022-03-21 22:29:49.055000', 'Monday_1201', '127.0.0.1', 'Monday_1201', 35);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (651, '2022-03-21 22:29:54.445000', '2022-03-21 22:29:54.445000', 'YVKG', '127.0.0.1', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (652, '2022-03-22 10:50:02.178000', '2022-03-22 10:50:02.178000', 'Monday_1201', '127.0.0.1', 'Monday_1201', 35);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (653, '2022-03-22 10:50:08.039000', '2022-03-22 10:50:08.039000', 'YVKG', '127.0.0.1', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (654, '2022-03-22 15:05:17.714000', '2022-03-22 15:05:17.714000', 'YVKG', '127.0.0.1', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (655, '2022-03-24 10:31:21.599000', '2022-03-24 10:31:21.599000', 'YVKG', '0:0:0:0:0:0:0:1', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (656, '2022-03-24 10:45:14.728000', '2022-03-24 10:45:14.728000', 'YVKG', '127.0.0.1', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (657, '2022-03-24 11:09:07.845000', '2022-03-24 11:09:07.845000', 'YVKG', '0:0:0:0:0:0:0:1', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (658, '2022-03-24 11:10:26.707000', '2022-03-24 11:10:26.707000', 'YVKG', '0:0:0:0:0:0:0:1', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (659, '2022-03-24 11:10:57.711000', '2022-03-24 11:10:57.711000', 'YVKG', '127.0.0.1', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (660, '2022-03-24 11:11:12.627000', '2022-03-24 11:11:12.627000', 'YVKG', '0:0:0:0:0:0:0:1', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (661, '2022-03-24 11:12:44.258000', '2022-03-24 11:12:44.258000', 'YVKG', '0:0:0:0:0:0:0:1', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (662, '2022-03-24 11:34:35.662000', '2022-03-24 11:34:35.662000', 'YVKG', '0:0:0:0:0:0:0:1', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (663, '2022-03-24 13:37:40.164000', '2022-03-24 13:37:40.164000', 'YVKG', '0:0:0:0:0:0:0:1', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (664, '2022-03-24 13:45:39.415000', '2022-03-24 13:45:39.415000', 'YVKG', '0:0:0:0:0:0:0:1', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (665, '2022-03-24 13:57:30.332000', '2022-03-24 13:57:30.332000', 'Spring Cloud Alibaba Nacos-注册中心', '0:0:0:0:0:0:0:1', '81', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (666, '2022-03-24 13:57:33.278000', '2022-03-24 13:57:33.278000', 'Spring Cloud Alibaba Nacos-注册中心', '0:0:0:0:0:0:0:1', '81', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (667, '2022-03-24 13:57:44.813000', '2022-03-24 13:57:44.813000', 'Spring Cloud Alibaba Nacos-配置中心', '0:0:0:0:0:0:0:1', '82', 15);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (668, '2022-03-24 14:19:31.532000', '2022-03-24 14:19:31.532000', 'YVKG', '0:0:0:0:0:0:0:1', 'Monday_1201', 30);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (669, '2022-03-24 14:21:12.370000', '2022-03-24 14:21:12.370000', 'YVKG', '0:0:0:0:0:0:0:1', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (670, '2022-03-24 14:22:48.654000', '2022-03-24 14:22:48.654000', 'YVKG', '0:0:0:0:0:0:0:1', 'Monday_1201', 30);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (671, '2022-03-24 14:22:52.606000', '2022-03-24 14:22:52.606000', 'sss', '0:0:0:0:0:0:0:1', 'sss', 35);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (672, '2022-03-24 14:23:07.039000', '2022-03-24 14:23:07.039000', 'YVKG', '0:0:0:0:0:0:0:1', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (673, '2022-03-24 14:23:37.171000', '2022-03-24 14:23:37.171000', 'YVKG', '0:0:0:0:0:0:0:1', 'Monday_1201', 30);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (674, '2022-03-24 14:27:00.184000', '2022-03-24 14:27:00.184000', 'YVKG', '0:0:0:0:0:0:0:1', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (675, '2022-03-24 14:55:08.108000', '2022-03-24 14:55:08.108000', 'YVKG', '0:0:0:0:0:0:0:1', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (676, '2022-03-24 20:45:05.306000', '2022-03-24 20:45:05.306000', 'YVKG', '0:0:0:0:0:0:0:1', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (677, '2022-03-25 13:37:09.859000', '2022-03-25 13:37:09.859000', 'YVKG', '0:0:0:0:0:0:0:1', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (678, '2022-03-29 19:14:45.407000', '2022-03-29 19:14:45.407000', 'YVKG', '0:0:0:0:0:0:0:1', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (679, '2022-03-29 19:43:06.394000', '2022-03-29 19:43:06.394000', 'YVKG', '0:0:0:0:0:0:0:1', 'Monday_1201', 25);
INSERT INTO `logs` (`id`, `create_time`, `update_time`, `content`, `ip_address`, `log_key`, `type`) VALUES (680, '2022-03-30 00:14:52.436000', '2022-03-30 00:14:52.436000', 'YVKG', '0:0:0:0:0:0:0:1', 'Monday_1201', 25);
COMMIT;

-- ----------------------------
-- Table structure for menus
-- ----------------------------
DROP TABLE IF EXISTS `menus`;
CREATE TABLE `menus` (
  `id` int NOT NULL AUTO_INCREMENT,
  `create_time` datetime(6) DEFAULT NULL,
  `update_time` datetime(6) DEFAULT NULL,
  `icon` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL,
  `name` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `parent_id` int DEFAULT '0',
  `priority` int DEFAULT '0',
  `target` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT '_self',
  `team` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL,
  `url` varchar(1023) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  KEY `menus_parent_id` (`parent_id`) USING BTREE,
  KEY `menus_name` (`name`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=21 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Records of menus
-- ----------------------------
BEGIN;
INSERT INTO `menus` (`id`, `create_time`, `update_time`, `icon`, `name`, `parent_id`, `priority`, `target`, `team`, `url`) VALUES (1, NULL, '2021-07-28 13:38:17.510000', '', '首页', 0, 0, '_self', '', '/');
INSERT INTO `menus` (`id`, `create_time`, `update_time`, `icon`, `name`, `parent_id`, `priority`, `target`, `team`, `url`) VALUES (9, NULL, '2021-07-28 13:38:17.510000', '', '分类', 0, 1, '_self', '', 'https://www.qinweizhao.com/categories.html');
INSERT INTO `menus` (`id`, `create_time`, `update_time`, `icon`, `name`, `parent_id`, `priority`, `target`, `team`, `url`) VALUES (11, NULL, '2021-07-28 13:38:17.510000', '', '标签', 0, 2, '_self', '', 'https://www.qinweizhao.com/tags.html');
INSERT INTO `menus` (`id`, `create_time`, `update_time`, `icon`, `name`, `parent_id`, `priority`, `target`, `team`, `url`) VALUES (12, NULL, '2021-07-28 13:38:17.510000', '', '归档', 0, 3, '_self', '', 'https://www.qinweizhao.com/archives.html');
INSERT INTO `menus` (`id`, `create_time`, `update_time`, `icon`, `name`, `parent_id`, `priority`, `target`, `team`, `url`) VALUES (15, NULL, '2021-07-28 13:38:17.510000', '', '关于', 0, 4, '_self', '', 'https://www.qinweizhao.com/about.html');
COMMIT;

-- ----------------------------
-- Table structure for metas
-- ----------------------------
DROP TABLE IF EXISTS `metas`;
CREATE TABLE `metas` (
  `type` int NOT NULL DEFAULT '0',
  `id` bigint NOT NULL AUTO_INCREMENT,
  `create_time` datetime(6) DEFAULT NULL,
  `update_time` datetime(6) DEFAULT NULL,
  `meta_key` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `post_id` int NOT NULL,
  `meta_value` varchar(1023) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Records of metas
-- ----------------------------
BEGIN;
COMMIT;

-- ----------------------------
-- Table structure for options
-- ----------------------------
DROP TABLE IF EXISTS `options`;
CREATE TABLE `options` (
  `id` int NOT NULL AUTO_INCREMENT,
  `create_time` datetime(6) DEFAULT NULL,
  `update_time` datetime(6) DEFAULT NULL,
  `option_key` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `type` int DEFAULT '0',
  `option_value` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=67 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Records of options
-- ----------------------------
BEGIN;
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (1, '2021-06-08 16:11:06.611000', '2021-06-08 16:11:06.611000', 'birthday', 0, '1623139866536');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (2, '2021-06-08 16:11:06.702000', '2021-06-08 16:11:06.702000', 'blog_locale', 0, 'zh');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (3, '2021-06-08 16:11:06.712000', '2021-06-08 16:11:06.712000', 'is_installed', 0, 'true');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (4, '2021-06-08 16:11:06.718000', '2021-11-22 19:42:56.259000', 'blog_title', 0, 'Monday_1201');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (5, '2021-06-08 16:11:06.734000', '2021-07-21 23:52:37.625000', 'blog_url', 0, 'http://localhost:8090/');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (6, '2021-06-08 16:27:25.964000', '2021-08-19 20:45:29.901000', 'gravatar_source', 0, '//gravatar.zeruns.tech/avatar/');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (7, '2021-06-08 16:27:25.969000', '2021-06-08 16:27:25.969000', 'post_index_sort', 0, 'createTime');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (8, '2021-06-08 16:27:25.972000', '2021-06-08 16:27:25.972000', 'email_ssl_port', 0, '465');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (9, '2021-06-08 16:27:25.974000', '2021-06-08 16:27:25.974000', 'oss_qiniu_zone', 0, 'auto');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (10, '2021-06-08 16:27:25.976000', '2021-06-08 16:27:25.976000', 'global_absolute_path_enabled', 0, 'true');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (11, '2021-06-08 16:27:25.980000', '2021-06-08 16:27:25.980000', 'recycled_post_retention_time', 0, '30');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (12, '2021-06-08 16:27:25.985000', '2021-06-08 16:27:25.985000', 'email_enabled', 0, 'false');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (13, '2021-06-08 16:27:25.993000', '2021-06-08 16:27:25.993000', 'attachment_upload_max_files', 0, '50');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (14, '2021-06-08 16:27:25.994000', '2021-06-08 16:27:25.994000', 'email_protocol', 0, 'smtp');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (15, '2021-06-08 16:27:25.997000', '2022-01-07 13:13:13.570000', 'comment_api_enabled', 0, 'true');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (16, '2021-06-08 16:27:25.999000', '2022-03-25 14:12:08.249000', 'developer_mode', 0, 'true');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (17, '2021-06-08 16:27:26.000000', '2021-06-08 16:27:26.000000', 'default_editor', 0, 'MARKDOWN');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (18, '2021-06-08 16:27:26.001000', '2021-06-08 16:27:26.001000', 'photos_title', 0, '图库');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (19, '2021-06-08 16:27:26.006000', '2021-06-08 16:27:26.006000', 'comment_range', 0, '30');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (20, '2021-06-08 16:27:26.008000', '2021-06-08 16:27:26.008000', 'seo_spider_disabled', 0, 'false');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (21, '2021-06-08 16:27:26.009000', '2021-06-08 16:27:26.009000', 'journals_page_size', 0, '10');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (22, '2021-06-08 16:27:26.013000', '2021-06-08 16:27:26.013000', 'archives_prefix', 0, 'archives');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (23, '2021-06-08 16:27:26.016000', '2021-09-16 15:10:18.098000', 'journals_prefix', 0, 'temporary');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (24, '2021-06-08 16:27:26.020000', '2021-06-08 16:27:26.020000', 'comment_page_size', 0, '10');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (25, '2021-06-08 16:27:26.023000', '2021-06-08 16:27:26.023000', 'journals_title', 0, '日志');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (26, '2021-06-08 16:27:26.029000', '2021-06-08 16:27:26.029000', 'attachment_upload_image_preview_enable', 0, 'true');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (27, '2021-06-08 16:27:26.032000', '2021-07-21 18:15:47.032000', 'attachment_type', 0, 'LOCAL');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (28, '2021-06-08 16:27:26.035000', '2021-06-08 16:27:26.035000', 'comment_reply_notice', 0, 'false');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (29, '2021-06-08 16:27:26.037000', '2021-06-08 16:27:26.037000', 'comment_ban_time', 0, '10');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (30, '2021-06-08 16:27:26.038000', '2021-06-08 16:27:26.038000', 'oss_qiniu_domain_protocol', 0, 'https://');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (31, '2021-06-08 16:27:26.038000', '2021-06-08 16:27:26.038000', 'oss_upyun_domain_protocol', 0, 'https://');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (32, '2021-06-08 16:27:26.039000', '2021-06-08 16:27:26.039000', 'comment_new_notice', 0, 'false');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (33, '2021-06-08 16:27:26.041000', '2021-06-08 16:27:26.041000', 'photos_page_size', 0, '10');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (34, '2021-06-08 16:27:26.044000', '2021-06-08 16:27:26.044000', 'attachment_upload_max_parallel_uploads', 0, '3');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (35, '2021-06-08 16:27:26.047000', '2021-06-08 16:27:26.047000', 'links_prefix', 0, 'links');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (36, '2021-06-08 16:27:26.048000', '2021-06-08 16:27:26.048000', 'sheet_prefix', 0, 's');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (37, '2021-06-08 16:27:26.049000', '2021-06-08 16:27:26.049000', 'tags_prefix', 0, 'tags');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (38, '2021-06-08 16:27:26.050000', '2021-06-08 16:27:26.050000', 'recycled_post_retention_timeunit', 0, 'DAY');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (39, '2021-06-08 16:27:26.051000', '2021-06-08 16:27:26.051000', 'rss_page_size', 0, '20');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (40, '2021-06-08 16:27:26.051000', '2022-03-09 23:53:49.834000', 'post_permalink_type', 0, 'ID');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (41, '2021-06-08 16:27:26.052000', '2021-06-08 19:18:24.248000', 'sheet_permalink_type', 0, 'ROOT');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (42, '2021-06-08 16:27:26.053000', '2021-06-08 16:27:26.053000', 'rss_content_type', 0, 'full');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (43, '2021-06-08 16:27:26.055000', '2021-06-08 16:27:26.055000', 'categories_prefix', 0, 'categories');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (44, '2021-06-08 16:27:26.055000', '2021-06-08 16:27:26.055000', 'photos_prefix', 0, 'photos');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (45, '2021-06-08 16:27:26.057000', '2022-03-06 02:39:55.413000', 'theme', 0, 'blog-frontend-portal');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (46, '2021-06-08 16:27:26.058000', '2021-08-17 20:16:35.928000', 'comment_internal_plugin_js', 0, '//cdn.jsdelivr.net/npm/halo-comment@latest/dist/halo-comment.min.js');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (47, '2021-06-08 16:27:26.060000', '2021-11-13 20:19:35.905000', 'api_enabled', 0, 'true');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (48, '2021-06-08 16:27:26.066000', '2021-11-12 21:23:40.431000', 'post_index_page_size', 0, '8');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (49, '2021-06-08 16:27:26.073000', '2021-07-21 17:13:16.018000', 'oss_ali_domain_protocol', 0, 'http://');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (50, '2021-06-08 16:27:26.078000', '2021-06-08 16:27:26.078000', 'post_archives_page_size', 0, '10');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (51, '2021-06-08 16:27:26.092000', '2021-06-08 16:27:26.092000', 'comment_new_need_check', 0, 'true');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (52, '2021-06-08 16:27:26.093000', '2021-06-08 16:27:26.093000', 'links_title', 0, '友情链接');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (53, '2021-06-08 16:27:26.095000', '2021-08-19 20:43:55.412000', 'comment_gravatar_default', 0, 'mm');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (54, '2021-06-08 16:27:26.098000', '2021-06-09 17:47:26.029000', 'recycled_post_cleaning_enabled', 0, 'true');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (55, '2021-06-08 16:27:26.099000', '2021-06-08 16:27:26.099000', 'post_summary_length', 0, '150');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (56, '2021-06-08 18:14:41.962000', '2021-11-12 18:10:27.508000', 'blog_logo', 0, 'https://www.qinweizhao.com/upload/2021/11/logo-5b1ce3de7b724b6d905935eeed0faa50.png');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (57, '2021-07-21 17:07:10.773000', '2021-07-21 17:07:10.773000', 'oss_ali_domain', 0, 'localhost:8090');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (58, '2021-07-21 17:07:10.808000', '2021-07-21 17:07:10.808000', 'oss_ali_bucket_name', 0, 'qwz-picture-bed');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (59, '2021-07-21 17:07:10.819000', '2021-07-21 17:13:03.923000', 'oss_ali_endpoint', 0, 'oss-accelerate.aliyuncs.com');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (60, '2021-07-21 17:07:10.829000', '2021-07-21 17:07:10.829000', 'oss_ali_access_key', 0, 'LTAI5tL4tR9DYAotimEJ2Ws8');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (61, '2021-07-21 17:07:10.838000', '2021-07-21 17:07:10.838000', 'oss_ali_access_secret', 0, 'NLUakFeNmsQgoYd0OVhM613Wc27p4S');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (62, '2021-07-21 17:13:09.172000', '2021-07-21 17:13:10.954000', 'oss_ali_source', 0, 'imagesss');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (63, '2021-07-22 16:48:35.227000', '2021-07-22 16:51:08.870000', 'path_suffix', 0, '.html');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (64, '2021-07-22 17:26:17.558000', '2021-11-12 18:10:27.508000', 'blog_favicon', 0, 'https://www.qinweizhao.com/upload/2021/11/logo-5b1ce3de7b724b6d905935eeed0faa50.png');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (65, '2021-11-12 14:49:01.077000', '2022-01-07 13:18:10.558000', 'api_access_key', 0, 'weizhao');
INSERT INTO `options` (`id`, `create_time`, `update_time`, `option_key`, `type`, `option_value`) VALUES (66, '2022-01-06 13:37:36.886000', '2022-01-07 13:17:33.528000', 'seo_keywords', 0, 'qinweizhao,秦伟诏,YVKG,Monday_1201');
COMMIT;

-- ----------------------------
-- Table structure for photos
-- ----------------------------
DROP TABLE IF EXISTS `photos`;
CREATE TABLE `photos` (
  `id` int NOT NULL AUTO_INCREMENT,
  `create_time` datetime(6) DEFAULT NULL,
  `update_time` datetime(6) DEFAULT NULL,
  `description` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL,
  `location` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL,
  `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `take_time` datetime(6) DEFAULT NULL,
  `team` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL,
  `thumbnail` varchar(1023) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL,
  `url` varchar(1023) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  KEY `photos_team` (`team`) USING BTREE,
  KEY `photos_create_time` (`create_time`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Records of photos
-- ----------------------------
BEGIN;
INSERT INTO `photos` (`id`, `create_time`, `update_time`, `description`, `location`, `name`, `take_time`, `team`, `thumbnail`, `url`) VALUES (1, '2022-01-22 16:55:25.605000', '2022-01-22 16:55:25.605000', '', '', '8', '2022-01-22 16:55:24.919000', '', 'https://www.qinweizhao.com/upload/2022/01/blob84e4e075-d7e0-4d09-8d99-20af90b64df8-7f12e9500f6445b08c04e553fb5437bd-thumbnail.jpg', 'https://www.qinweizhao.com/upload/2022/01/blob84e4e075-d7e0-4d09-8d99-20af90b64df8-7f12e9500f6445b08c04e553fb5437bd.jpg');
COMMIT;

-- ----------------------------
-- Table structure for post_categories
-- ----------------------------
DROP TABLE IF EXISTS `post_categories`;
CREATE TABLE `post_categories` (
  `id` int NOT NULL AUTO_INCREMENT,
  `create_time` datetime(6) DEFAULT NULL,
  `update_time` datetime(6) DEFAULT NULL,
  `category_id` int DEFAULT NULL,
  `post_id` int DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  KEY `post_categories_post_id` (`post_id`) USING BTREE,
  KEY `post_categories_category_id` (`category_id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=444 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Records of post_categories
-- ----------------------------
BEGIN;
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (293, '2021-11-23 18:26:46.287000', '2021-11-23 18:26:46.287000', 8, 61);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (295, '2021-11-23 18:27:29.020000', '2021-11-23 18:27:29.020000', 2, 60);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (298, '2021-11-23 18:28:05.362000', '2021-11-23 18:28:05.362000', 1, 53);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (299, '2021-11-23 18:28:17.847000', '2021-11-23 18:28:17.847000', 8, 52);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (300, '2021-11-23 18:28:27.806000', '2021-11-23 18:28:27.806000', 10, 51);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (301, '2021-11-23 18:28:49.896000', '2021-11-23 18:28:49.896000', 5, 48);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (302, '2021-11-23 18:28:54.671000', '2021-11-23 18:28:54.671000', 8, 49);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (303, '2021-11-23 18:28:59.898000', '2021-11-23 18:28:59.898000', 3, 50);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (304, '2021-11-23 18:29:14.805000', '2021-11-23 18:29:14.805000', 3, 5);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (305, '2021-11-23 18:29:19.011000', '2021-11-23 18:29:19.011000', 8, 6);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (306, '2021-11-23 18:29:25.028000', '2021-11-23 18:29:25.028000', 8, 8);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (308, '2021-11-23 18:30:06.148000', '2021-11-23 18:30:06.148000', 8, 10);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (309, '2021-11-23 18:30:16.227000', '2021-11-23 18:30:16.227000', 1, 11);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (310, '2021-11-23 18:30:25.106000', '2021-11-23 18:30:25.106000', 8, 9);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (311, '2021-11-23 18:30:32.438000', '2021-11-23 18:30:32.438000', 8, 43);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (312, '2021-11-23 18:30:37.463000', '2021-11-23 18:30:37.463000', 8, 42);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (313, '2021-11-25 15:29:38.103000', '2021-11-25 15:29:38.103000', 2, 39);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (314, '2021-11-25 15:29:55.226000', '2021-11-25 15:29:55.226000', 5, 47);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (315, '2021-11-25 15:30:05.216000', '2021-11-25 15:30:05.216000', 9, 44);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (316, '2021-11-25 15:30:14.639000', '2021-11-25 15:30:14.639000', 9, 45);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (317, '2021-11-25 15:30:26.755000', '2021-11-25 15:30:26.755000', 5, 46);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (318, '2021-11-25 15:30:36.994000', '2021-11-25 15:30:36.994000', 8, 41);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (319, '2021-11-25 15:31:24.555000', '2021-11-25 15:31:24.555000', 9, 30);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (322, '2021-11-25 15:31:54.682000', '2021-11-25 15:31:54.682000', 1, 34);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (323, '2021-11-25 15:32:01.086000', '2021-11-25 15:32:01.086000', 5, 32);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (324, '2021-11-25 15:32:08.242000', '2021-11-25 15:32:08.242000', 4, 31);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (325, '2021-11-25 15:32:14.735000', '2021-11-25 15:32:14.735000', 1, 36);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (326, '2021-11-25 15:32:21.457000', '2021-11-25 15:32:21.457000', 9, 38);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (327, '2021-11-25 15:32:28.170000', '2021-11-25 15:32:28.170000', 1, 35);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (328, '2021-11-25 15:32:36.029000', '2021-11-25 15:32:36.029000', 5, 33);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (329, '2021-11-25 15:32:43.703000', '2021-11-25 15:32:43.703000', 4, 27);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (332, '2021-11-25 15:33:23.429000', '2021-11-25 15:33:23.429000', 8, 25);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (333, '2021-11-25 15:33:45.922000', '2021-11-25 15:33:45.922000', 8, 24);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (334, '2021-11-25 15:33:57.539000', '2021-11-25 15:33:57.539000', 1, 21);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (335, '2021-11-25 15:34:06.111000', '2021-11-25 15:34:06.111000', 9, 16);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (336, '2021-11-25 15:34:16.119000', '2021-11-25 15:34:16.119000', 9, 15);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (337, '2021-11-25 15:34:33.712000', '2021-11-25 15:34:33.712000', 8, 23);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (338, '2021-11-25 15:34:40.345000', '2021-11-25 15:34:40.345000', 8, 20);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (339, '2021-11-25 15:34:47.592000', '2021-11-25 15:34:47.592000', 1, 19);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (340, '2021-11-25 15:34:54.984000', '2021-11-25 15:34:54.984000', 4, 17);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (342, '2021-11-25 15:35:11.160000', '2021-11-25 15:35:11.160000', 2, 12);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (343, '2021-11-25 15:35:19.640000', '2021-11-25 15:35:19.640000', 4, 13);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (344, '2021-11-25 15:35:29.874000', '2021-11-25 15:35:29.874000', 9, 14);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (348, '2021-12-29 14:56:02.603000', '2021-12-29 14:56:02.603000', 8, 63);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (352, '2022-01-04 10:13:55.291000', '2022-01-04 10:13:55.291000', 10, 7);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (367, '2022-02-15 10:50:11.614000', '2022-02-15 10:50:11.614000', 2, 64);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (368, '2022-02-15 10:51:59.586000', '2022-02-15 10:51:59.586000', 9, 67);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (369, '2022-03-02 21:45:38.490000', '2022-03-02 21:45:38.490000', 2, 68);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (370, '2022-03-06 18:24:23.642000', '2022-03-06 18:24:23.642000', 9, 65);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (371, '2022-03-06 18:37:01.330000', '2022-03-06 18:37:01.330000', 7, 66);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (373, '2022-03-06 18:42:39.793000', '2022-03-06 18:42:39.793000', 8, 40);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (374, '2022-03-06 18:48:53.798000', '2022-03-06 18:48:53.798000', 1, 26);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (375, '2022-03-06 18:49:30.461000', '2022-03-06 18:49:30.461000', 1, 70);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (376, '2022-03-06 18:54:12.774000', '2022-03-06 18:54:12.774000', 10, 69);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (377, '2022-03-06 18:54:43.641000', '2022-03-06 18:54:43.641000', 1, 28);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (382, '2022-03-06 21:20:57.567000', '2022-03-06 21:20:57.567000', 9, 59);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (401, '2022-03-10 10:46:28.592000', '2022-03-10 10:46:28.592000', 1, 18);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (406, '2022-03-12 17:10:05.737000', '2022-03-12 17:10:05.737000', 8, 74);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (407, '2022-03-12 22:46:19.757000', '2022-03-12 22:46:19.757000', 12, 73);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (415, '2022-03-12 22:52:07.218000', '2022-03-12 22:52:07.218000', 8, 76);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (417, '2022-03-12 23:02:20.180000', '2022-03-12 23:02:20.180000', 3, 58);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (419, '2022-03-13 13:56:26.964000', '2022-03-13 13:56:26.964000', 8, 71);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (421, '2022-03-13 13:59:48.223000', '2022-03-13 13:59:48.223000', 8, 72);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (424, '2022-03-15 18:24:30.053000', '2022-03-15 18:24:30.053000', 8, 75);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (425, '2022-03-16 14:23:48.325000', '2022-03-16 14:23:48.325000', 6, 78);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (430, '2022-03-16 15:01:44.747000', '2022-03-16 15:01:44.747000', 6, 80);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (431, '2022-03-16 15:04:06.732000', '2022-03-16 15:04:06.732000', 6, 79);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (442, '2022-03-24 13:57:33.276000', '2022-03-24 13:57:33.276000', 6, 81);
INSERT INTO `post_categories` (`id`, `create_time`, `update_time`, `category_id`, `post_id`) VALUES (443, '2022-03-24 13:57:44.810000', '2022-03-24 13:57:44.810000', 6, 82);
COMMIT;

-- ----------------------------
-- Table structure for post_tags
-- ----------------------------
DROP TABLE IF EXISTS `post_tags`;
CREATE TABLE `post_tags` (
  `id` int NOT NULL AUTO_INCREMENT,
  `create_time` datetime(6) DEFAULT NULL,
  `update_time` datetime(6) DEFAULT NULL,
  `post_id` int NOT NULL,
  `tag_id` int NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  KEY `post_tags_post_id` (`post_id`) USING BTREE,
  KEY `post_tags_tag_id` (`tag_id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=410 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Records of post_tags
-- ----------------------------
BEGIN;
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (260, '2021-11-23 18:26:46.271000', '2021-11-23 18:26:46.271000', 61, 36);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (262, '2021-11-23 18:27:29.012000', '2021-11-23 18:27:29.012000', 60, 27);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (265, '2021-11-23 18:28:05.354000', '2021-11-23 18:28:05.354000', 53, 22);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (266, '2021-11-23 18:28:17.834000', '2021-11-23 18:28:17.834000', 52, 16);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (267, '2021-11-23 18:28:27.798000', '2021-11-23 18:28:27.798000', 51, 30);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (268, '2021-11-23 18:28:49.888000', '2021-11-23 18:28:49.888000', 48, 4);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (269, '2021-11-23 18:28:54.664000', '2021-11-23 18:28:54.664000', 49, 17);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (270, '2021-11-23 18:28:59.890000', '2021-11-23 18:28:59.890000', 50, 20);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (271, '2021-11-23 18:29:14.797000', '2021-11-23 18:29:14.797000', 5, 20);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (272, '2021-11-23 18:29:19.003000', '2021-11-23 18:29:19.003000', 6, 17);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (273, '2021-11-23 18:29:25.021000', '2021-11-23 18:29:25.021000', 8, 17);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (275, '2021-11-23 18:30:06.140000', '2021-11-23 18:30:06.140000', 10, 29);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (276, '2021-11-23 18:30:16.219000', '2021-11-23 18:30:16.219000', 11, 22);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (277, '2021-11-23 18:30:25.098000', '2021-11-23 18:30:25.098000', 9, 22);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (278, '2021-11-23 18:30:32.431000', '2021-11-23 18:30:32.431000', 43, 34);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (279, '2021-11-23 18:30:37.456000', '2021-11-23 18:30:37.456000', 42, 33);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (280, '2021-11-25 15:29:38.094000', '2021-11-25 15:29:38.094000', 39, 31);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (281, '2021-11-25 15:29:55.219000', '2021-11-25 15:29:55.219000', 47, 4);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (282, '2021-11-25 15:30:05.209000', '2021-11-25 15:30:05.209000', 44, 21);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (283, '2021-11-25 15:30:14.632000', '2021-11-25 15:30:14.632000', 45, 21);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (284, '2021-11-25 15:30:26.747000', '2021-11-25 15:30:26.747000', 46, 23);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (285, '2021-11-25 15:30:36.987000', '2021-11-25 15:30:36.987000', 41, 17);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (286, '2021-11-25 15:31:24.547000', '2021-11-25 15:31:24.547000', 30, 21);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (289, '2021-11-25 15:31:54.676000', '2021-11-25 15:31:54.676000', 34, 22);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (290, '2021-11-25 15:32:01.080000', '2021-11-25 15:32:01.080000', 32, 25);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (291, '2021-11-25 15:32:08.236000', '2021-11-25 15:32:08.236000', 31, 18);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (292, '2021-11-25 15:32:14.729000', '2021-11-25 15:32:14.729000', 36, 22);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (293, '2021-11-25 15:32:21.450000', '2021-11-25 15:32:21.450000', 38, 21);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (294, '2021-11-25 15:32:28.163000', '2021-11-25 15:32:28.163000', 35, 22);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (295, '2021-11-25 15:32:36.021000', '2021-11-25 15:32:36.021000', 33, 24);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (296, '2021-11-25 15:32:43.696000', '2021-11-25 15:32:43.696000', 27, 18);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (300, '2021-11-25 15:33:23.422000', '2021-11-25 15:33:23.422000', 25, 37);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (301, '2021-11-25 15:33:45.916000', '2021-11-25 15:33:45.916000', 24, 29);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (302, '2021-11-25 15:33:57.532000', '2021-11-25 15:33:57.532000', 21, 27);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (303, '2021-11-25 15:34:06.105000', '2021-11-25 15:34:06.105000', 16, 19);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (304, '2021-11-25 15:34:16.112000', '2021-11-25 15:34:16.112000', 15, 28);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (305, '2021-11-25 15:34:33.706000', '2021-11-25 15:34:33.706000', 23, 29);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (306, '2021-11-25 15:34:40.338000', '2021-11-25 15:34:40.338000', 20, 17);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (307, '2021-11-25 15:34:47.585000', '2021-11-25 15:34:47.585000', 19, 22);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (308, '2021-11-25 15:34:54.977000', '2021-11-25 15:34:54.977000', 17, 35);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (310, '2021-11-25 15:35:11.154000', '2021-11-25 15:35:11.154000', 12, 27);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (311, '2021-11-25 15:35:19.634000', '2021-11-25 15:35:19.634000', 13, 18);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (312, '2021-11-25 15:35:29.867000', '2021-11-25 15:35:29.867000', 14, 28);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (315, '2021-12-29 14:56:02.594000', '2021-12-29 14:56:02.594000', 63, 29);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (319, '2022-01-04 10:13:55.284000', '2022-01-04 10:13:55.284000', 7, 30);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (336, '2022-02-15 10:50:11.607000', '2022-02-15 10:50:11.607000', 64, 27);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (337, '2022-02-15 10:51:59.580000', '2022-02-15 10:51:59.580000', 67, 21);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (338, '2022-03-02 21:45:38.470000', '2022-03-02 21:45:38.470000', 68, 27);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (339, '2022-03-06 18:24:23.631000', '2022-03-06 18:24:23.631000', 65, 21);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (340, '2022-03-06 18:37:01.323000', '2022-03-06 18:37:01.323000', 66, 39);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (341, '2022-03-06 18:42:39.784000', '2022-03-06 18:42:39.784000', 40, 32);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (342, '2022-03-06 18:48:53.792000', '2022-03-06 18:48:53.792000', 26, 22);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (343, '2022-03-06 18:49:30.455000', '2022-03-06 18:49:30.455000', 70, 26);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (344, '2022-03-06 18:54:12.764000', '2022-03-06 18:54:12.764000', 69, 40);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (345, '2022-03-06 18:54:43.634000', '2022-03-06 18:54:43.634000', 28, 26);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (350, '2022-03-06 21:20:57.561000', '2022-03-06 21:20:57.561000', 59, 28);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (369, '2022-03-10 10:46:28.573000', '2022-03-10 10:46:28.573000', 18, 22);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (374, '2022-03-12 17:10:05.730000', '2022-03-12 17:10:05.730000', 74, 40);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (375, '2022-03-12 22:46:19.750000', '2022-03-12 22:46:19.750000', 73, 41);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (382, '2022-03-12 22:52:07.210000', '2022-03-12 22:52:07.210000', 76, 16);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (384, '2022-03-12 23:02:20.173000', '2022-03-12 23:02:20.173000', 58, 20);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (386, '2022-03-13 13:56:26.957000', '2022-03-13 13:56:26.957000', 71, 16);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (388, '2022-03-13 13:59:48.216000', '2022-03-13 13:59:48.216000', 72, 16);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (390, '2022-03-15 18:24:30.047000', '2022-03-15 18:24:30.047000', 75, 16);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (391, '2022-03-16 14:23:48.313000', '2022-03-16 14:23:48.313000', 78, 43);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (396, '2022-03-16 15:01:44.741000', '2022-03-16 15:01:44.741000', 80, 43);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (397, '2022-03-16 15:04:06.726000', '2022-03-16 15:04:06.726000', 79, 43);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (408, '2022-03-24 13:57:33.274000', '2022-03-24 13:57:33.274000', 81, 39);
INSERT INTO `post_tags` (`id`, `create_time`, `update_time`, `post_id`, `tag_id`) VALUES (409, '2022-03-24 13:57:44.808000', '2022-03-24 13:57:44.808000', 82, 39);
COMMIT;

-- ----------------------------
-- Table structure for posts
-- ----------------------------
DROP TABLE IF EXISTS `posts`;
CREATE TABLE `posts` (
  `type` int NOT NULL DEFAULT '0',
  `id` int NOT NULL AUTO_INCREMENT,
  `create_time` datetime(6) DEFAULT NULL,
  `update_time` datetime(6) DEFAULT NULL,
  `disallow_comment` bit(1) DEFAULT b'0',
  `edit_time` datetime(6) DEFAULT NULL,
  `editor_type` int DEFAULT '0',
  `format_content` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin,
  `likes` bigint DEFAULT '0',
  `meta_description` varchar(1023) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL,
  `meta_keywords` varchar(511) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL,
  `original_content` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `password` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL,
  `slug` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `status` int DEFAULT '1',
  `summary` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin,
  `template` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL,
  `thumbnail` varchar(1023) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL,
  `title` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `top_priority` int DEFAULT '0',
  `url` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL,
  `visits` bigint DEFAULT '0',
  `word_count` bigint DEFAULT '0',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE KEY `UK_qmmso8qxjpbxwegdtp0l90390` (`slug`) USING BTREE,
  KEY `posts_type_status` (`type`,`status`) USING BTREE,
  KEY `posts_create_time` (`create_time`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=83 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Records of posts
-- ----------------------------
BEGIN;
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (1, 4, '2021-06-08 19:11:47.855000', '2021-06-08 19:17:44.822000', b'1', '2021-06-08 19:17:44.816000', 0, '<h1 id=\"qinweizhao\">qinweizhao</h1>\n', 0, NULL, NULL, '# qinweizhao\n', '', 'about', 0, '关于', '', '', '关于', 0, NULL, 283, 13);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 5, '2021-07-21 19:38:00.484000', '2021-11-23 18:29:14.758000', b'0', '2021-11-23 18:29:14.750000', 0, '<h1 id=\"nginx-服务器-ssl-证书安装部署\">Nginx 服务器 SSL 证书安装部署</h1>\n<h2 id=\"一证书安装\">一、证书安装</h2>\n<h3 id=\"1下载并解压缩证书文件包到本地目录解压缩后可获得相关类型的证书文件\">1、下载并解压缩证书文件包到本地目录。解压缩后，可获得相关类型的证书文件</h3>\n<p><img src=\"https://img.qinweizhao.com/2021/07/2021-07-21_192413.png\" alt=\"2021-07-21_192413\" /></p>\n<h3 id=\"2将-nginx-中的证书文件和私钥文件从本地目录拷贝到-nginx-服务器的-usrlocalnginxconf-目录此处为-nginx-默认安装目录请根据实际情况操作下\">2、将 Nginx 中的证书文件和私钥文件从本地目录拷贝到 Nginx 服务器的 <code>/usr/local/nginx/conf</code> 目录（此处为 Nginx 默认安装目录，请根据实际情况操作）下</h3>\n<p><img src=\"https://img.qinweizhao.com/2021/07/2021-07-21_192537.png\" alt=\"2021-07-21_192537\" /></p>\n<p><img src=\"https://img.qinweizhao.com/2021/07//2021-07-21_193005.png\" alt=\"2021-07-21_193005\" /></p>\n<h3 id=\"3编辑-nginx-根目录下的-confnginxconf-文件修改内容如下\">3、编辑 Nginx 根目录下的 <code>conf/nginx.conf</code> 文件。修改内容如下</h3>\n<pre><code class=\"language-bash\">vim /usr/local/nginx/conf/nginx.conf\n</code></pre>\n<h4 id=\"说明\">说明</h4>\n<ul>\n<li>由于版本问题，配置文件可能存在不同的写法。例如：Nginx 版本为 <code>nginx/1.15.0</code> 以上请使用 <code>listen 443 ssl</code> 代替 <code>listen 443</code> 和 <code>ssl on</code>。</li>\n</ul>\n<pre><code class=\"language-conf\">server {\n # SSL 访问端口号为 443\n listen 443 ssl; \n # 填写绑定证书的域名\n server_name www.qinweizhao.com; \n # 证书文件名称\n ssl_certificate 1_www.qinweizhao.com_bundle.crt; \n # 私钥文件名称\n ssl_certificate_key 2_www.qinweizhao.com.key; \n ssl_session_timeout 5m;\n # 请按照以下协议配置\n ssl_protocols TLSv1 TLSv1.1 TLSv1.2; \n # 请按照以下套件配置，配置加密套件，写法遵循 openssl 标准。\n ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; \n ssl_prefer_server_ciphers on;\n location / {\n    # 网站主页路径。此路径仅供参考，具体请您按照实际目录操作。\n    root html; \n    index  index.html index.htm;\n}\n}\n</code></pre>\n<h3 id=\"4在-nginx-根目录下通过执行以下命令验证配置文件问题\">4、在 Nginx 根目录下，通过执行以下命令验证配置文件问题</h3>\n<pre><code class=\"language-bash\">./sbin/nginx -t\n</code></pre>\n<h3 id=\"5重启-nginx即可使用-httpswwwqinweizhaocom-进行访问\">5、重启 Nginx，即可使用 <code>https://www.qinweizhao.com</code> 进行访问</h3>\n<pre><code class=\"language-bash\">./sbin/nginx -s reload\n</code></pre>\n<h2 id=\"二http-自动跳转-https-的安全配置可选\">二、HTTP 自动跳转 HTTPS 的安全配置（可选）</h2>\n<h3 id=\"1根据实际需求选择以下配置方式\">1、根据实际需求，选择以下配置方式</h3>\n<ul>\n<li>在页面中添加 JS 脚本。</li>\n<li>在后端程序中添加重定向。</li>\n<li>通过 Web 服务器实现跳转。</li>\n<li>Nginx 支持 rewrite 功能。若您在编译时没有去掉 pcre，您可在 HTTP 的 server 中增加 <code>return 301 https://$host$request_uri;</code>，即可将默认80端口的请求重定向为 HTTPS。修改如下内容：</li>\n</ul>\n<pre><code class=\"language-conf\">server {\n    # SSL 访问端口号为 443\n    listen 443 ssl; \n    # 填写绑定证书的域名\n    server_name www.qinweizhao.com; \n    # 证书文件名称\n    ssl_certificate 1_www.qinweizhao.com_bundle.crt; \n    # 私钥文件名称\n    ssl_certificate_key 2_www.qinweizhao.com.key; \n    ssl_session_timeout 5m;\n    # 请按照以下协议配置\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; \n    # 请按照以下套件配置，配置加密套件，写法遵循 openssl 标准。\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; \n    ssl_prefer_server_ciphers on;\n    location / {\n        # 网站主页路径。此路径仅供参考，具体按照实际目录操作。\n        root html; \n        index  index.html index.htm;\n    }\n}\nserver {\n    listen 80;\n    # 填写绑定证书的域名\n    server_name www.qinweizhao.com; \n    # 把http的域名请求转成https\n    return 301 https://$host$request_uri; \n}\n</code></pre>\n<h3 id=\"2若修改完成重启-nginx即可使用-httpwwwqinweizhaocom-进行访问\">2、若修改完成，重启 Nginx。即可使用 <code>http://www.qinweizhao.com</code> 进行访问</h3>\n<pre><code class=\"language-bash\">./sbin/nginx -s reload\n</code></pre>\n', 0, NULL, NULL, '# Nginx 服务器 SSL 证书安装部署\n\n## 一、证书安装\n\n### 1、下载并解压缩证书文件包到本地目录。解压缩后，可获得相关类型的证书文件\n\n![2021-07-21_192413](https://img.qinweizhao.com/2021/07/2021-07-21_192413.png)\n\n### 2、将 Nginx 中的证书文件和私钥文件从本地目录拷贝到 Nginx 服务器的 `/usr/local/nginx/conf` 目录（此处为 Nginx 默认安装目录，请根据实际情况操作）下\n\n![2021-07-21_192537](https://img.qinweizhao.com/2021/07/2021-07-21_192537.png)\n\n![2021-07-21_193005](https://img.qinweizhao.com/2021/07//2021-07-21_193005.png)\n\n### 3、编辑 Nginx 根目录下的 `conf/nginx.conf` 文件。修改内容如下\n\n ```bash\n vim /usr/local/nginx/conf/nginx.conf\n ```\n\n#### 说明\n\n- 由于版本问题，配置文件可能存在不同的写法。例如：Nginx 版本为 `nginx/1.15.0` 以上请使用 `listen 443 ssl` 代替 `listen 443` 和 `ssl on`。\n\n``` conf\nserver {\n # SSL 访问端口号为 443\n listen 443 ssl; \n # 填写绑定证书的域名\n server_name www.qinweizhao.com; \n # 证书文件名称\n ssl_certificate 1_www.qinweizhao.com_bundle.crt; \n # 私钥文件名称\n ssl_certificate_key 2_www.qinweizhao.com.key; \n ssl_session_timeout 5m;\n # 请按照以下协议配置\n ssl_protocols TLSv1 TLSv1.1 TLSv1.2; \n # 请按照以下套件配置，配置加密套件，写法遵循 openssl 标准。\n ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; \n ssl_prefer_server_ciphers on;\n location / {\n    # 网站主页路径。此路径仅供参考，具体请您按照实际目录操作。\n    root html; \n    index  index.html index.htm;\n}\n}\n```\n\n### 4、在 Nginx 根目录下，通过执行以下命令验证配置文件问题\n\n ```bash\n ./sbin/nginx -t\n ```\n\n### 5、重启 Nginx，即可使用 `https://www.qinweizhao.com` 进行访问\n\n ```bash\n ./sbin/nginx -s reload\n ```\n\n## 二、HTTP 自动跳转 HTTPS 的安全配置（可选）\n\n### 1、根据实际需求，选择以下配置方式\n\n- 在页面中添加 JS 脚本。\n- 在后端程序中添加重定向。\n- 通过 Web 服务器实现跳转。\n- Nginx 支持 rewrite 功能。若您在编译时没有去掉 pcre，您可在 HTTP 的 server 中增加 `return 301 https://$host$request_uri;`，即可将默认80端口的请求重定向为 HTTPS。修改如下内容：\n\n```conf\nserver {\n    # SSL 访问端口号为 443\n    listen 443 ssl; \n    # 填写绑定证书的域名\n    server_name www.qinweizhao.com; \n    # 证书文件名称\n    ssl_certificate 1_www.qinweizhao.com_bundle.crt; \n    # 私钥文件名称\n    ssl_certificate_key 2_www.qinweizhao.com.key; \n    ssl_session_timeout 5m;\n    # 请按照以下协议配置\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; \n    # 请按照以下套件配置，配置加密套件，写法遵循 openssl 标准。\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; \n    ssl_prefer_server_ciphers on;\n    location / {\n        # 网站主页路径。此路径仅供参考，具体按照实际目录操作。\n        root html; \n        index  index.html index.htm;\n    }\n}\nserver {\n    listen 80;\n    # 填写绑定证书的域名\n    server_name www.qinweizhao.com; \n    # 把http的域名请求转成https\n    return 301 https://$host$request_uri; \n}\n```\n\n### 2、若修改完成，重启 Nginx。即可使用 `http://www.qinweizhao.com` 进行访问\n\n ```bash\n ./sbin/nginx -s reload\n ```\n', '', 'nginx服务器ssl证书安装部署', 0, 'Nginx 服务器 SSL 证书安装部署一、证书安装1、下载并解压缩证书文件包到本地目录。解压缩后，可获得相关类型的证书文件。2、将 Nginx 中的证书文件和私钥文件从本地目录拷贝到 Nginx 服务器的 /usr/local/nginx/conf 目录（此处为 Nginx 默认安装目录，请根据实', '', '', 'Nginx 服务器 SSL 证书安装部署', 0, NULL, 172, 1662);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 6, '2021-07-22 17:39:42.100000', '2021-11-23 18:29:18.969000', b'0', '2021-11-23 18:29:18.961000', 0, '<h1 id=\"git-的基本使用\">Git 的基本使用</h1>\n<h2 id=\"一quickstart\">一、Quickstart</h2>\n<pre><code class=\"language-bash\"># 创建 test 目录\n$ mkdir test\n# 进入test目录\n$ cd test\n# 在当前目录新建一个 Git 代码库\n$ git init\n# 创建 README.md 文件\n$ touch README.md\n# 添加 README.md 到暂存区\n$ git add README.md\n# 提交暂存区到仓库区\n$ git commit -m &quot;first commit&quot;\n# 增加一个新的远程仓库，并命名为 origin\n$ git remote add origin https://github.com/qinweizhao/test.git\n# 上传本地指定分支到远程仓库\n$ git push -u origin master\n</code></pre>\n<h2 id=\"二git-常用命令\">二、Git 常用命令</h2>\n<h3 id=\"1仓库\">1、仓库</h3>\n<pre><code class=\"language-bash\"># 在当前目录新建一个Git代码库\n$ git init\n\n# 新建一个目录，将其初始化为Git代码库\n$ git init [project-name]\n\n# 下载一个项目和它的整个代码历史\n$ git clone [url]\n</code></pre>\n<h3 id=\"2配置\">2、配置</h3>\n<pre><code class=\"language-bash\"># 显示当前的Git配置\n$ git config --list\n\n# 编辑Git配置文件\n$ git config -e [--global]\n\n# 设置提交代码时的用户信息\n$ git config [--global] user.name &quot;[name]&quot;\n$ git config [--global] user.email &quot;[email address]&quot;\n</code></pre>\n<h3 id=\"3增加删除文件\">3、增加/删除文件</h3>\n<pre><code class=\"language-bash\"># 添加指定文件到暂存区\n$ git add [file1] [file2] ...\n\n# 添加指定目录到暂存区，包括子目录\n$ git add [dir]\n\n# 添加当前目录的所有文件到暂存区\n$ git add .\n\n# 添加每个变化前，都会要求确认\n# 对于同一个文件的多处变化，可以实现分次提交\n$ git add -p\n\n# 删除工作区文件，并且将这次删除放入暂存区\n$ git rm [file1] [file2] ...\n\n# 停止追踪指定文件，但该文件会保留在工作区\n$ git rm --cached [file]\n\n# 改名文件，并且将这个改名放入暂存区\n$ git mv [file-original] [file-renamed]\n</code></pre>\n<h3 id=\"4代码提交\">4、代码提交</h3>\n<pre><code class=\"language-bash\"># 提交暂存区到仓库区\n$ git commit -m [message]\n\n# 提交暂存区的指定文件到仓库区\n$ git commit [file1] [file2] ... -m [message]\n\n# 提交工作区自上次commit之后的变化，直接到仓库区\n$ git commit -a\n\n# 提交时显示所有diff信息\n$ git commit -v\n\n# 使用一次新的commit，替代上一次提交\n# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n$ git commit --amend -m [message]\n\n# 重做上一次commit，并包括指定文件的新变化\n$ git commit --amend [file1] [file2] ...\n</code></pre>\n<h3 id=\"5分支\">5、分支</h3>\n<pre><code class=\"language-bash\"># 列出所有本地分支\n$ git branch\n\n# 列出所有远程分支\n$ git branch -r\n\n# 列出所有本地分支和远程分支\n$ git branch -a\n\n# 新建一个分支，但依然停留在当前分支\n$ git branch [branch-name]\n\n# 新建一个分支，并切换到该分支\n$ git checkout -b [branch]\n\n# 新建一个分支，指向指定commit\n$ git branch [branch] [commit]\n\n# 新建一个分支，与指定的远程分支建立追踪关系\n$ git branch --track [branch] [remote-branch]\n\n# 切换到指定分支，并更新工作区\n$ git checkout [branch-name]\n\n# 切换到上一个分支\n$ git checkout -\n\n# 建立追踪关系，在现有分支与指定的远程分支之间\n$ git branch --set-upstream [branch] [remote-branch]\n\n# 合并指定分支到当前分支\n$ git merge [branch]\n\n# 选择一个commit，合并进当前分支\n$ git cherry-pick [commit]\n\n# 删除分支\n$ git branch -d [branch-name]\n\n# 删除远程分支\n$ git push origin --delete [branch-name]\n$ git branch -dr [remote/branch]\n</code></pre>\n<h3 id=\"6标签\">6、标签</h3>\n<pre><code class=\"language-bash\"># 列出所有tag\n$ git tag\n\n# 新建一个tag在当前commit\n$ git tag [tag]\n\n# 新建一个tag在指定commit\n$ git tag [tag] [commit]\n\n# 删除本地tag\n$ git tag -d [tag]\n\n# 删除远程tag\n$ git push origin :refs/tags/[tagName]\n\n# 查看tag信息\n$ git show [tag]\n\n# 提交指定tag\n$ git push [remote] [tag]\n\n# 提交所有tag\n$ git push [remote] --tags\n\n# 新建一个分支，指向某个tag\n$ git checkout -b [branch] [tag]\n</code></pre>\n<h3 id=\"7查看信息\">7、查看信息</h3>\n<pre><code class=\"language-bash\"># 显示有变更的文件\n$ git status\n\n# 显示当前分支的版本历史\n$ git log\n\n# 显示commit历史，以及每次commit发生变更的文件\n$ git log --stat\n\n# 搜索提交历史，根据关键词\n$ git log -S [keyword]\n\n# 显示某个commit之后的所有变动，每个commit占据一行\n$ git log [tag] HEAD --pretty=format:%s\n\n# 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件\n$ git log [tag] HEAD --grep feature\n\n# 显示某个文件的版本历史，包括文件改名\n$ git log --follow [file]\n$ git whatchanged [file]\n\n# 显示指定文件相关的每一次diff\n$ git log -p [file]\n\n# 显示过去5次提交\n$ git log -5 --pretty --oneline\n\n# 显示所有提交过的用户，按提交次数排序\n$ git shortlog -sn\n\n# 显示指定文件是什么人在什么时间修改过\n$ git blame [file]\n\n# 显示暂存区和工作区的差异\n$ git diff\n\n# 显示暂存区和上一个commit的差异\n$ git diff --cached [file]\n\n# 显示工作区与当前分支最新commit之间的差异\n$ git diff HEAD\n\n# 显示两次提交之间的差异\n$ git diff [first-branch]...[second-branch]\n\n# 显示今天你写了多少行代码\n$ git diff --shortstat &quot;@{0 day ago}&quot;\n\n# 显示某次提交的元数据和内容变化\n$ git show [commit]\n\n# 显示某次提交发生变化的文件\n$ git show --name-only [commit]\n\n# 显示某次提交时，某个文件的内容\n$ git show [commit]:[filename]\n\n# 显示当前分支的最近几次提交\n$ git reflog\n</code></pre>\n<h3 id=\"8远程同步\">8、远程同步</h3>\n<pre><code class=\"language-bash\"># 下载远程仓库的所有变动\n$ git fetch [remote]\n\n# 显示所有远程仓库\n$ git remote -v\n\n# 显示某个远程仓库的信息\n$ git remote show [remote]\n\n# 增加一个新的远程仓库，并命名\n$ git remote add [shortname] [url]\n\n# 取回远程仓库的变化，并与本地分支合并\n$ git pull [remote] [branch]\n\n# 上传本地指定分支到远程仓库\n$ git push [remote] [branch]\n\n# 强行推送当前分支到远程仓库，即使有冲突\n$ git push [remote] --force\n\n# 推送所有分支到远程仓库\n$ git push [remote] --all\n</code></pre>\n<h3 id=\"9撤销\">9、撤销</h3>\n<pre><code class=\"language-bash\"># 恢复暂存区的指定文件到工作区\n$ git checkout [file]\n\n# 恢复某个commit的指定文件到暂存区和工作区\n$ git checkout [commit] [file]\n\n# 恢复暂存区的所有文件到工作区\n$ git checkout .\n\n# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n$ git reset [file]\n\n# 重置暂存区与工作区，与上一次commit保持一致\n$ git reset --hard\n\n# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n$ git reset [commit]\n\n# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n$ git reset --hard [commit]\n\n# 重置当前HEAD为指定commit，但保持暂存区和工作区不变\n$ git reset --keep [commit]\n\n# 新建一个commit，用来撤销指定commit\n# 后者的所有变化都将被前者抵消，并且应用到当前分支\n$ git revert [commit]\n\n暂时将未提交的变化移除，稍后再移入\n$ git stash\n$ git stash pop\n</code></pre>\n<h3 id=\"10其他\">10、其他</h3>\n<pre><code class=\"language-bash\"># 生成一个可供发布的压缩包\n$ git archive\n</code></pre>\n', 0, NULL, NULL, '# Git 的基本使用\n\n## 一、Quickstart\n\n```bash\n# 创建 test 目录\n$ mkdir test\n# 进入test目录\n$ cd test\n# 在当前目录新建一个 Git 代码库\n$ git init\n# 创建 README.md 文件\n$ touch README.md\n# 添加 README.md 到暂存区\n$ git add README.md\n# 提交暂存区到仓库区\n$ git commit -m \"first commit\"\n# 增加一个新的远程仓库，并命名为 origin\n$ git remote add origin https://github.com/qinweizhao/test.git\n# 上传本地指定分支到远程仓库\n$ git push -u origin master\n```\n\n## 二、Git 常用命令\n\n### 1、仓库\n\n```bash\n# 在当前目录新建一个Git代码库\n$ git init\n\n# 新建一个目录，将其初始化为Git代码库\n$ git init [project-name]\n\n# 下载一个项目和它的整个代码历史\n$ git clone [url]\n```\n\n### 2、配置\n\n```bash\n# 显示当前的Git配置\n$ git config --list\n\n# 编辑Git配置文件\n$ git config -e [--global]\n\n# 设置提交代码时的用户信息\n$ git config [--global] user.name \"[name]\"\n$ git config [--global] user.email \"[email address]\"\n```\n\n### 3、增加/删除文件\n\n```bash\n# 添加指定文件到暂存区\n$ git add [file1] [file2] ...\n\n# 添加指定目录到暂存区，包括子目录\n$ git add [dir]\n\n# 添加当前目录的所有文件到暂存区\n$ git add .\n\n# 添加每个变化前，都会要求确认\n# 对于同一个文件的多处变化，可以实现分次提交\n$ git add -p\n\n# 删除工作区文件，并且将这次删除放入暂存区\n$ git rm [file1] [file2] ...\n\n# 停止追踪指定文件，但该文件会保留在工作区\n$ git rm --cached [file]\n\n# 改名文件，并且将这个改名放入暂存区\n$ git mv [file-original] [file-renamed]\n```\n\n### 4、代码提交\n\n```bash\n# 提交暂存区到仓库区\n$ git commit -m [message]\n\n# 提交暂存区的指定文件到仓库区\n$ git commit [file1] [file2] ... -m [message]\n\n# 提交工作区自上次commit之后的变化，直接到仓库区\n$ git commit -a\n\n# 提交时显示所有diff信息\n$ git commit -v\n\n# 使用一次新的commit，替代上一次提交\n# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n$ git commit --amend -m [message]\n\n# 重做上一次commit，并包括指定文件的新变化\n$ git commit --amend [file1] [file2] ...\n```\n\n### 5、分支\n\n```bash\n# 列出所有本地分支\n$ git branch\n\n# 列出所有远程分支\n$ git branch -r\n\n# 列出所有本地分支和远程分支\n$ git branch -a\n\n# 新建一个分支，但依然停留在当前分支\n$ git branch [branch-name]\n\n# 新建一个分支，并切换到该分支\n$ git checkout -b [branch]\n\n# 新建一个分支，指向指定commit\n$ git branch [branch] [commit]\n\n# 新建一个分支，与指定的远程分支建立追踪关系\n$ git branch --track [branch] [remote-branch]\n\n# 切换到指定分支，并更新工作区\n$ git checkout [branch-name]\n\n# 切换到上一个分支\n$ git checkout -\n\n# 建立追踪关系，在现有分支与指定的远程分支之间\n$ git branch --set-upstream [branch] [remote-branch]\n\n# 合并指定分支到当前分支\n$ git merge [branch]\n\n# 选择一个commit，合并进当前分支\n$ git cherry-pick [commit]\n\n# 删除分支\n$ git branch -d [branch-name]\n\n# 删除远程分支\n$ git push origin --delete [branch-name]\n$ git branch -dr [remote/branch]\n```\n\n### 6、标签\n\n```bash\n# 列出所有tag\n$ git tag\n\n# 新建一个tag在当前commit\n$ git tag [tag]\n\n# 新建一个tag在指定commit\n$ git tag [tag] [commit]\n\n# 删除本地tag\n$ git tag -d [tag]\n\n# 删除远程tag\n$ git push origin :refs/tags/[tagName]\n\n# 查看tag信息\n$ git show [tag]\n\n# 提交指定tag\n$ git push [remote] [tag]\n\n# 提交所有tag\n$ git push [remote] --tags\n\n# 新建一个分支，指向某个tag\n$ git checkout -b [branch] [tag]\n```\n\n### 7、查看信息\n\n```bash\n# 显示有变更的文件\n$ git status\n\n# 显示当前分支的版本历史\n$ git log\n\n# 显示commit历史，以及每次commit发生变更的文件\n$ git log --stat\n\n# 搜索提交历史，根据关键词\n$ git log -S [keyword]\n\n# 显示某个commit之后的所有变动，每个commit占据一行\n$ git log [tag] HEAD --pretty=format:%s\n\n# 显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件\n$ git log [tag] HEAD --grep feature\n\n# 显示某个文件的版本历史，包括文件改名\n$ git log --follow [file]\n$ git whatchanged [file]\n\n# 显示指定文件相关的每一次diff\n$ git log -p [file]\n\n# 显示过去5次提交\n$ git log -5 --pretty --oneline\n\n# 显示所有提交过的用户，按提交次数排序\n$ git shortlog -sn\n\n# 显示指定文件是什么人在什么时间修改过\n$ git blame [file]\n\n# 显示暂存区和工作区的差异\n$ git diff\n\n# 显示暂存区和上一个commit的差异\n$ git diff --cached [file]\n\n# 显示工作区与当前分支最新commit之间的差异\n$ git diff HEAD\n\n# 显示两次提交之间的差异\n$ git diff [first-branch]...[second-branch]\n\n# 显示今天你写了多少行代码\n$ git diff --shortstat \"@{0 day ago}\"\n\n# 显示某次提交的元数据和内容变化\n$ git show [commit]\n\n# 显示某次提交发生变化的文件\n$ git show --name-only [commit]\n\n# 显示某次提交时，某个文件的内容\n$ git show [commit]:[filename]\n\n# 显示当前分支的最近几次提交\n$ git reflog\n```\n\n### 8、远程同步\n\n```bash\n# 下载远程仓库的所有变动\n$ git fetch [remote]\n\n# 显示所有远程仓库\n$ git remote -v\n\n# 显示某个远程仓库的信息\n$ git remote show [remote]\n\n# 增加一个新的远程仓库，并命名\n$ git remote add [shortname] [url]\n\n# 取回远程仓库的变化，并与本地分支合并\n$ git pull [remote] [branch]\n\n# 上传本地指定分支到远程仓库\n$ git push [remote] [branch]\n\n# 强行推送当前分支到远程仓库，即使有冲突\n$ git push [remote] --force\n\n# 推送所有分支到远程仓库\n$ git push [remote] --all\n```\n\n### 9、撤销\n\n```bash\n# 恢复暂存区的指定文件到工作区\n$ git checkout [file]\n\n# 恢复某个commit的指定文件到暂存区和工作区\n$ git checkout [commit] [file]\n\n# 恢复暂存区的所有文件到工作区\n$ git checkout .\n\n# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n$ git reset [file]\n\n# 重置暂存区与工作区，与上一次commit保持一致\n$ git reset --hard\n\n# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n$ git reset [commit]\n\n# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n$ git reset --hard [commit]\n\n# 重置当前HEAD为指定commit，但保持暂存区和工作区不变\n$ git reset --keep [commit]\n\n# 新建一个commit，用来撤销指定commit\n# 后者的所有变化都将被前者抵消，并且应用到当前分支\n$ git revert [commit]\n\n暂时将未提交的变化移除，稍后再移入\n$ git stash\n$ git stash pop\n```\n\n### 10、其他\n\n```bash\n# 生成一个可供发布的压缩包\n$ git archive\n```\n', '', 'git-de-ji-ben-shi-yong', 0, 'Git 的基本使用一、常用命令git clone​从git服务器拉取代码从Git服务器拉取代码git clone https://github.com/qinweizhao/qwz-git-test.git代码下载完成后在当前文件夹中会有一个 qwz-git-test 的目录，通过 cd qwz-g', '', '', 'Git 的基本使用', 0, NULL, 197, 3587);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 7, '2021-07-22 19:05:07.827000', '2022-01-04 10:13:55.257000', b'0', '2022-01-04 10:13:55.249000', 0, '<h1 id=\"github-加速\">GitHub 加速</h1>\n<h2 id=\"一获取github官方cdn地址\">一、获取GitHub官方CDN地址</h2>\n<ul>\n<li>\n<p><a href=\"https://github.com.ipaddress.com/\">github.com</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com.ipaddress.com/assets-cdn.github.com\">assets-cdn.github.com</a></p>\n</li>\n<li>\n<p><a href=\"https://fastly.net.ipaddress.com/github.global.ssl.fastly.net\">github.global.ssl.fastly.net</a></p>\n</li>\n</ul>\n<h2 id=\"二修改-windows的-hosts-文件cwindowssystem32driversetc\">二、修改 Windows的 hosts 文件（C:\\Windows\\System32\\drivers\\etc）</h2>\n<pre><code class=\"language-hosts\">140.82.112.4    github.com\n\n185.199.108.153    assets-cdn.github.com\n185.199.109.153    assets-cdn.github.com\n185.199.110.153    assets-cdn.github.com\n185.199.111.153    assets-cdn.github.com\n\n199.232.5.194    github.global.ssl.fastly.net\n</code></pre>\n<h3 id=\"三以管理员方式打开cmd执行-ipconfig-flushdns-手动刷新系统dns缓存\">三、以管理员方式打开cmd执行 <code>ipconfig /flushdns</code> 手动刷新系统DNS缓存</h3>\n<p><img src=\"https://img.qinweizhao.com/2021/07/2021-07-22_190021.png\" alt=\"2021-07-22_190021\" /></p>\n', 0, NULL, NULL, '# GitHub 加速\n\n## 一、获取GitHub官方CDN地址\n\n- [github.com](https://github.com.ipaddress.com/)\n\n- [assets-cdn.github.com](https://github.com.ipaddress.com/assets-cdn.github.com)\n\n- [github.global.ssl.fastly.net](https://fastly.net.ipaddress.com/github.global.ssl.fastly.net)\n\n## 二、修改 Windows的 hosts 文件（C:\\Windows\\System32\\drivers\\etc）\n\n``` hosts\n140.82.112.4    github.com\n\n185.199.108.153    assets-cdn.github.com\n185.199.109.153    assets-cdn.github.com\n185.199.110.153    assets-cdn.github.com\n185.199.111.153    assets-cdn.github.com\n\n199.232.5.194    github.global.ssl.fastly.net\n```\n\n### 三、以管理员方式打开cmd执行 `ipconfig /flushdns` 手动刷新系统DNS缓存\n\n![2021-07-22_190021](https://img.qinweizhao.com/2021/07/2021-07-22_190021.png)\n', '', 'github-jia-su', 0, 'GitHub加速', '', '', ' GitHub 加速', 0, NULL, 114, 386);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 8, '2021-07-23 11:16:08.488000', '2021-11-23 18:29:24.992000', b'0', '2021-11-23 18:29:24.984000', 0, '<h1 id=\"git-的工作流程\">Git 的工作流程</h1>\n<p><img src=\"https://img.qinweizhao.com/2021/07/2021-07-23_110736.png\" alt=\"2021-07-23_110736\" /></p>\n', 0, NULL, NULL, '# Git 的工作流程\n\n![2021-07-23_110736](https://img.qinweizhao.com/2021/07/2021-07-23_110736.png)\n', '', 'gitde-gong-zuo-liu-cheng', 0, 'Git 的工作流程（图解）', '', '', ' Git 的工作流程', 0, NULL, 124, 8);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 9, '2021-07-23 15:22:54.407000', '2021-11-23 18:30:25.066000', b'0', '2021-11-23 18:30:25.056000', 0, '<h1 id=\"vmware-安装-centos-7-详细过程\">VMware 安装 CentOS 7 详细过程</h1>\n<h2 id=\"一准备\">一、准备</h2>\n<ul>\n<li><a href=\"https://www.vmware.com/cn.html\">VMware</a></li>\n<li><a href=\"http://mirrors.aliyun.com/centos/7.9.2009/isos/x86_64/CentOS-7-x86_64-DVD-2009.iso\">CentOS7</a></li>\n</ul>\n<h2 id=\"二创建虚拟机\">二、创建虚拟机</h2>\n<ol>\n<li>自定义安装可以针对性的把一些资源加强，把不需要的资源移除。避免资源的浪费。</li>\n</ol>\n<p><img src=\"https://img.qinweizhao.com/2021/07/2021-07-23_144753.png\" alt=\"2021-07-23_144753\" /></p>\n<ol start=\"2\">\n<li>复制到低版本时会出现一不兼容的现象。</li>\n</ol>\n<p><img src=\"https://img.qinweizhao.com/2021/07/2021-07-23_144915.png\" alt=\"2021-07-23_144915\" /></p>\n<ol start=\"3\">\n<li>选择稍后安装操作系统</li>\n</ol>\n<p><img src=\"https://img.qinweizhao.com/2021/07/2021-07-23_144947.png\" alt=\"2021-07-23_144947\" /></p>\n<ol start=\"4\">\n<li>操作系统的选择</li>\n</ol>\n<p><img src=\"https://img.qinweizhao.com/2021/07/2021-07-23_145010.png\" alt=\"2021-07-23_145010\" /></p>\n<ol start=\"5\">\n<li>虚拟机位置与命名</li>\n</ol>\n<p><img src=\"https://img.qinweizhao.com/2021/07/2021-07-23_145312.png\" alt=\"2021-07-23_145312\" /></p>\n<ol start=\"6\">\n<li>处理器与内存的分配</li>\n</ol>\n<p><img src=\"https://img.qinweizhao.com/2021/07/2021-07-23_145335.png\" alt=\"2021-07-23_145335\" /></p>\n<p><img src=\"https://img.qinweizhao.com/2021/07/2021-07-23_145405.png\" alt=\"2021-07-23_145405\" /></p>\n<ol start=\"7\">\n<li>\n<p>网络连接类型的选择，网络连接类型一共有桥接、NAT、仅主机和不联网四种。</p>\n<ul>\n<li>\n<p>桥接：选择桥接模式的话虚拟机和宿主机在网络上就是平级的关系，相当于连接在同一交换机上。</p>\n</li>\n<li>\n<p>NAT：NAT模式就是虚拟机要联网得先通过宿主机才能和外面进行通信。</p>\n</li>\n<li>\n<p>仅主机：虚拟机与宿主机直接连起来</p>\n</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"https://img.qinweizhao.com/2021/07/2021-07-23_145456.png\" alt=\"2021-07-23_145456\" /></p>\n<ol start=\"8\">\n<li>其余两项按虚拟机默认选项即可</li>\n</ol>\n<p><img src=\"https://img.qinweizhao.com/2021/07/2021-07-23_145525.png\" alt=\"2021-07-23_145525\" /></p>\n<p><img src=\"https://img.qinweizhao.com/2021/07/2021-07-23_145534.png\" alt=\"2021-07-23_145534\" /></p>\n<p><img src=\"https://img.qinweizhao.com/2021/07/2021-07-23_145602.png\" alt=\"2021-07-23_145602\" /></p>\n<ol start=\"9\">\n<li>磁盘容量</li>\n</ol>\n<p><img src=\"https://img.qinweizhao.com/2021/07/2021-07-23_145747.png\" alt=\"2021-07-23_145747\" /></p>\n<ol start=\"10\">\n<li>磁盘名称</li>\n</ol>\n<p><img src=\"https://img.qinweizhao.com/2021/07/2021-07-23_145925.png\" alt=\"2021-07-23_145925\" /></p>\n<ol start=\"11\">\n<li>完成</li>\n</ol>\n<p><img src=\"https://img.qinweizhao.com/2021/07/2021-07-23_151427.png\" alt=\"2021-07-23_151427\" /></p>\n<h2 id=\"三安装-centos\">三、安装 CentOS</h2>\n<ol>\n<li>连接光盘，选择编辑虚拟机设置</li>\n</ol>\n<p><img src=\"https://img.qinweizhao.com/2021/07/2021-07-23_153143.png\" alt=\"2021-07-23_153143\" /></p>\n<ol start=\"2\">\n<li>先选择CD/DVD，再选择使用ISO映像文件，最后选择浏览找到下载好的镜像文件</li>\n</ol>\n<p><img src=\"https://img.qinweizhao.com/2021/07/2021-07-23_153259.png\" alt=\"2021-07-23_153259\" /></p>\n<ol start=\"3\">\n<li>开启虚拟机</li>\n</ol>\n<p><img src=\"https://img.qinweizhao.com/2021/07/2021-07-23_153502.png\" alt=\"2021-07-23_153502\" /></p>\n<ol start=\"4\">\n<li>\n<p>安装操作系统</p>\n<ul>\n<li>\n<p>Install CentOS 7 安装CentOS 7</p>\n</li>\n<li>\n<p>Test this media &amp; install CentOS 7 测试安装文件并安装CentOS 7</p>\n</li>\n<li>\n<p>Troubleshooting 修复故障</p>\n</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"https://img.qinweizhao.com/2021/07/2021-07-23_153526.png\" alt=\"2021-07-23_153526\" /></p>\n<ol start=\"5\">\n<li>选择安装过程中使用的语言，这里选择英文、键盘选择美式键盘。点击Continue</li>\n</ol>\n<p><img src=\"https://img.qinweizhao.com/2021/07/2021-07-23_154422.png\" alt=\"2021-07-23_154422\" /></p>\n<ol start=\"6\">\n<li>设置时间</li>\n</ol>\n<p><img src=\"https://img.qinweizhao.com/2021/07/2021-07-23_154458.png\" alt=\"2021-07-23_154458\" /></p>\n<p><img src=\"https://img.qinweizhao.com/2021/07/2021-07-23_154530.png\" alt=\"2021-07-23_154530\" /></p>\n<ol start=\"7\">\n<li>选择需要安装的软件</li>\n</ol>\n<p><img src=\"https://img.qinweizhao.com/2021/07/2021-07-23_154725.png\" alt=\"2021-07-23_154725\" /></p>\n<p><img src=\"https://img.qinweizhao.com/2021/07/2021-07-23_155013.png\" alt=\"2021-07-23_155013\" /></p>\n<ol start=\"8\">\n<li>选择安装位置，在这里可以进行磁盘划分。</li>\n</ol>\n<p><img src=\"https://img.qinweizhao.com/2021/07/2021-07-23_164236.png\" alt=\"2021-07-23_164236\" /></p>\n<p><img src=\"https://img.qinweizhao.com/2021/07/2021-07-23_155050.png\" alt=\"2021-07-23_155050\" /></p>\n<p><img src=\"https://img.qinweizhao.com/2021/07/2021-07-23_160432.png\" alt=\"2021-07-23_160432\" /></p>\n<p><img src=\"https://img.qinweizhao.com/2021/07/2021-07-23_160440.png\" alt=\"2021-07-23_160440\" /></p>\n<ol start=\"9\">\n<li>设置主机名与网卡信息</li>\n</ol>\n<p><img src=\"https://img.qinweizhao.com/2021/07/2021-07-23_160537.png\" alt=\"2021-07-23_160537\" /></p>\n<p><img src=\"https://img.qinweizhao.com/2021/07/2021-07-23_160704.png\" alt=\"2021-07-23_160704\" /></p>\n<ol start=\"10\">\n<li>最后选择Begin Installation(开始安装)</li>\n</ol>\n<p><img src=\"https://img.qinweizhao.com/2021/07/2021-07-23_160741.png\" alt=\"2021-07-23_160741\" /></p>\n<ol start=\"11\">\n<li>设置root密码</li>\n</ol>\n<p><img src=\"https://img.qinweizhao.com/2021/07/2021-07-23_160840.png\" alt=\"2021-07-23_160840\" /></p>\n<p><img src=\"https://img.qinweizhao.com/2021/07/2021-07-23_160805.png\" alt=\"2021-07-23_160805\" /></p>\n<ol start=\"12\">\n<li>点击USER CREATION 创建管理员用户</li>\n</ol>\n<p><img src=\"https://img.qinweizhao.com/2021/07/2021-07-23_161247.png\" alt=\"2021-07-23_161247\" /></p>\n<ol start=\"13\">\n<li>输入用户名密码后点击Done</li>\n</ol>\n<p><img src=\"https://img.qinweizhao.com/2021/07/2021-07-23_161333.png\" alt=\"2021-07-23_161333\" /></p>\n<ol start=\"14\">\n<li>等待系统安装完毕重启系统即可</li>\n</ol>\n<p><img src=\"https://img.qinweizhao.com/2021/07/2021-07-23_162618.png\" alt=\"2021-07-23_162618\" /></p>\n', 0, NULL, NULL, '# VMware 安装 CentOS 7 详细过程\n\n## 一、准备\n\n- [VMware](https://www.vmware.com/cn.html)\n- [CentOS7](http://mirrors.aliyun.com/centos/7.9.2009/isos/x86_64/CentOS-7-x86_64-DVD-2009.iso)\n\n## 二、创建虚拟机\n\n1. 自定义安装可以针对性的把一些资源加强，把不需要的资源移除。避免资源的浪费。\n\n![2021-07-23_144753](https://img.qinweizhao.com/2021/07/2021-07-23_144753.png)\n\n2. 复制到低版本时会出现一不兼容的现象。\n\n![2021-07-23_144915](https://img.qinweizhao.com/2021/07/2021-07-23_144915.png)\n\n3. 选择稍后安装操作系统\n\n![2021-07-23_144947](https://img.qinweizhao.com/2021/07/2021-07-23_144947.png)\n\n4. 操作系统的选择\n\n![2021-07-23_145010](https://img.qinweizhao.com/2021/07/2021-07-23_145010.png)\n\n5. 虚拟机位置与命名\n\n![2021-07-23_145312](https://img.qinweizhao.com/2021/07/2021-07-23_145312.png)\n\n6. 处理器与内存的分配\n\n![2021-07-23_145335](https://img.qinweizhao.com/2021/07/2021-07-23_145335.png)\n\n![2021-07-23_145405](https://img.qinweizhao.com/2021/07/2021-07-23_145405.png)\n\n7. 网络连接类型的选择，网络连接类型一共有桥接、NAT、仅主机和不联网四种。\n\n   - 桥接：选择桥接模式的话虚拟机和宿主机在网络上就是平级的关系，相当于连接在同一交换机上。\n\n   - NAT：NAT模式就是虚拟机要联网得先通过宿主机才能和外面进行通信。\n\n   - 仅主机：虚拟机与宿主机直接连起来\n\n![2021-07-23_145456](https://img.qinweizhao.com/2021/07/2021-07-23_145456.png)\n\n8. 其余两项按虚拟机默认选项即可\n\n![2021-07-23_145525](https://img.qinweizhao.com/2021/07/2021-07-23_145525.png)\n\n![2021-07-23_145534](https://img.qinweizhao.com/2021/07/2021-07-23_145534.png)\n\n![2021-07-23_145602](https://img.qinweizhao.com/2021/07/2021-07-23_145602.png)\n\n9. 磁盘容量\n\n![2021-07-23_145747](https://img.qinweizhao.com/2021/07/2021-07-23_145747.png)\n\n10. 磁盘名称\n\n![2021-07-23_145925](https://img.qinweizhao.com/2021/07/2021-07-23_145925.png)\n\n11. 完成\n\n![2021-07-23_151427](https://img.qinweizhao.com/2021/07/2021-07-23_151427.png)\n\n## 三、安装 CentOS\n\n1. 连接光盘，选择编辑虚拟机设置\n\n![2021-07-23_153143](https://img.qinweizhao.com/2021/07/2021-07-23_153143.png)\n\n2. 先选择CD/DVD，再选择使用ISO映像文件，最后选择浏览找到下载好的镜像文件\n\n![2021-07-23_153259](https://img.qinweizhao.com/2021/07/2021-07-23_153259.png)\n\n3. 开启虚拟机\n\n![2021-07-23_153502](https://img.qinweizhao.com/2021/07/2021-07-23_153502.png)\n\n4. 安装操作系统\n\n   - Install CentOS 7 安装CentOS 7\n\n   - Test this media & install CentOS 7 测试安装文件并安装CentOS 7\n\n   - Troubleshooting 修复故障\n\n![2021-07-23_153526](https://img.qinweizhao.com/2021/07/2021-07-23_153526.png)\n\n5. 选择安装过程中使用的语言，这里选择英文、键盘选择美式键盘。点击Continue\n\n![2021-07-23_154422](https://img.qinweizhao.com/2021/07/2021-07-23_154422.png)\n\n6. 设置时间\n\n![2021-07-23_154458](https://img.qinweizhao.com/2021/07/2021-07-23_154458.png)\n\n![2021-07-23_154530](https://img.qinweizhao.com/2021/07/2021-07-23_154530.png)\n\n7. 选择需要安装的软件\n\n![2021-07-23_154725](https://img.qinweizhao.com/2021/07/2021-07-23_154725.png)\n\n![2021-07-23_155013](https://img.qinweizhao.com/2021/07/2021-07-23_155013.png)\n\n8. 选择安装位置，在这里可以进行磁盘划分。\n\n![2021-07-23_164236](https://img.qinweizhao.com/2021/07/2021-07-23_164236.png)\n\n![2021-07-23_155050](https://img.qinweizhao.com/2021/07/2021-07-23_155050.png)\n\n\n\n![2021-07-23_160432](https://img.qinweizhao.com/2021/07/2021-07-23_160432.png)\n\n![2021-07-23_160440](https://img.qinweizhao.com/2021/07/2021-07-23_160440.png)\n\n9. 设置主机名与网卡信息\n\n![2021-07-23_160537](https://img.qinweizhao.com/2021/07/2021-07-23_160537.png)\n\n![2021-07-23_160704](https://img.qinweizhao.com/2021/07/2021-07-23_160704.png)\n\n10. 最后选择Begin Installation(开始安装)\n\n![2021-07-23_160741](https://img.qinweizhao.com/2021/07/2021-07-23_160741.png)\n\n11. 设置root密码\n\n![2021-07-23_160840](https://img.qinweizhao.com/2021/07/2021-07-23_160840.png)\n\n![2021-07-23_160805](https://img.qinweizhao.com/2021/07/2021-07-23_160805.png)\n\n12. 点击USER CREATION 创建管理员用户\n\n![2021-07-23_161247](https://img.qinweizhao.com/2021/07/2021-07-23_161247.png)\n\n13. 输入用户名密码后点击Done\n\n![2021-07-23_161333](https://img.qinweizhao.com/2021/07/2021-07-23_161333.png)\n\n14. 等待系统安装完毕重启系统即可\n\n![2021-07-23_162618](https://img.qinweizhao.com/2021/07/2021-07-23_162618.png)\n\n', '', 'vmware-an-zhuang-centos7', 0, 'VMware安装Centos7详细过程一、准备VMwareCentOS7二、创建虚拟机自定义安装可以针对性的把一些资源加强，把不需要的资源移除。避免资源的浪费。复制到低版本时会出现一不兼容的现象。选择稍后安装操作系统操作系统的选择虚拟机位置与命名处理器与内存的分配网络连接类型的选择，网络连接类型一共', '', '', 'VMware 安装 CentOS 7', 0, NULL, 124, 614);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 10, '2021-07-23 18:38:41.273000', '2021-11-23 18:30:06.109000', b'0', '2021-11-23 18:30:06.101000', 0, '<h1 id=\"centos-7-通过-yum-安装-mysql-8\">CentOS 7 通过 yum 安装 MySQL 8</h1>\n<h2 id=\"一官网查看最新的安装包\">一、官网查看最新的安装包</h2>\n<p>[MySQL Yum Repository](<a href=\"https://dev.mysql.com/downloads/repo/yum/\">MySQL :: Download MySQL Yum Repository</a>)</p>\n<h2 id=\"二下载-mysql-源安装包\">二、下载 MySQL 源安装包</h2>\n<h3 id=\"1获取-rpm-包\">1、获取 rpm 包</h3>\n<pre><code class=\"language-bash\">wget https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm\n</code></pre>\n<h3 id=\"2安装-mysql-源\">2、安装 MySQL 源</h3>\n<pre><code class=\"language-bash\">yum -y install mysql80-community-release-el7-3.noarch.rpm\n</code></pre>\n<h3 id=\"3查看效果\">3、查看效果</h3>\n<pre><code class=\"language-bash\">yum repolist enabled | grep mysql.*\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/09/2021-09-11_235114.png\" alt=\"2021-09-11_235114\" /></p>\n<h2 id=\"三安装-mysql-服务器\">三、安装 MySQL 服务器</h2>\n<pre><code class=\"language-bash\">yum install mysql-community-server\n</code></pre>\n<h2 id=\"四启动-mysql-服务\">四、启动 MySQL 服务</h2>\n<pre><code class=\"language-bash\">systemctl start  mysqld.service\n</code></pre>\n<pre><code class=\"language-bash\">systemctl status mysqld.service\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/09/2021-09-11_235229.png\" alt=\"2021-09-11_235229\" /></p>\n<h2 id=\"五查看初始化密码\">五、查看初始化密码</h2>\n<pre><code class=\"language-gradle\">grep &quot;password&quot; /var/log/mysqld.log\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/09/2021-09-11_235335.png\" alt=\"2021-09-11_235335\" /></p>\n<h2 id=\"六修改-mysql-密码\">六、修改 MySQL 密码</h2>\n<pre><code class=\"language-sql\">ALTER USER \'root\'@\'localhost\' IDENTIFIED BY \'你的密码\';\n</code></pre>\n<p>注：可能如果密码过于简单则会报错（1819）：新密码不符合当前策略；</p>\n<p><img src=\"https://img.qinweizhao.com/2021/09/2021-09-12_005621.png\" alt=\"2021-09-12_005621\" /></p>\n<p>修改过密码后如果嫌复杂可以设置简单密码（可选）：</p>\n<h3 id=\"1查看-mysql-初始的密码策略\">1、查看 MySQL 初始的密码策略</h3>\n<pre><code class=\"language-sql\">SHOW VARIABLES LIKE \'validate_password%\'; \n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/09/2021-09-12_011809.png\" alt=\"2021-09-12_011809\" /></p>\n<h3 id=\"2首先需要设置密码的验证强度等级设置-validate-password-policy-的全局参数为-low-即可\">2、首先需要设置密码的验证强度等级，设置 validate_password_policy 的全局参数为 LOW 即可</h3>\n<pre><code class=\"language-sql\">set global validate_password.policy=LOW; \n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/09/2021-09-12_011841.png\" alt=\"2021-09-12_011841\" /></p>\n<h3 id=\"3当前密码长度为-8-如果不介意的话就不用修改了按照通用的来讲设置为-6-位的密码设置-validate-password-length-的全局参数为-6-即可\">3、当前密码长度为 8 ，如果不介意的话就不用修改了，按照通用的来讲，设置为 6 位的密码，设置 validate_password_length 的全局参数为 6 即可</h3>\n<pre><code class=\"language-sql\">set global validate_password.length=6; \n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/09/2021-09-12_011847.png\" alt=\"2021-09-12_011847\" /></p>\n<h3 id=\"4现在可以为-mysql-设置简单密码了只要满足六位的长度即可\">4、现在可以为 mysql 设置简单密码了，只要满足六位的长度即可</h3>\n<pre><code class=\"language-sql\">ALTER USER \'root\'@\'localhost\' IDENTIFIED BY \'112121\'; \n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/09/2021-09-12_011854.png\" alt=\"2021-09-12_011854\" /></p>\n<p>注：在默认密码的长度最小值为 4 ，由 大/小写字母各一个 + 阿拉伯数字一个 + 特殊字符一个，<br />\n只要设置密码的长度小于 3 ，都将自动设值为 4 。</p>\n<p><img src=\"https://img.qinweizhao.com/2021/09/2021-09-12_012144.png\" alt=\"2021-09-12_012144\" /></p>\n<p>关于 mysql 密码策略相关参数；<br />\n1）、validate_password.length  固定密码的总长度；<br />\n2）、validate_password.dictionary_file 指定密码验证的文件路径；<br />\n3）、validate_password.mixed_case_count  整个密码中至少要包含大/小写字母的总个数；<br />\n4）、validate_password.number_count  整个密码中至少要包含阿拉伯数字的个数；<br />\n5）、validate_password.policy 指定密码的强度验证等级，默认为 MEDIUM；<br />\n关于 validate_password.policy 的取值：<br />\n0/LOW：只验证长度；<br />\n1/MEDIUM：验证长度、数字、大小写、特殊字符；<br />\n2/STRONG：验证长度、数字、大小写、特殊字符、字典文件；<br />\n6）、validate_password_special_char_count 整个密码中至少要包含特殊字符的个数；</p>\n<h2 id=\"六数据库授权\">六、数据库授权</h2>\n<pre><code class=\"language-sql\">USE mysql;\nupdate user set host=\'%\' where user=\'root\';\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/09/2021-09-12_003311.png\" alt=\"2021-09-12_003311\" /></p>\n<h2 id=\"七授权其他用户可选\">七、授权其他用户(可选)</h2>\n<h3 id=\"1创建新用户\">1、创建新用户</h3>\n<pre><code class=\"language-sql\">CREATE USER \'用户名\'@\'%\' IDENTIFIED BY \'123321\';\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/09/2021-09-12_015218.png\" alt=\"2021-09-12_015218\" /></p>\n<h3 id=\"2授权\">2、授权</h3>\n<pre><code class=\"language-sql\">update user set host=\'%\' where user=\'用户名\';\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/09/2021-09-12_015225.png\" alt=\"2021-09-12_015225\" /></p>\n<h2 id=\"八刷新权限\">八、刷新权限</h2>\n<pre><code class=\"language-sql\">FLUSH PRIVILEGES;\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/09/2021-09-12_003503.png\" alt=\"2021-09-12_003503\" /></p>\n<h2 id=\"九防火墙打开3306端口\">九、防火墙打开3306端口</h2>\n<pre><code class=\"language-bash\"># 执行 exit 退出 MySQL\nfirewall-cmd --zone=public --add-port=3306/tcp --permanent\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/09/2021-09-12_004529.png\" alt=\"2021-09-12_004529\" /></p>\n<h2 id=\"十重启防火墙\">十、重启防火墙</h2>\n<pre><code class=\"language-bash\">firewall-cmd --reload\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/09/2021-09-12_004540.png\" alt=\"2021-09-12_004540\" /></p>\n', 0, NULL, NULL, '# CentOS 7 通过 yum 安装 MySQL 8\n\n## 一、官网查看最新的安装包\n\n[MySQL Yum Repository]([MySQL :: Download MySQL Yum Repository](https://dev.mysql.com/downloads/repo/yum/))\n\n## 二、下载 MySQL 源安装包\n\n### 1、获取 rpm 包\n\n``` bash\nwget https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm\n```\n\n### 2、安装 MySQL 源\n\n```bash\nyum -y install mysql80-community-release-el7-3.noarch.rpm\n```\n\n### 3、查看效果\n\n```bash\nyum repolist enabled | grep mysql.*\n```\n\n![2021-09-11_235114](https://img.qinweizhao.com/2021/09/2021-09-11_235114.png)\n\n## 三、安装 MySQL 服务器\n\n``` bash\nyum install mysql-community-server\n```\n\n## 四、启动 MySQL 服务\n\n```bash\nsystemctl start  mysqld.service\n```\n\n```bash\nsystemctl status mysqld.service\n```\n\n![2021-09-11_235229](https://img.qinweizhao.com/2021/09/2021-09-11_235229.png)\n\n## 五、查看初始化密码\n\n```gradle\ngrep \"password\" /var/log/mysqld.log\n```\n\n![2021-09-11_235335](https://img.qinweizhao.com/2021/09/2021-09-11_235335.png)\n\n## 六、修改 MySQL 密码\n\n``` sql\nALTER USER \'root\'@\'localhost\' IDENTIFIED BY \'你的密码\';\n```\n\n注：可能如果密码过于简单则会报错（1819）：新密码不符合当前策略；\n\n![2021-09-12_005621](https://img.qinweizhao.com/2021/09/2021-09-12_005621.png)\n\n修改过密码后如果嫌复杂可以设置简单密码（可选）：\n\n### 1、查看 MySQL 初始的密码策略\n\n```sql\nSHOW VARIABLES LIKE \'validate_password%\'; \n```\n\n![2021-09-12_011809](https://img.qinweizhao.com/2021/09/2021-09-12_011809.png)\n\n### 2、首先需要设置密码的验证强度等级，设置 validate_password_policy 的全局参数为 LOW 即可\n\n```sql\nset global validate_password.policy=LOW; \n```\n\n![2021-09-12_011841](https://img.qinweizhao.com/2021/09/2021-09-12_011841.png)\n\n### 3、当前密码长度为 8 ，如果不介意的话就不用修改了，按照通用的来讲，设置为 6 位的密码，设置 validate_password_length 的全局参数为 6 即可\n\n```sql\nset global validate_password.length=6; \n```\n\n![2021-09-12_011847](https://img.qinweizhao.com/2021/09/2021-09-12_011847.png)\n\n### 4、现在可以为 mysql 设置简单密码了，只要满足六位的长度即可\n\n```sql\nALTER USER \'root\'@\'localhost\' IDENTIFIED BY \'112121\'; \n```\n\n![2021-09-12_011854](https://img.qinweizhao.com/2021/09/2021-09-12_011854.png)\n\n注：在默认密码的长度最小值为 4 ，由 大/小写字母各一个 + 阿拉伯数字一个 + 特殊字符一个，\n只要设置密码的长度小于 3 ，都将自动设值为 4 。\n\n![2021-09-12_012144](https://img.qinweizhao.com/2021/09/2021-09-12_012144.png)\n\n关于 mysql 密码策略相关参数；\n1）、validate_password.length  固定密码的总长度；\n2）、validate_password.dictionary_file 指定密码验证的文件路径；\n3）、validate_password.mixed_case_count  整个密码中至少要包含大/小写字母的总个数；\n4）、validate_password.number_count  整个密码中至少要包含阿拉伯数字的个数；\n5）、validate_password.policy 指定密码的强度验证等级，默认为 MEDIUM；\n关于 validate_password.policy 的取值：\n0/LOW：只验证长度；\n1/MEDIUM：验证长度、数字、大小写、特殊字符；\n2/STRONG：验证长度、数字、大小写、特殊字符、字典文件；\n6）、validate_password_special_char_count 整个密码中至少要包含特殊字符的个数；\n\n## 六、数据库授权\n\n```sql\nUSE mysql;\nupdate user set host=\'%\' where user=\'root\';\n```\n\n![2021-09-12_003311](https://img.qinweizhao.com/2021/09/2021-09-12_003311.png)\n\n## 七、授权其他用户(可选)\n\n### 1、创建新用户\n\n```sql\nCREATE USER \'用户名\'@\'%\' IDENTIFIED BY \'123321\';\n```\n\n![2021-09-12_015218](https://img.qinweizhao.com/2021/09/2021-09-12_015218.png)\n\n### 2、授权\n\n```sql\nupdate user set host=\'%\' where user=\'用户名\';\n```\n\n![2021-09-12_015225](https://img.qinweizhao.com/2021/09/2021-09-12_015225.png)\n\n## 八、刷新权限\n\n```sql\nFLUSH PRIVILEGES;\n```\n\n![2021-09-12_003503](https://img.qinweizhao.com/2021/09/2021-09-12_003503.png)\n\n## 九、防火墙打开3306端口\n\n```bash\n# 执行 exit 退出 MySQL\nfirewall-cmd --zone=public --add-port=3306/tcp --permanent\n```\n\n![2021-09-12_004529](https://img.qinweizhao.com/2021/09/2021-09-12_004529.png)\n\n## 十、重启防火墙\n\n```bash\nfirewall-cmd --reload\n```\n\n![2021-09-12_004540](https://img.qinweizhao.com/2021/09/2021-09-12_004540.png)\n', '', 'centos7an-zhuang-maven', 0, 'Centos7 安装Maven一、下载wget https://mirrors.sonic.net/apache/maven/maven-3/3.8.1/binaries/apache-maven-3.8.1-bin.tar.gz二、解压tar -zxvf apache-maven-3.8.1-bi', '', '', ' CentOS 7 安装 Maven', 0, NULL, 162, 1662);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 11, '2021-07-26 17:00:48.022000', '2021-11-23 18:30:16.188000', b'0', '2021-11-23 18:30:16.179000', 0, '<h1 id=\"centos-7-命令行和图形界面的相互切换\">CentOS 7 命令行和图形界面的相互切换</h1>\n<h2 id=\"一快捷键切换\">一、快捷键切换</h2>\n<p>图形界面——&gt;命令行：</p>\n<p><kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>F1</kbd></p>\n<p>图形界面&lt;——命令行：</p>\n<p><kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>F2</kbd></p>\n<h2 id=\"二命令切换\">二、命令切换</h2>\n<p>图形界面——&gt;命令行：</p>\n<pre><code class=\"language-bash\">init 3\n</code></pre>\n<p>图形界面&lt;——命令行：</p>\n<pre><code class=\"language-bash\">init 5\n</code></pre>\n<h2 id=\"三修改默认启动模式\">三、修改默认启动模式</h2>\n<h3 id=\"1查看系统的启动模式\">1、查看系统的启动模式</h3>\n<pre><code class=\"language-bash\">vi /etc/inittab\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/07/2021-07-26_165209.png\" alt=\"2021-07-26_165209\" /></p>\n<p>图中1所示：系统的2种启动模式：</p>\n<ul>\n<li>\n<p>multi-user.target: analogous to runlevel 3 #命令行模式</p>\n</li>\n<li>\n<p>graphical.target: analogous to runlevel 5  #图形模式</p>\n</li>\n</ul>\n<h3 id=\"2设置默认启动模式\">2.设置默认启动模式</h3>\n<p>上图中2所示：使用命令</p>\n<pre><code class=\"language-bash\">systemctl get-default multi-user.target\n#or\nsystemctl get-default graphical.target\n</code></pre>\n<h4 id=\"3重启\">3.重启</h4>\n<pre><code class=\"language-bash\">reboot\n</code></pre>\n<h1 id=\"centos-7-命令行和图形界面的相互切换-1\">CentOS 7 命令行和图形界面的相互切换</h1>\n<h2 id=\"一快捷键切换-1\">一、快捷键切换</h2>\n<p>图形界面——&gt;命令行：</p>\n<p><kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>F1</kbd></p>\n<p>图形界面&lt;——命令行：</p>\n<p><kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>F2</kbd></p>\n<h2 id=\"二命令切换-1\">二、命令切换</h2>\n<p>图形界面——&gt;命令行：</p>\n<pre><code class=\"language-bash\">init 3\n</code></pre>\n<p>图形界面&lt;——命令行：</p>\n<pre><code class=\"language-bash\">init 5\n</code></pre>\n<h2 id=\"三修改默认启动模式-1\">三、修改默认启动模式</h2>\n<h3 id=\"1查看系统的启动模式-1\">1、查看系统的启动模式</h3>\n<pre><code class=\"language-bash\">vi /etc/inittab\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/07/2021-07-26_165209.png\" alt=\"2021-07-26_165209\" /></p>\n<p>图中1所示：系统的2种启动模式：</p>\n<ul>\n<li>\n<p>multi-user.target: analogous to runlevel 3 #命令行模式</p>\n</li>\n<li>\n<p>graphical.target: analogous to runlevel 5  #图形模式</p>\n</li>\n</ul>\n<h3 id=\"2设置默认启动模式-1\">2.设置默认启动模式</h3>\n<p>上图中2所示：使用命令</p>\n<pre><code class=\"language-bash\">systemctl get-default multi-user.target\n#or\nsystemctl get-default graphical.target\n</code></pre>\n<h4 id=\"3重启-1\">3.重启</h4>\n<pre><code class=\"language-bash\">reboot\n</code></pre>\n', 0, NULL, NULL, '# CentOS 7 命令行和图形界面的相互切换\n\n## 一、快捷键切换\n\n图形界面——>命令行：\n\n<kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>F1</kbd>\n\n图形界面<——命令行：\n\n<kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>F2</kbd>\n\n## 二、命令切换\n\n图形界面——>命令行：\n\n```bash\ninit 3\n```\n\n图形界面<——命令行：\n\n```bash\ninit 5\n```\n\n## 三、修改默认启动模式\n\n### 1、查看系统的启动模式\n\n```bash\nvi /etc/inittab\n```\n\n![2021-07-26_165209](https://img.qinweizhao.com/2021/07/2021-07-26_165209.png)\n\n图中1所示：系统的2种启动模式：\n\n- multi-user.target: analogous to runlevel 3 #命令行模式\n\n- graphical.target: analogous to runlevel 5  #图形模式\n\n### 2.设置默认启动模式\n\n上图中2所示：使用命令\n\n```bash\nsystemctl get-default multi-user.target\n#or\nsystemctl get-default graphical.target\n```\n\n#### 3.重启\n\n```bash\nreboot\n```\n\n# CentOS 7 命令行和图形界面的相互切换\n\n## 一、快捷键切换\n\n图形界面——>命令行：\n\n<kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>F1</kbd>\n\n图形界面<——命令行：\n\n<kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>F2</kbd>\n\n## 二、命令切换\n\n图形界面——>命令行：\n\n```bash\ninit 3\n```\n\n图形界面<——命令行：\n\n```bash\ninit 5\n```\n\n## 三、修改默认启动模式\n\n### 1、查看系统的启动模式\n\n```bash\nvi /etc/inittab\n```\n\n![2021-07-26_165209](https://img.qinweizhao.com/2021/07/2021-07-26_165209.png)\n\n图中1所示：系统的2种启动模式：\n\n- multi-user.target: analogous to runlevel 3 #命令行模式\n\n- graphical.target: analogous to runlevel 5  #图形模式\n\n### 2.设置默认启动模式\n\n上图中2所示：使用命令\n\n```bash\nsystemctl get-default multi-user.target\n#or\nsystemctl get-default graphical.target\n```\n\n#### 3.重启\n\n```bash\nreboot\n```\n\n', '', 'centos7-ming-ling-xing-he-tu-xing-jie-mian-de-xiang-hu-qie-huan', 0, 'Centos7命令行和图形界面的相互切换一、快捷键切换图形界面——&gt;命令行：Ctrl+Alt+F1图形界面&lt;——命令行：Ctrl+Alt+F2二、命令切换图形界面——&gt;命令行：init 3图形界面&lt;——命令行：init 5三、修改默认启动模式1、查看系统的启动模式vi /et', '', '', 'CentOS 7 命令行和图形界面的相互切换', 0, NULL, 96, 730);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 12, '2021-07-30 00:36:42.960000', '2021-11-25 15:35:11.129000', b'0', '2021-11-25 15:35:11.122000', 0, '<h1 id=\"list-集合去除-null-元素\">List 集合去除 null 元素</h1>\n<h2 id=\"一使用for循环处理集合\">一、使用for循环处理集合</h2>\n<pre><code class=\"language-java\">public static List&lt;Object&gt; removeNull(List&lt;Object&gt; oldList) {\n        oldList.removeAll(Collections.singleton(null));\n        return oldList;\n}\n</code></pre>\n<h2 id=\"二使用collections工具类\">二、使用Collections工具类</h2>\n<pre><code class=\"language-java\">public static List&lt;Object&gt; removeNulls(List&lt;Object&gt; oldList) {\n        // 临时集合\n        List&lt;Object&gt; listTemp = new ArrayList&lt;&gt;();\n        for (Object t : oldList) {\n            // 保存不为空的元素\n            if (t != null) {\n                listTemp.add(t);\n            }\n        }\n        return listTemp;\n}\n</code></pre>\n<h2 id=\"三新增一个list集合\">三、新增一个List集合</h2>\n<pre><code class=\"language-java\">public static List&lt;Object&gt; removeNull(List&lt;Object&gt; oldList) {\n        List&lt;Object&gt; nullList = new ArrayList&lt;&gt;();\n        nullList.add(null);\n        oldList.removeAll(nullList);\n        return oldList;\n}\n</code></pre>\n', 0, NULL, NULL, '# List 集合去除 null 元素\n\n## 一、使用for循环处理集合\n\n```java\npublic static List<Object> removeNull(List<Object> oldList) {\n        oldList.removeAll(Collections.singleton(null));\n        return oldList;\n}\n```\n\n## 二、使用Collections工具类\n\n```java\npublic static List<Object> removeNulls(List<Object> oldList) {\n        // 临时集合\n        List<Object> listTemp = new ArrayList<>();\n        for (Object t : oldList) {\n            // 保存不为空的元素\n            if (t != null) {\n                listTemp.add(t);\n            }\n        }\n        return listTemp;\n}\n```\n\n## 三、新增一个List集合\n\n```java\npublic static List<Object> removeNull(List<Object> oldList) {\n        List<Object> nullList = new ArrayList<>();\n        nullList.add(null);\n        oldList.removeAll(nullList);\n        return oldList;\n}\n```\n', '', 'listji-he-qu-chu-nullyuan-su', 0, 'List 集合去除 null 元素一、使用for循环处理集合。public static List&lt;Object&gt; removeNull(List&lt;Object&gt; oldList) {        oldList.removeAll(Collections.singleto', '', '', 'List 集合去除 null 元素', 0, NULL, 98, 569);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 13, '2021-07-30 11:11:44.974000', '2021-11-25 15:35:19.609000', b'0', '2021-11-25 15:35:19.602000', 0, '<h1 id=\"mysql-查询information-schema信息\">MySQL 查询information_schema信息</h1>\n<pre><code class=\"language-sql\"># 获取表\nSELECT * FROM information_schema.TABLES WHERE TABLE_SCHEMA = (SELECT DATABASE());\n\n# 获取字段\nSELECT * FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = (SELECT DATABASE()) AND TABLE_NAME = &quot;table_name&quot;;\n\n# 获取列以 ，分割\nSELECT GROUP_CONCAT(COLUMN_NAME SEPARATOR &quot;,&quot;) FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = \'db_name\' AND TABLE_NAME = \'table_name\'\n</code></pre>\n', 0, NULL, NULL, '# MySQL 查询information_schema信息\n\n```sql\n# 获取表\nSELECT * FROM information_schema.TABLES WHERE TABLE_SCHEMA = (SELECT DATABASE());\n\n# 获取字段\nSELECT * FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = (SELECT DATABASE()) AND TABLE_NAME = \"table_name\";\n\n# 获取列以 ，分割\nSELECT GROUP_CONCAT(COLUMN_NAME SEPARATOR \",\") FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = \'db_name\' AND TABLE_NAME = \'table_name\'\n```\n', '', 'mysqlcha-xun-biao-de-suo-you-lie-ming', 0, 'MySQL 查询表的所有列名# 获取表SELECT* FROMinformation_schema.TABLES WHERETABLE_SCHEMA = (SELECT DATABASE());# 获取字段SELECT* FROMinformation_schema.COLUMNS WHERE TA', '', '', 'MySQL 查询表的所有列名', 0, NULL, 84, 363);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 14, '2021-08-03 15:22:23.924000', '2021-11-25 15:35:29.843000', b'0', '2021-11-25 15:35:29.836000', 0, '<h1 id=\"spring-security-的执行流程\">Spring Security 的执行流程</h1>\n<h2 id=\"一spring-security执行流程图\">一、Spring Security执行流程图</h2>\n<p><img src=\"https://img.qinweizhao.com/2021/08/2021-08-03_151308.png\" alt=\"2021-08-03_151308\" /></p>\n<h2 id=\"二spring-security-采用的是责任链的设计模式它有一条很长的过滤器链过滤器链的各个过滤器说明\">二、Spring Security 采用的是责任链的设计模式，它有一条很长的过滤器链。过滤器链的各个过滤器说明:</h2>\n<p><img src=\"https://img.qinweizhao.com/2021/08/2021-08-03_152037.png\" alt=\"2021-08-03_152037\" /></p>\n<ol>\n<li>\n<p>WebAsyncManagerIntegrationFilter：将 Security 上下文与 Spring Web 中用于处理异步请求映射的 WebAsyncManager 进行集成。</p>\n</li>\n<li>\n<p>SecurityContextPersistenceFilter：在每次请求处理之前将该请求相关的安全上下文信息加载到 SecurityContextHolder 中，然后在该次请求处理完成之后，将 SecurityContextHolder 中关于这次请求的信息存储到一个“仓储”中，然后将 SecurityContextHolder 中的信息清除，例如在Session中维护一个用户的安全信息就是这个过滤器处理的。</p>\n</li>\n<li>\n<p>HeaderWriterFilter：用于将头信息加入响应中。</p>\n</li>\n<li>\n<p>CsrfFilter：用于处理跨站请求伪造。</p>\n</li>\n<li>\n<p>LogoutFilter：用于处理退出登录。</p>\n</li>\n<li>\n<p>UsernamePasswordAuthenticationFilter：用于处理基于表单的登录请求，从表单中获取用户名和密码。默认情况下处理来自 /login 的请求。从表单中获取用户名和密码时，默认使用的表单 name 值为 username 和 password，这两个值可以通过设置这个过滤器的usernameParameter 和 passwordParameter 两个参数的值进行修改。</p>\n</li>\n<li>\n<p>DefaultLoginPageGeneratingFilter：如果没有配置登录页面，那系统初始化时就会配置这个过滤器，并且用于在需要进行登录时生成一个登录表单页面。</p>\n</li>\n<li>\n<p>BasicAuthenticationFilter：检测和处理 http basic 认证。</p>\n</li>\n<li>\n<p>RequestCacheAwareFilter：用来处理请求的缓存。</p>\n</li>\n<li>\n<p>SecurityContextHolderAwareRequestFilter：主要是包装请求对象request。</p>\n</li>\n<li>\n<p>AnonymousAuthenticationFilter：检测 SecurityContextHolder 中是否存在 Authentication 对象，如果不存在为其提供一个匿名 Authentication。</p>\n</li>\n<li>\n<p>SessionManagementFilter：管理 session 的过滤器。</p>\n</li>\n<li>\n<p>ExceptionTranslationFilter：处理 AccessDeniedException 和 AuthenticationException 异常。</p>\n</li>\n<li>\n<p>FilterSecurityInterceptor：可以看做过滤器链的出口。</p>\n</li>\n<li>\n<p>RememberMeAuthenticationFilter：当用户没有登录而直接访问资源时, 从 cookie 里找出用户的信息, 如果 Spring Security 能够识别出用户提供的remember me cookie, 用户将不必填写用户名和密码, 而是直接登录进入系统，该过滤器默认不开启。</p>\n</li>\n</ol>\n', 0, NULL, NULL, '# Spring Security 的执行流程\n\n## 一、Spring Security执行流程图\n\n![2021-08-03_151308](https://img.qinweizhao.com/2021/08/2021-08-03_151308.png)\n\n## 二、Spring Security 采用的是责任链的设计模式，它有一条很长的过滤器链。过滤器链的各个过滤器说明:\n\n![2021-08-03_152037](https://img.qinweizhao.com/2021/08/2021-08-03_152037.png)\n\n1. WebAsyncManagerIntegrationFilter：将 Security 上下文与 Spring Web 中用于处理异步请求映射的 WebAsyncManager 进行集成。\n\n2. SecurityContextPersistenceFilter：在每次请求处理之前将该请求相关的安全上下文信息加载到 SecurityContextHolder 中，然后在该次请求处理完成之后，将 SecurityContextHolder 中关于这次请求的信息存储到一个“仓储”中，然后将 SecurityContextHolder 中的信息清除，例如在Session中维护一个用户的安全信息就是这个过滤器处理的。\n\n3. HeaderWriterFilter：用于将头信息加入响应中。\n\n4. CsrfFilter：用于处理跨站请求伪造。\n\n5. LogoutFilter：用于处理退出登录。\n\n6. UsernamePasswordAuthenticationFilter：用于处理基于表单的登录请求，从表单中获取用户名和密码。默认情况下处理来自 /login 的请求。从表单中获取用户名和密码时，默认使用的表单 name 值为 username 和 password，这两个值可以通过设置这个过滤器的usernameParameter 和 passwordParameter 两个参数的值进行修改。\n\n7. DefaultLoginPageGeneratingFilter：如果没有配置登录页面，那系统初始化时就会配置这个过滤器，并且用于在需要进行登录时生成一个登录表单页面。\n\n8. BasicAuthenticationFilter：检测和处理 http basic 认证。\n\n9. RequestCacheAwareFilter：用来处理请求的缓存。\n\n10. SecurityContextHolderAwareRequestFilter：主要是包装请求对象request。\n\n11. AnonymousAuthenticationFilter：检测 SecurityContextHolder 中是否存在 Authentication 对象，如果不存在为其提供一个匿名 Authentication。\n\n12. SessionManagementFilter：管理 session 的过滤器。\n\n13. ExceptionTranslationFilter：处理 AccessDeniedException 和 AuthenticationException 异常。\n\n14. FilterSecurityInterceptor：可以看做过滤器链的出口。\n\n15. RememberMeAuthenticationFilter：当用户没有登录而直接访问资源时, 从 cookie 里找出用户的信息, 如果 Spring Security 能够识别出用户提供的remember me cookie, 用户将不必填写用户名和密码, 而是直接登录进入系统，该过滤器默认不开启。\n\n', '', 'springsecurityde-zhi-xing-liu-cheng', 0, 'Spring Security 的执行流程一、Spring Security执行流程图二、Spring Security 采用的是责任链的设计模式，它有一条很长的过滤器链。过滤器链的各个过滤器说明:WebAsyncManagerIntegrationFilter：将 Security 上下文与 Sp', '', '', 'Spring Security 的执行流程', 0, NULL, 88, 1264);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 15, '2021-08-03 15:37:00.882000', '2021-11-25 15:34:16.088000', b'0', '2021-11-25 15:34:16.082000', 0, '<h1 id=\"spring-security-认证原理usernamepasswordauthenticationfilter\">Spring Security 认证原理（UsernamePasswordAuthenticationFilter）</h1>\n<h2 id=\"1获取到页面的用户名和密码\">1、获取到页面的用户名和密码。</h2>\n<h2 id=\"2将username和password包装成usernamepasswordauthenticationtoken\">2、将username和password包装成UsernamePasswordAuthenticationToken。</h2>\n<h2 id=\"3获取系统的认证管理器authenticationmanager来调用authenticate方法完成认证\">3、获取系统的认证管理器（AuthenticationManager）来调用authenticate方法完成认证。</h2>\n<h3 id=\"31authenticationmanager获取providermanager来调用providermanagerauthenticate\">3.1）AuthenticationManager获取ProviderManager来调用ProviderManager.authenticate()。</h3>\n<h3 id=\"32providermanager获取到所有的authenticationprovider判断当前的提供者能否支持如果支持providerauthenticateauthentication\">3.2）ProviderManager获取到所有的AuthenticationProvider判断当前的提供者能否支持，如果支持provider.authenticate(authentication)；</h3>\n<h4 id=\"321retrieveuserusernameusernamepasswordauthenticationtokenauthentication\">3.2.1）retrieveUser(username,(UsernamePasswordAuthenticationToken)authentication)；</h4>\n<h5 id=\"3211loadeduser--thisgetuserdetailsserviceloaduserbyusernameusername调用我们自己的userdetailsservice来去数据库查用户按照用户名查出来的用户的详细信息封装成userdetails\">3.2.1.1）loadedUser = this.getUserDetailsService().loadUserByUsername(username)；（调用我们自己的UserDetailsService来去数据库查用						户，按照用户名查出来的用户的详细信息）封装成UserDetails。</h5>\n<h4 id=\"322preauthenticationcheckscheckuser预检查账号是否被锁定等\">3.2.2）preAuthenticationChecks.check(user)；（预检查，账号是否被锁定等…）。</h4>\n<h4 id=\"323additionalauthenticationchecks附加的认证检查\">3.2.3）additionalAuthenticationChecks（附加的认证检查）。</h4>\n<h5 id=\"3231使用-passwordencoder-matches-检查页面的密码和数据库的密码是否一致\">3.2.3.1）使用 passwordEncoder. matches 检查页面的密码和数据库的密码是否一致。</h5>\n<h4 id=\"324postauthenticationcheckscheckuser-后置认证检查密码是否过期\">3.2.4）postAuthenticationChecks.check(user) ；（后置认证，检查密码是否过期）。</h4>\n<h4 id=\"325createsuccessauthentication将认证成功信息重新封装成usernamepasswordauthenticationtoken\">3.2.5）createSuccessAuthentication：将认证成功信息重新封装成UsernamePasswordAuthenticationToken。</h4>\n<h3 id=\"3332又返回了一个新的usernamepasswordauthenticationtoken然后擦掉密码\">3.3）3.2又返回了一个新的UsernamePasswordAuthenticationToken，然后擦掉密码。</h3>\n<h2 id=\"4-eventpublisherpublishauthenticationsuccessresult告诉所有监听器认证成功了\">4、 eventPublisher.publishAuthenticationSuccess(result);告诉所有监听器认证成功了。</h2>\n', 0, NULL, NULL, '# Spring Security 认证原理（UsernamePasswordAuthenticationFilter）\n\n## 1、获取到页面的用户名和密码。\n\n## 2、将username和password包装成UsernamePasswordAuthenticationToken。\n\n## 3、获取系统的认证管理器（AuthenticationManager）来调用authenticate方法完成认证。\n\n### 3.1）AuthenticationManager获取ProviderManager来调用ProviderManager.authenticate()。\n\n### 3.2）ProviderManager获取到所有的AuthenticationProvider判断当前的提供者能否支持，如果支持provider.authenticate(authentication)；\n\n#### 3.2.1）retrieveUser(username,(UsernamePasswordAuthenticationToken)authentication)；\n\n##### 3.2.1.1）loadedUser = this.getUserDetailsService().loadUserByUsername(username)；（调用我们自己的UserDetailsService来去数据库查用						户，按照用户名查出来的用户的详细信息）封装成UserDetails。\n\n#### 3.2.2）preAuthenticationChecks.check(user)；（预检查，账号是否被锁定等…）。\n\n#### 3.2.3）additionalAuthenticationChecks（附加的认证检查）。\n\n##### 3.2.3.1）使用 passwordEncoder. matches 检查页面的密码和数据库的密码是否一致。\n\n#### 3.2.4）postAuthenticationChecks.check(user) ；（后置认证，检查密码是否过期）。\n\n#### 3.2.5）createSuccessAuthentication：将认证成功信息重新封装成UsernamePasswordAuthenticationToken。\n\n### 3.3）3.2又返回了一个新的UsernamePasswordAuthenticationToken，然后擦掉密码。\n\n## 4、 eventPublisher.publishAuthenticationSuccess(result);告诉所有监听器认证成功了。\n\n', '', 'springsecurityren-zheng-yuan-li-usernamepasswordauthenticationfilter', 0, 'Spring Security 认证原理（UsernamePasswordAuthenticationFilter）1、获取到页面的用户名和密码。2、将username和password包装成UsernamePasswordAuthenticationToken。3、获取系统的认证管理器（Authe', '', '', 'Spring Security 认证原理（UsernamePasswordAuthenticationFilter）', 0, NULL, 106, 1012);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 16, '2021-08-03 16:54:35.005000', '2021-11-25 15:34:06.080000', b'0', '2021-11-25 15:34:06.074000', 0, '<h1 id=\"springbean-的生命周期和作用域详解\">SpringBean 的生命周期和作用域详解</h1>\n<h2 id=\"一springbean-的作用域\">一、SpringBean 的作用域</h2>\n<ul>\n<li><strong>Singleton</strong>在SpingIoc容器中仅存在一个Bean实例，Bean以单例方式存在，默认值</li>\n<li><strong>prototype</strong>每次从容器中调用Bean时，都返回一个新的实例，即每次调用getBean时，相当于执行new xxBean()</li>\n<li><strong>request</strong>每次Http请求都会创建一个新的Bean,该作用域仅适用于WebApplicationContent环境</li>\n<li><strong>ression</strong>同一个HttpSession共享一个bean,不同Session使用不同Bean,仅用于WebApplication环境</li>\n<li><strong>globalSession</strong>一般用于porlet应用环境，该作用域仅用于WebApplicationContext</li>\n</ul>\n<h2 id=\"二springbean的生命周期\">二、SpringBean的生命周期</h2>\n<ul>\n<li><strong>singleton单例bean的生命周期</strong>当Scope=“Singleton”,即默认情况下，会在启动容器时（即容器实例化时）时实例化，但我们可以指定Bean节点的lazy-init=&quot;true&quot;来延迟初始化bean,这时候只有在第一次获取bean时，才初始化bean,即第一次请求时初始化bean,默认情况下spring在读取XML文件的时候就会创建对象，在创建对象的时候先调用init-method属性中所指定的方法，对象在销毁的时候，会调用destroy-method属性中所指定的方法</li>\n<li><strong>prototype非单例对象的生命周期</strong>当Scope=&quot;prototype&quot;时，容器也会延迟初始化Bean,spring读取XML文件的时候，并不会立刻创建对象，而是在第一次请求该bean时才初始化，在第一次请求每一个prototype的bean时，Spring容器都会调用init-method属性值中所指定的方法，对象销毁的时候，Spring容器其不会帮助我们调用任何方法，因为是非单例，这个类型的对象有很多个，spring一旦把这个对象交给你之后，就不再管理这个对象了，交由GC</li>\n</ul>\n', 0, NULL, NULL, '# SpringBean 的生命周期和作用域详解\n\n## 一、SpringBean 的作用域\n\n- **Singleton**在SpingIoc容器中仅存在一个Bean实例，Bean以单例方式存在，默认值\n- **prototype**每次从容器中调用Bean时，都返回一个新的实例，即每次调用getBean时，相当于执行new xxBean()\n- **request**每次Http请求都会创建一个新的Bean,该作用域仅适用于WebApplicationContent环境\n- **ression**同一个HttpSession共享一个bean,不同Session使用不同Bean,仅用于WebApplication环境\n- **globalSession**一般用于porlet应用环境，该作用域仅用于WebApplicationContext\n\n## 二、SpringBean的生命周期\n\n- **singleton单例bean的生命周期**当Scope=“Singleton”,即默认情况下，会在启动容器时（即容器实例化时）时实例化，但我们可以指定Bean节点的lazy-init=\"true\"来延迟初始化bean,这时候只有在第一次获取bean时，才初始化bean,即第一次请求时初始化bean,默认情况下spring在读取XML文件的时候就会创建对象，在创建对象的时候先调用init-method属性中所指定的方法，对象在销毁的时候，会调用destroy-method属性中所指定的方法\n- **prototype非单例对象的生命周期**当Scope=\"prototype\"时，容器也会延迟初始化Bean,spring读取XML文件的时候，并不会立刻创建对象，而是在第一次请求该bean时才初始化，在第一次请求每一个prototype的bean时，Spring容器都会调用init-method属性值中所指定的方法，对象销毁的时候，Spring容器其不会帮助我们调用任何方法，因为是非单例，这个类型的对象有很多个，spring一旦把这个对象交给你之后，就不再管理这个对象了，交由GC\n', '', 'springbeande-sheng-ming-zhou-qi-he-zuo-yong-yu-xiang-jie', 0, 'SpringBean 的生命周期和作用域详解一、SpringBean 的作用域Singleton在SpingIoc容器中仅存在一个Bean实例，Bean以单例方式存在，默认值prototype每次从容器中调用Bean时，都返回一个新的实例，即每次调用getBean时，相当于执行new xxBean(', '', '', 'Spring Bean 的生命周期和作用域详解', 0, NULL, 62, 853);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 17, '2021-08-04 23:51:17.058000', '2021-11-25 15:34:54.949000', b'0', '2021-11-25 15:34:54.942000', 0, '<h1 id=\"物理分页与逻辑分页内存分页\">物理分页与逻辑分页（内存分页）</h1>\n<h2 id=\"一概述\">一、概述</h2>\n<h3 id=\"1物理分页\">1、物理分页</h3>\n<p>物理分页依赖的是某一物理实体，这个物理实体就是数据库，比如 MySQL 数据库提供了limit关键字，只需要编写带有 limit 关键字的 SQL 语句，数据库返回的就是分页结果。</p>\n<h3 id=\"2逻辑分页\">2、逻辑分页</h3>\n<p>逻辑分页依赖的是程序员编写的代码。数据库返回的不是分页结果，而是全部数据，然后再由程序员通过代码获取分页数据，常用的操作是一次性从数据库中查询出全部数据并存储到List集合中，因为List集合有序，再根据索引获取指定范围的数据。</p>\n<h2 id=\"二对比\">二、对比</h2>\n<h3 id=\"1数据库负担\">1、数据库负担</h3>\n<p>物理分页每次都访问数据库，逻辑分页只访问一次数据库，物理分页对数据库造成的负担大。</p>\n<h3 id=\"2服务器负担\">2、服务器负担</h3>\n<p>逻辑分页一次性将数据读取到内存，占用了较大的内容空间，物理分页每次只读取一部分数据，占用内存空间较小。</p>\n<h3 id=\"3实时性\">3、实时性</h3>\n<p>逻辑分页一次性将数据读取到内存，数据发生改变，数据库的最新状态不能实时反映到操作中，实时性差。物理分页每次需要数据时都访问数据库，能够获取数据库的最新状态，实时性强。</p>\n<h3 id=\"4适用场合\">4、适用场合</h3>\n<p>逻辑分页主要用于数据量不大、数据稳定的场合，物理分页主要用于数据量较大、更新频繁的场合。</p>\n', 0, NULL, NULL, '# 物理分页与逻辑分页（内存分页）\n\n## 一、概述\n\n### 1、物理分页\n\n物理分页依赖的是某一物理实体，这个物理实体就是数据库，比如 MySQL 数据库提供了limit关键字，只需要编写带有 limit 关键字的 SQL 语句，数据库返回的就是分页结果。\n\n### 2、逻辑分页\n\n逻辑分页依赖的是程序员编写的代码。数据库返回的不是分页结果，而是全部数据，然后再由程序员通过代码获取分页数据，常用的操作是一次性从数据库中查询出全部数据并存储到List集合中，因为List集合有序，再根据索引获取指定范围的数据。\n\n## 二、对比\n\n### 1、数据库负担\n\n物理分页每次都访问数据库，逻辑分页只访问一次数据库，物理分页对数据库造成的负担大。\n\n### 2、服务器负担\n\n逻辑分页一次性将数据读取到内存，占用了较大的内容空间，物理分页每次只读取一部分数据，占用内存空间较小。\n\n### 3、实时性\n\n逻辑分页一次性将数据读取到内存，数据发生改变，数据库的最新状态不能实时反映到操作中，实时性差。物理分页每次需要数据时都访问数据库，能够获取数据库的最新状态，实时性强。\n\n### 4、适用场合\n\n逻辑分页主要用于数据量不大、数据稳定的场合，物理分页主要用于数据量较大、更新频繁的场合。\n', '', 'wu-li-fen-ye-yu--luo-ji-fen-ye-jiu-shi-nei-cun-fen-ye-', 0, '物理分页与（逻辑分页就是内存分页）一 概述1.物理分页物理分页依赖的是某一物理实体，这个物理实体就是数据库，比如MySQL数据库提供了limit关键字，程序员只需要编写带有limit关键字的SQL语句，数据库返回的就是分页结果。2.逻辑分页逻辑分页依赖的是程序员编写的代码。数据库返回的不是分页结果，', '', '', '物理分页与逻辑分页（内存分页）', 0, NULL, 65, 477);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 18, '2021-08-10 15:38:19.677000', '2022-03-10 10:46:28.488000', b'0', '2022-03-10 10:46:28.436000', 0, '<h1 id=\"centos-7-设置静态-ip\">CentOS 7 设置静态 IP</h1>\n<h2 id=\"一查看当前网卡名称\">一、查看当前网卡名称</h2>\n<pre><code class=\"language-bash\">ip addr\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/08/2021-08-10_152459.png\" alt=\"2021-08-10_152459\" /></p>\n<h2 id=\"二修改配置文件\">二、修改配置文件</h2>\n<p>ens33网卡对应的配置文件为<strong>ifcfg-ens33</strong></p>\n<pre><code class=\"language-bash\">vi /etc/sysconfig/network-scripts/ifcfg-ens33\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/08/2021-08-10_153428.png\" alt=\"2021-08-10_153428\" /></p>\n<pre><code class=\"language-file\"># 网络类型为以太网\nTYPE=Ethernet\nPROXY_METHOD=none\nBROWSER_ONLY=no\n# 手动分配ip\nBOOTPROTO=static\nDEFROUTE=yes\nIPV4_FAILURE_FATAL=no\nIPV6INIT=yes\nIPV6_AUTOCONF=yes\nIPV6_DEFROUTE=yes\nIPV6_FAILURE_FATAL=no\nIPV6_ADDR_GEN_MODE=stable-privacy\n# 网卡设备名，设备名一定要跟文件名一致\nNAME=ens33\nUUID=db6ec3a4-f327-4b4b-95cf-203cf9c67c6b\n# 网卡设备名，设备名一定要跟文件名一致\nDEVICE=ens33\n# 该网卡是否随网络服务启动\nONBOOT=yes\n# 该网卡ip地址就是你要配置的固定IP，如果你要用xshell等工具连接，220这个网段最好和你自己的电脑网段一致，否则有可能用xshell连接失败\nIPADDR=192.168.79.79\n# 子网掩码\nNETMASK=255.255.255.0\n# 网关\nGATEWAY=192.168.79.2\nPREFIX=24\n# DNS\nDNS1=114.114.114.114\n</code></pre>\n<h2 id=\"三重启网卡\">三、重启网卡</h2>\n<pre><code class=\"language-bash\">service network restart\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/08/2021-08-10_153732.png\" alt=\"2021-08-10_153732\" /></p>\n', 0, NULL, NULL, '# CentOS 7 设置静态 IP\n\n## 一、查看当前网卡名称\n\n```bash\nip addr\n```\n\n![2021-08-10_152459](https://img.qinweizhao.com/2021/08/2021-08-10_152459.png)\n\n## 二、修改配置文件\n\nens33网卡对应的配置文件为**ifcfg-ens33**\n\n```bash\nvi /etc/sysconfig/network-scripts/ifcfg-ens33\n```\n\n![2021-08-10_153428](https://img.qinweizhao.com/2021/08/2021-08-10_153428.png)\n\n```file\n# 网络类型为以太网\nTYPE=Ethernet\nPROXY_METHOD=none\nBROWSER_ONLY=no\n# 手动分配ip\nBOOTPROTO=static\nDEFROUTE=yes\nIPV4_FAILURE_FATAL=no\nIPV6INIT=yes\nIPV6_AUTOCONF=yes\nIPV6_DEFROUTE=yes\nIPV6_FAILURE_FATAL=no\nIPV6_ADDR_GEN_MODE=stable-privacy\n# 网卡设备名，设备名一定要跟文件名一致\nNAME=ens33\nUUID=db6ec3a4-f327-4b4b-95cf-203cf9c67c6b\n# 网卡设备名，设备名一定要跟文件名一致\nDEVICE=ens33\n# 该网卡是否随网络服务启动\nONBOOT=yes\n# 该网卡ip地址就是你要配置的固定IP，如果你要用xshell等工具连接，220这个网段最好和你自己的电脑网段一致，否则有可能用xshell连接失败\nIPADDR=192.168.79.79\n# 子网掩码\nNETMASK=255.255.255.0\n# 网关\nGATEWAY=192.168.79.2\nPREFIX=24\n# DNS\nDNS1=114.114.114.114\n```\n\n## 三、重启网卡\n\n```bash\nservice network restart\n```\n\n![2021-08-10_153732](https://img.qinweizhao.com/2021/08/2021-08-10_153732.png)\n', '', 'centos7she-zhi-jing-tai-ip', 0, 'CentOS 7 设置静态IP一、查看当前网卡名称ip addr二、修改配置文件ens33网卡对应的配置文件为ifcfg-ens33vi /etc/sysconfig/network-scripts/ifcfg-ens33# 网络类型为以太网TYPE=EthernetPROXY_METHOD=non', '', '', 'CentOS 7 设置静态IP', 0, NULL, 104, 644);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 19, '2021-08-10 20:16:58.093000', '2021-11-25 15:34:47.559000', b'0', '2021-11-25 15:34:47.552000', 0, '<h1 id=\"centos-更换-yum-源\">CentOS 更换 Yum 源</h1>\n<h2 id=\"一将原来的centos-baserepo进行备份\">一、将原来的CentOS-Base.repo进行备份</h2>\n<pre><code class=\"language-bash\"># 进入源所在目录\ncd /etc/yum.repos.d\n\n# 备份\nmv CentOS-Base.repo CentOS-Base.repo_back\n</code></pre>\n<h2 id=\"二下载阿里源\">二、下载阿里源</h2>\n<pre><code class=\"language-bash\"># 下载源\nwget -nc http://mirrors.aliyun.com/repo/Centos-7.repo\n</code></pre>\n<h2 id=\"三更改阿里yum源为默认源\">三、更改阿里yum源为默认源</h2>\n<pre><code class=\"language-bash\"> mv Centos-7.repo CentOS-Base.repo\n</code></pre>\n<h2 id=\"四更新缓存\">四、更新缓存</h2>\n<pre><code class=\"language-bash\"># 清除\nyum clean all\n# 生成\nyum makecache\n</code></pre>\n<h2 id=\"五更新\">五、更新</h2>\n<pre><code class=\"language-bash\">yum -y update\n</code></pre>\n<h2 id=\"六补充国内-yum-源\">六、补充国内 yum 源</h2>\n<ul>\n<li>\n<p>阿里yum源：<a href=\"http://mirrors.aliyun.com/repo/\">http://mirrors.aliyun.com/repo/</a></p>\n</li>\n<li>\n<p>163(网易)yum源：<a href=\"http://mirrors.163.com/.help/\">http://mirrors.163.com/.help/</a></p>\n</li>\n<li>\n<p>中科大的Linux安装镜像源：<a href=\"http://centos.ustc.edu.cn/\">http://centos.ustc.edu.cn/</a></p>\n</li>\n<li>\n<p>搜狐的Linux安装镜像源：<a href=\"http://mirrors.sohu.com/\">http://mirrors.sohu.com/</a></p>\n</li>\n<li>\n<p>北京首都在线科技：<a href=\"http://mirrors.yun-idc.com/\">http://mirrors.yun-idc.com/</a></p>\n</li>\n</ul>\n', 0, NULL, NULL, '# CentOS 更换 Yum 源\n\n## 一、将原来的CentOS-Base.repo进行备份\n\n```bash\n# 进入源所在目录\ncd /etc/yum.repos.d\n\n# 备份\nmv CentOS-Base.repo CentOS-Base.repo_back\n```\n\n## 二、下载阿里源\n\n```bash\n# 下载源\nwget -nc http://mirrors.aliyun.com/repo/Centos-7.repo\n```\n\n## 三、更改阿里yum源为默认源\n\n```bash\n mv Centos-7.repo CentOS-Base.repo\n```\n\n## 四、更新缓存\n\n```bash\n# 清除\nyum clean all\n# 生成\nyum makecache\n```\n\n## 五、更新\n\n```bash\nyum -y update\n```\n\n## 六、补充国内 yum 源\n\n- 阿里yum源：<http://mirrors.aliyun.com/repo/>\n- 163(网易)yum源：<http://mirrors.163.com/.help/>\n\n- 中科大的Linux安装镜像源：<http://centos.ustc.edu.cn/>\n\n- 搜狐的Linux安装镜像源：<http://mirrors.sohu.com/>\n\n- 北京首都在线科技：<http://mirrors.yun-idc.com/>\n', '', 'centosgeng-huan-yumyuan', 0, 'CentOS 更换 yum 源一、将原来的CentOS-Base.repo进行备份mv CentOS-Base.repo CentOS-Base.repo_back二、下载阿里源# 进入源所在目录cd /etc/yum.repos.d# 下载源wget -nc http://mirrors.aliy', '', '', 'CentOS 更换 Yum 源', 0, NULL, 73, 467);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 20, '2021-08-14 17:55:13.408000', '2021-11-25 15:34:40.313000', b'0', '2021-11-25 15:34:40.307000', 0, '<h1 id=\"git-生成-ssh-key\">Git 生成 SSH key</h1>\n<h2 id=\"一检查-ssh-keys-是否存在\">一、检查 SSH keys 是否存在</h2>\n<pre><code class=\"language-bash\">ls -al ~/.ssh\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/08/2021-08-14_171225.png\" alt=\"2021-08-14_171225\" /></p>\n<h2 id=\"二生成-ssh-key\">二、生成 ssh key</h2>\n<pre><code class=\"language-bash\"># ssh-keygen -t rsa -C &quot;youremail@example.com&quot;\nssh-keygen -t rsa -C &quot;qinweizhao1997@163.com&quot;\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/08/2021-08-14_172555.png\" alt=\"2021-08-14_172555\" /></p>\n<p>生成成功会在 <strong>~/</strong> 下生成 <strong>.ssh</strong> 文件夹，打开 <strong>id_rsa.pub</strong> 中的内容即为 <strong>key</strong>。</p>\n<p><img src=\"https://img.qinweizhao.com/2021/08/2021-08-14_172237.png\" alt=\"2021-08-14_172237\" /></p>\n', 0, NULL, NULL, '# Git 生成 SSH key\n\n## 一、检查 SSH keys 是否存在\n\n```bash\nls -al ~/.ssh\n```\n\n![2021-08-14_171225](https://img.qinweizhao.com/2021/08/2021-08-14_171225.png)\n\n## 二、生成 ssh key\n\n```bash\n# ssh-keygen -t rsa -C \"youremail@example.com\"\nssh-keygen -t rsa -C \"qinweizhao1997@163.com\"\n```\n\n![2021-08-14_172555](https://img.qinweizhao.com/2021/08/2021-08-14_172555.png)\n\n生成成功会在 **~/** 下生成 **.ssh** 文件夹，打开 **id_rsa.pub** 中的内容即为 **key**。\n\n![2021-08-14_172237](https://img.qinweizhao.com/2021/08/2021-08-14_172237.png)\n', '', 'gitsheng-cheng-sshkey', 0, 'Git 生成 SSH key一、检查 SSH keys 是否存在ls -al ~/.ssh二、生成 ssh key# ssh-keygen -t rsa -C &quot;youremail@example.com&quot;ssh-keygen -t rsa -C &quot;qinweizhao', '', '', 'Git 生成 SSH key', 0, NULL, 61, 190);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 21, '2021-08-14 17:57:17.026000', '2021-11-25 15:33:57.506000', b'0', '2021-11-25 15:33:57.499000', 0, '<h1 id=\"配置-java-开发环境\">配置 Java 开发环境</h1>\n<h2 id=\"一-windows\">一、 Windows</h2>\n<h3 id=\"1安装-jdk\">1、安装 JDK</h3>\n<ul>\n<li><a href=\"https://www.oracle.com/java/technologies/javase-downloads.html\">官方</a></li>\n<li><a href=\"https://pan.baidu.com/s/10zvgg1q02AKrtYkE3XbjzQ\">百度网盘</a>(提取码：jx66)</li>\n</ul>\n<h3 id=\"2配置环境变量\">2、配置环境变量</h3>\n<ul>\n<li>\n<p>变量名： <strong>JAVA_HOME</strong></p>\n<p>变量值： <strong>D:\\Java\\jdk1.8.0_291</strong></p>\n</li>\n<li>\n<p>变量名： <strong>CLASSPATH</strong></p>\n<p>变量值： <strong>.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;</strong></p>\n</li>\n</ul>\n<p><img src=\"https://img.qinweizhao.com/2021/08/2021-08-14_163546.png\" alt=\"2021-08-14_163546\" /></p>\n<ul>\n<li>\n<p>变量名： <strong>Path</strong></p>\n<p>变量值： <strong>%JAVA_HOME%\\bin</strong> / <strong>%JAVA_HOME%\\jre\\bin</strong></p>\n<p><img src=\"https://img.qinweizhao.com/2021/08/2021-08-14_165606.png\" alt=\"2021-08-14_165606\" /></p>\n</li>\n</ul>\n<p><strong><em>注：</em> 根据实际安装目录修改 JAVA_HOME 的变量值。</strong></p>\n<h3 id=\"3测试\">3、测试</h3>\n<ol>\n<li>&quot;开始&quot;-&gt;&quot;运行&quot;，键入&quot;cmd&quot;；</li>\n<li>键入命令： <strong>java -version</strong>、<strong>java</strong>、<strong>javac</strong> 几个命令，出现以下信息，说明环境变量配置成功；</li>\n</ol>\n<p><img src=\"https://img.qinweizhao.com/2021/08/2021-08-14_165927.png\" alt=\"2021-08-14_165927\" /></p>\n<p><img src=\"https://img.qinweizhao.com/2021/08/2021-08-14_165850.png\" alt=\"2021-08-14_165850\" /></p>\n<p><img src=\"https://img.qinweizhao.com/2021/08/2021-08-14_165950.png\" alt=\"2021-08-14_165950\" /></p>\n<h2 id=\"二centos\">二、CentOS</h2>\n<h3 id=\"1下载-jdk-并解压到指定目录\">1、下载 JDK 并解压到指定目录</h3>\n<pre><code class=\"language-bash\">tar -zxvf jdk-11.0.10_linux-x64_bin.tar.gz -C ../java\n</code></pre>\n<p>​  注：压缩包路径：<strong>/usr/local/install</strong></p>\n<p>​    安装路径：<strong>/usr/local/java</strong></p>\n<h3 id=\"2编辑-profile-文件配置环境变量\">2、编辑 profile 文件，配置环境变量</h3>\n<pre><code class=\"language-bash\">vi /etc/profile\n</code></pre>\n<p>增加：</p>\n<pre><code class=\"language-profile\">export JAVA_HOME=/usr/local/java/jdk-11.0.10\nexport CLASSPATH=.:$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib/dt.jar\nexport PATH=$JAVA_HOME/bin:$PATH\n</code></pre>\n<h3 id=\"3刷新环境变量\">3、刷新环境变量</h3>\n<pre><code class=\"language-bash\">source /etc/profile\n</code></pre>\n<h3 id=\"3在任意路径下测试\">3、在任意路径下测试</h3>\n<pre><code class=\"language-bash\">java -version\n</code></pre>\n<p>运行效果与 Windows 一致</p>\n', 0, NULL, NULL, '# 配置 Java 开发环境\n\n## 一、 Windows\n\n### 1、安装 JDK\n\n- [官方](https://www.oracle.com/java/technologies/javase-downloads.html)\n- [百度网盘](https://pan.baidu.com/s/10zvgg1q02AKrtYkE3XbjzQ)(提取码：jx66)\n\n### 2、配置环境变量\n\n- 变量名： **JAVA_HOME**\n\n  变量值： **D:\\Java\\jdk1.8.0_291**\n\n- 变量名： **CLASSPATH**\n\n  变量值： **.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;**\n\n![2021-08-14_163546](https://img.qinweizhao.com/2021/08/2021-08-14_163546.png)\n\n- 变量名： **Path**\n\n  变量值： **%JAVA_HOME%\\bin** / **%JAVA_HOME%\\jre\\bin**\n\n  ![2021-08-14_165606](https://img.qinweizhao.com/2021/08/2021-08-14_165606.png)\n\n***注：* 根据实际安装目录修改 JAVA_HOME 的变量值。**\n\n### 3、测试\n\n1. \"开始\"->\"运行\"，键入\"cmd\"；\n2. 键入命令： **java -version**、**java**、**javac** 几个命令，出现以下信息，说明环境变量配置成功；\n\n![2021-08-14_165927](https://img.qinweizhao.com/2021/08/2021-08-14_165927.png)\n\n![2021-08-14_165850](https://img.qinweizhao.com/2021/08/2021-08-14_165850.png)\n\n![2021-08-14_165950](https://img.qinweizhao.com/2021/08/2021-08-14_165950.png)\n\n## 二、CentOS\n\n### 1、下载 JDK 并解压到指定目录\n\n```bash\ntar -zxvf jdk-11.0.10_linux-x64_bin.tar.gz -C ../java\n```\n\n​  注：压缩包路径：**/usr/local/install**\n\n​    安装路径：**/usr/local/java**\n\n### 2、编辑 profile 文件，配置环境变量\n\n```bash\nvi /etc/profile\n```\n\n增加：\n\n```profile\nexport JAVA_HOME=/usr/local/java/jdk-11.0.10\nexport CLASSPATH=.:$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib/dt.jar\nexport PATH=$JAVA_HOME/bin:$PATH\n```\n\n### 3、刷新环境变量\n\n```bash\nsource /etc/profile\n```\n\n### 3、在任意路径下测试\n\n```bash\njava -version\n```\n\n运行效果与 Windows 一致\n', '', 'windowspei-zhi-javakai-fa-huan-jing', 0, 'Windows 配置 Java 开发环境一、配置环境变量变量名： JAVA_HOME变量值： D:\\Java\\jdk1.8.0_291变量名： CLASSPATH变量值：.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;变量名： Path变量值： ', '', '', '配置 Java 开发环境', 0, NULL, 142, 692);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 23, '2021-08-14 18:47:32.252000', '2021-11-25 15:34:33.681000', b'0', '2021-11-25 15:34:33.675000', 0, '<h1 id=\"配置-maven-开发环境\">配置 Maven 开发环境</h1>\n<h2 id=\"一-windows\">一、 Windows</h2>\n<h3 id=\"1配置环境变量\">1、配置环境变量</h3>\n<ul>\n<li>\n<p>变量名： <strong>MAVEN_HOME</strong></p>\n<p>变量值： <strong>D:\\Maven\\apache-maven-3.8.1</strong></p>\n</li>\n</ul>\n<p><img src=\"https://img.qinweizhao.com/2021/08/2021-08-14_184007.png\" alt=\"2021-08-14_184007\" /></p>\n<ul>\n<li>\n<p>变量名： <strong>Path</strong></p>\n<p>变量值： <strong>%MAVEN_HOME%\\bin</strong></p>\n<p><img src=\"https://img.qinweizhao.com/2021/08/2021-08-14_184207.png\" alt=\"2021-08-14_184207\" /></p>\n</li>\n</ul>\n<h3 id=\"2测试\">2、测试</h3>\n<ol>\n<li>&quot;开始”-&gt;&quot;运行&quot;，键入&quot;cmd&quot;；</li>\n<li>键入命令： <strong>mvn -v</strong>命令，出现以下信息，说明环境变量配置成功；</li>\n</ol>\n<p><img src=\"https://img.qinweizhao.com/2021/08/2021-08-14_184606.png\" alt=\"2021-08-14_184606\" /></p>\n<h2 id=\"二centos-7\">二、CentOS 7</h2>\n<h3 id=\"1编辑-profile-文件配置环境变量\">1、编辑 profile 文件，配置环境变量</h3>\n<pre><code class=\"language-bash\">vim /etc/profile\n</code></pre>\n<p>将下面这两行代码拷贝到文件末尾并保存</p>\n<pre><code class=\"language-profile\">MAVEN_HOME=/usr/local/maven\nexport PATH=${MAVEN_HOME}/bin:${PATH}\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/09/2021-09-15_142613.png\" alt=\"2021-09-15_142613\" /></p>\n<p>重载环境变量</p>\n<pre><code class=\"language-bash\">source /etc/profile\n</code></pre>\n<h3 id=\"2在任意路径下测试\">2、在任意路径下测试</h3>\n<pre><code class=\"language-bash\">mvn –v\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/09/2021-09-15_142920.png\" alt=\"2021-09-15_142920\" /></p>\n', 0, NULL, NULL, '# 配置 Maven 开发环境\n\n## 一、 Windows\n\n### 1、配置环境变量\n\n- 变量名： **MAVEN_HOME**\n\n  变量值： **D:\\Maven\\apache-maven-3.8.1**\n\n![2021-08-14_184007](https://img.qinweizhao.com/2021/08/2021-08-14_184007.png)\n\n- 变量名： **Path**\n\n  变量值： **%MAVEN_HOME%\\bin**\n\n  ![2021-08-14_184207](https://img.qinweizhao.com/2021/08/2021-08-14_184207.png)\n\n### 2、测试\n\n1. \"开始”->\"运行\"，键入\"cmd\"；\n2. 键入命令： **mvn -v**命令，出现以下信息，说明环境变量配置成功；\n\n![2021-08-14_184606](https://img.qinweizhao.com/2021/08/2021-08-14_184606.png)\n\n## 二、CentOS 7\n\n### 1、编辑 profile 文件，配置环境变量\n\n```bash\nvim /etc/profile\n```\n\n将下面这两行代码拷贝到文件末尾并保存\n\n```profile\nMAVEN_HOME=/usr/local/maven\nexport PATH=${MAVEN_HOME}/bin:${PATH}\n```\n\n![2021-09-15_142613](https://img.qinweizhao.com/2021/09/2021-09-15_142613.png)\n\n重载环境变量\n\n```bash\nsource /etc/profile\n```\n\n### 2、在任意路径下测试\n\n```bash\nmvn –v\n```\n\n![2021-09-15_142920](https://img.qinweizhao.com/2021/09/2021-09-15_142920.png)\n', '', 'pei-zhi-mavenkai-fa-huan-jing', 0, '配置 Maven 开发环境一、 Windows1、配置环境变量变量名： MAVEN_HOME变量值： D:\\Maven\\apache-maven-3.8.1变量名： Path变量值： %MAVEN_HOME%\\bin2、测试&quot;开始”-&gt;&quot;运行&quot;，键入&quot;c', '', '', '配置 Maven 环境变量', 0, NULL, 54, 347);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 24, '2021-08-14 19:13:12.042000', '2021-11-25 15:33:45.890000', b'0', '2021-11-25 15:33:45.883000', 0, '<h1 id=\"配置-maven-仓库和-jdk\">配置 Maven 仓库和 JDK</h1>\n<h2 id=\"一本地仓库\">一、本地仓库</h2>\n<p>修改 <strong>Maven</strong> 安装目录的 <strong>conf</strong> 文件夹中的 <strong>settings</strong> 文件。</p>\n<p><img src=\"https://img.qinweizhao.com/2021/08/2021-08-14_185834.png\" alt=\"2021-08-14_185834\" /></p>\n<p>在 <strong>settings</strong> 下添加 <strong>localRepository</strong> 标签，内容为本地仓库目录。</p>\n<p><img src=\"https://img.qinweizhao.com/2021/08/2021-08-14_190217.png\" alt=\"2021-08-14_190217\" /></p>\n<h2 id=\"二中央仓库\">二、中央仓库</h2>\n<p>在 <strong>mirrors</strong> 标签下增加以下内容</p>\n<pre><code class=\"language-xml\">&lt;!-- 阿里云仓库 --&gt;\n      &lt;mirror&gt;\n          &lt;id&gt;alimaven&lt;/id&gt;\n          &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;\n          &lt;name&gt;aliyun maven&lt;/name&gt;\n          &lt;url&gt;http://maven.aliyun.com/nexus/content/repositories/central/&lt;/url&gt;\n      &lt;/mirror&gt;\n\n      &lt;!-- 中央仓库1 --&gt;\n      &lt;mirror&gt;\n          &lt;id&gt;repo1&lt;/id&gt;\n          &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;\n          &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;\n          &lt;url&gt;http://repo1.maven.org/maven2/&lt;/url&gt;\n      &lt;/mirror&gt;\n\n      &lt;!-- 中央仓库2 --&gt;\n      &lt;mirror&gt;\n          &lt;id&gt;repo2&lt;/id&gt;\n          &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;\n          &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;\n          &lt;url&gt;http://repo2.maven.org/maven2/&lt;/url&gt;\n      &lt;/mirror&gt;\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/08/2021-08-14_191035.png\" alt=\"2021-08-14_191035\" /></p>\n<h2 id=\"三配置-jdk\">三、配置 JDK</h2>\n<pre><code class=\"language-xml\">      &lt;profile&gt;\n          &lt;id&gt;JDK-1.8&lt;/id&gt;\n          &lt;activation&gt;\n              &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;\n              &lt;jdk&gt;1.8&lt;/jdk&gt;\n          &lt;/activation&gt;\n          &lt;properties&gt;\n              &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;\n              &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;\n              &lt;maven.compiler.compilerVersion&gt;1.8&lt;/maven.compiler.compilerVersion&gt;\n          &lt;/properties&gt;\n      &lt;/profile&gt;\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/08/2021-08-14_205141.png\" alt=\"2021-08-14_205141\" /></p>\n', 0, NULL, NULL, '# 配置 Maven 仓库和 JDK\n\n## 一、本地仓库\n\n修改 **Maven** 安装目录的 **conf** 文件夹中的 **settings** 文件。\n\n![2021-08-14_185834](https://img.qinweizhao.com/2021/08/2021-08-14_185834.png)\n\n在 **settings** 下添加 **localRepository** 标签，内容为本地仓库目录。\n\n![2021-08-14_190217](https://img.qinweizhao.com/2021/08/2021-08-14_190217.png)\n\n## 二、中央仓库\n\n在 **mirrors** 标签下增加以下内容\n\n```xml\n<!-- 阿里云仓库 -->\n      <mirror>\n          <id>alimaven</id>\n          <mirrorOf>central</mirrorOf>\n          <name>aliyun maven</name>\n          <url>http://maven.aliyun.com/nexus/content/repositories/central/</url>\n      </mirror>\n\n      <!-- 中央仓库1 -->\n      <mirror>\n          <id>repo1</id>\n          <mirrorOf>central</mirrorOf>\n          <name>Human Readable Name for this Mirror.</name>\n          <url>http://repo1.maven.org/maven2/</url>\n      </mirror>\n\n      <!-- 中央仓库2 -->\n      <mirror>\n          <id>repo2</id>\n          <mirrorOf>central</mirrorOf>\n          <name>Human Readable Name for this Mirror.</name>\n          <url>http://repo2.maven.org/maven2/</url>\n      </mirror>\n```\n\n![2021-08-14_191035](https://img.qinweizhao.com/2021/08/2021-08-14_191035.png)\n\n## 三、配置 JDK\n\n```xml\n      <profile>\n          <id>JDK-1.8</id>\n          <activation>\n              <activeByDefault>true</activeByDefault>\n              <jdk>1.8</jdk>\n          </activation>\n          <properties>\n              <maven.compiler.source>1.8</maven.compiler.source>\n              <maven.compiler.target>1.8</maven.compiler.target>\n              <maven.compiler.compilerVersion>1.8</maven.compiler.compilerVersion>\n          </properties>\n      </profile>\n```\n\n![2021-08-14_205141](https://img.qinweizhao.com/2021/08/2021-08-14_205141.png)\n', '', 'mavenpei-zhi-cang-ku', 0, 'Maven 配置仓库一、本地仓库修改 Maven 安装目录的 conf 文件夹中的 settings 文件。在 settings 下添加 localRepository 标签，内容为本地仓库目录。二、中央仓库在 mirrors 标签下增加以下内容&lt;!-- 阿里云仓库 --&gt;      &', '', '', '配置 Maven 仓库和 JDK', 0, NULL, 70, 1213);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 25, '2021-08-14 22:45:16.956000', '2021-11-25 15:33:23.393000', b'0', '2021-11-25 15:33:23.385000', 0, '<h1 id=\"配置-gradle-环境\">配置 Gradle 环境</h1>\n<h2 id=\"一-windows\">一、 Windows</h2>\n<h3 id=\"1配置环境变量\">1、配置环境变量</h3>\n<ul>\n<li>\n<p>变量名： <strong>GRADLE_HOME</strong></p>\n<p>变量值： <strong>D:\\Gradle\\gradle-7.1.1</strong></p>\n</li>\n<li>\n<p>变量名： <strong>GRADLE_USER_HOME</strong>（可选）</p>\n<p>变量值： <strong>D:\\Maven\\repository</strong></p>\n</li>\n</ul>\n<p><img src=\"https://img.qinweizhao.com/2021/08/2021-08-14_224053.png\" alt=\"2021-08-14_224053\" /></p>\n<ul>\n<li>\n<p>变量名： <strong>Path</strong></p>\n<p>变量值： <strong>%GRADLE_HOME%\\bin</strong></p>\n<p><img src=\"https://img.qinweizhao.com/2021/08/2021-08-14_224303.png\" alt=\"2021-08-14_224303\" /></p>\n</li>\n</ul>\n<h3 id=\"2测试\">2、测试</h3>\n<ol>\n<li>&quot;开始”-&gt;&quot;运行&quot;，键入&quot;cmd&quot;；</li>\n<li>键入命令： <strong>gradle -v</strong> 命令，出现以下信息，说明环境变量配置成功；</li>\n</ol>\n<p><img src=\"https://img.qinweizhao.com/2021/08/2021-08-14_224418.png\" alt=\"2021-08-14_224418\" /></p>\n<h3 id=\"3配置-gradle-仓库源\">3、配置 Gradle 仓库源</h3>\n<p>　在Gradle安装目录下的 init.d 文件夹下，新建一个 init.gradle 文件，里面填写以下配置。</p>\n<pre><code class=\"language-gradle\">allprojects {\n    repositories {\n        maven { url \'file:///D:/Maven/repository\'}\n        mavenLocal()\n        maven { name &quot;Alibaba&quot; ; url &quot;https://maven.aliyun.com/repository/public&quot; }\n        maven { name &quot;Bstek&quot; ; url &quot;http://nexus.bsdn.org/content/groups/public/&quot; }\n        mavenCentral()\n    }\n\n    buildscript { \n        repositories { \n            maven { name &quot;Alibaba&quot; ; url \'https://maven.aliyun.com/repository/public\' }\n            maven { name &quot;Bstek&quot; ; url \'http://nexus.bsdn.org/content/groups/public/\' }\n            maven { name &quot;M2&quot; ; url \'https://plugins.gradle.org/m2/\' }\n        }\n    }\n}\n</code></pre>\n<p>​repositories 中写的是获取 jar 包的顺序。先是本地的 Maven 仓库路径；接着的 mavenLocal() 是获取 Maven 本地仓库的路径，应该是和第一条一样，但是不冲突；第三条和第四条是从国内和国外的网络上仓库获取；最后的 mavenCentral() 是从Apache提供的中央仓库获取 jar 包。</p>\n', 0, NULL, NULL, '# 配置 Gradle 环境\n\n## 一、 Windows\n\n### 1、配置环境变量\n\n- 变量名： **GRADLE_HOME**\n\n  变量值： **D:\\Gradle\\gradle-7.1.1**\n\n- 变量名： **GRADLE_USER_HOME**（可选）\n\n  变量值： **D:\\Maven\\repository**\n\n![2021-08-14_224053](https://img.qinweizhao.com/2021/08/2021-08-14_224053.png)\n\n- 变量名： **Path**\n\n  变量值： **%GRADLE_HOME%\\bin**\n\n  ![2021-08-14_224303](https://img.qinweizhao.com/2021/08/2021-08-14_224303.png)\n\n### 2、测试\n\n1. \"开始”->\"运行\"，键入\"cmd\"；\n2. 键入命令： **gradle -v** 命令，出现以下信息，说明环境变量配置成功；\n\n![2021-08-14_224418](https://img.qinweizhao.com/2021/08/2021-08-14_224418.png)\n\n### 3、配置 Gradle 仓库源\n\n　在Gradle安装目录下的 init.d 文件夹下，新建一个 init.gradle 文件，里面填写以下配置。\n\n```gradle\nallprojects {\n    repositories {\n        maven { url \'file:///D:/Maven/repository\'}\n        mavenLocal()\n        maven { name \"Alibaba\" ; url \"https://maven.aliyun.com/repository/public\" }\n        maven { name \"Bstek\" ; url \"http://nexus.bsdn.org/content/groups/public/\" }\n        mavenCentral()\n    }\n\n    buildscript { \n        repositories { \n            maven { name \"Alibaba\" ; url \'https://maven.aliyun.com/repository/public\' }\n            maven { name \"Bstek\" ; url \'http://nexus.bsdn.org/content/groups/public/\' }\n            maven { name \"M2\" ; url \'https://plugins.gradle.org/m2/\' }\n        }\n    }\n}\n```\n\n​repositories 中写的是获取 jar 包的顺序。先是本地的 Maven 仓库路径；接着的 mavenLocal() 是获取 Maven 本地仓库的路径，应该是和第一条一样，但是不冲突；第三条和第四条是从国内和国外的网络上仓库获取；最后的 mavenCentral() 是从Apache提供的中央仓库获取 jar 包。\n', '', 'pei-zhi-gradlekai-fa-huan-jing', 0, '配置 Gradle 开发环境一、 Windows1、配置环境变量变量名： GRADLE_HOME变量值： D:\\Gradle\\gradle-7.1.1变量名： GRADLE_USER_HOME（可选）变量值： D:\\Maven\\repository变量名： Path变量值： %GRADLE_HOME', '', '', '配置 Gradle 环境', 0, NULL, 66, 957);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 26, '2021-08-17 16:49:03.220000', '2022-03-06 18:48:53.764000', b'0', '2022-03-06 18:48:53.758000', 0, '<h1 id=\"centos-7-端口被占用处理\">CentOS 7 端口被占用处理</h1>\n<h2 id=\"一查看指定端口对应的-pid\">一、查看指定端口对应的 PID</h2>\n<pre><code class=\"language-bash\"># netstat -anp |　grep &quot;端口号&quot;\nnetstat -anp |　grep &quot;4682&quot;\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/08/2021-08-17_173434.png\" alt=\"2021-08-17_173434\" /></p>\n<h2 id=\"二使用-pid-杀掉进程\">二、使用 PId 杀掉进程</h2>\n<pre><code class=\"language-bash\"># kill -9 &quot;进程号&quot;\nkill -9 &quot;1905&quot;\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/08/2021-08-17_173806.png\" alt=\"2021-08-17_173806\" /></p>\n', 0, NULL, NULL, '# CentOS 7 端口被占用处理\n\n## 一、查看指定端口对应的 PID\n\n```bash\n# netstat -anp |　grep \"端口号\"\nnetstat -anp |　grep \"4682\"\n```\n\n![2021-08-17_173434](https://img.qinweizhao.com/2021/08/2021-08-17_173434.png)\n\n## 二、使用 PId 杀掉进程\n\n```bash\n# kill -9 \"进程号\"\nkill -9 \"1905\"\n```\n\n![2021-08-17_173806](https://img.qinweizhao.com/2021/08/2021-08-17_173806.png)', '', 'duan-kou-bei-zhan-yong-chu-li', 0, '端口被占用处理一、Windows1、查看指定端口对应的进程 Id# netstat -ano | findstr &quot;端口号&quot;netstat -ano | findstr &quot;4682&quot;2、通过 Id 查找对应的进程名称（可选）# tasklist |findst', '', '', 'CentOS 7 端口被占用处理', 0, NULL, 114, 149);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 27, '2021-08-24 10:45:18.119000', '2021-11-25 15:32:43.669000', b'0', '2021-11-25 15:32:43.662000', 0, '<h1 id=\"mysql-date-format-函数\">MySQL DATE_FORMAT() 函数</h1>\n<h2 id=\"一定义和用法\">一、定义和用法</h2>\n<ul>\n<li>\n<h3 id=\"语法\">语法</h3>\n</li>\n</ul>\n<blockquote>\n<p>#<em>date</em> 参数是合法的日期。<em>format</em> 规定日期/时间的输出格式。</p>\n<p>DATE_FORMAT(date,format)</p>\n</blockquote>\n<ul>\n<li>\n<h3 id=\"example\">example</h3>\n</li>\n</ul>\n<pre><code class=\"language-sql\">        SELECT\n            id,\n            DATE_FORMAT( upDateTime, \'%Y-%m-%d %H:%m:%s\' ) AS time,\n\n        FROM\n            `a` \n        WHERE\n            id = 1\n</code></pre>\n<h2 id=\"二参数格式说明\">二、参数格式说明</h2>\n<pre><code class=\"language-help\">    %M 月名字(January……December)  \n    %W 星期名字(Sunday……Saturday)  \n    %D 有英语前缀的月份的日期(1st, 2nd, 3rd, 等等。）  \n    %Y 年, 数字, 4 位  \n    %y 年, 数字, 2 位  \n    %a 缩写的星期名字(Sun……Sat)  \n    %d 月份中的天数, 数字(00……31)  \n    %e 月份中的天数, 数字(0……31)  \n    %m 月, 数字(01……12)  \n    %c 月, 数字(1……12)  \n    %b 缩写的月份名字(Jan……Dec)  \n    %j 一年中的天数(001……366)  \n    %H 小时(00……23)  \n    %k 小时(0……23)  \n    %h 小时(01……12)  \n    %I 小时(01……12)  \n    %l 小时(1……12)  \n    %i 分钟, 数字(00……59)  \n    %r 时间,12 小时(hh:mm:ss [AP]M)  \n    %T 时间,24 小时(hh:mm:ss)  \n    %S 秒(00……59)  \n    %s 秒(00……59)  \n    %p AM或PM  \n    %w 一个星期中的天数(0=Sunday ……6=Saturday ）  \n    %U 星期(0……52), 这里星期天是星期的第一天  \n    %u 星期(0……52), 这里星期一是星期的第一天  \n    %% 一个文字“%”。  \n</code></pre>\n', 0, NULL, NULL, '# MySQL DATE_FORMAT() 函数\n\n## 一、定义和用法\n\n- ### 语法\n\n>#*date* 参数是合法的日期。*format* 规定日期/时间的输出格式。\n>\n>DATE_FORMAT(date,format)\n\n- ### example\n\n```sql\n        SELECT\n            id,\n            DATE_FORMAT( upDateTime, \'%Y-%m-%d %H:%m:%s\' ) AS time,\n\n        FROM\n            `a` \n        WHERE\n            id = 1\n```\n\n## 二、参数格式说明\n\n```help\n    %M 月名字(January……December)  \n    %W 星期名字(Sunday……Saturday)  \n    %D 有英语前缀的月份的日期(1st, 2nd, 3rd, 等等。）  \n    %Y 年, 数字, 4 位  \n    %y 年, 数字, 2 位  \n    %a 缩写的星期名字(Sun……Sat)  \n    %d 月份中的天数, 数字(00……31)  \n    %e 月份中的天数, 数字(0……31)  \n    %m 月, 数字(01……12)  \n    %c 月, 数字(1……12)  \n    %b 缩写的月份名字(Jan……Dec)  \n    %j 一年中的天数(001……366)  \n    %H 小时(00……23)  \n    %k 小时(0……23)  \n    %h 小时(01……12)  \n    %I 小时(01……12)  \n    %l 小时(1……12)  \n    %i 分钟, 数字(00……59)  \n    %r 时间,12 小时(hh:mm:ss [AP]M)  \n    %T 时间,24 小时(hh:mm:ss)  \n    %S 秒(00……59)  \n    %s 秒(00……59)  \n    %p AM或PM  \n    %w 一个星期中的天数(0=Sunday ……6=Saturday ）  \n    %U 星期(0……52), 这里星期天是星期的第一天  \n    %u 星期(0……52), 这里星期一是星期的第一天  \n    %% 一个文字“%”。  \n```\n', '', 'mysqldateformathan-shu', 0, 'MySQL DATE_FORMAT() 函数一、定义和用法：语法#date 参数是合法的日期。format 规定日期/时间的输出格式。DATE_FORMAT(date,format)example        SELECT            id,            DATE_FORMAT', '', '', 'MySQL DATE_FORMAT() 函数', 0, NULL, 69, 626);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 28, '2021-08-17 16:45:18.119000', '2022-03-06 18:54:43.615000', b'0', '2022-03-06 18:54:43.608000', 0, '<h1 id=\"windows-端口被占用处理\">Windows 端口被占用处理</h1>\n<h2 id=\"一查看指定端口对应的进程-id\">一、查看指定端口对应的进程 Id</h2>\n<pre><code class=\"language-bash\"># netstat -ano | findstr &quot;端口号&quot;\nnetstat -ano | findstr &quot;4682&quot;\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/08/2021-08-17_161403.png\" alt=\"2021-08-17_161403\" /></p>\n<h2 id=\"二通过-id-查找对应的进程名称可选\">二、通过 Id 查找对应的进程名称（可选）</h2>\n<pre><code class=\"language-bash\"># tasklist |findstr &quot;进程id号&quot;\ntasklist |findstr &quot;23468&quot;\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/08/2021-08-17_161926.png\" alt=\"2021-08-17_161926\" /></p>\n<h2 id=\"三使用进程-id-或者进程名称杀掉进程\">三、使用进程 Id 或者进程名称杀掉进程</h2>\n<pre><code class=\"language-bash\"># taskkill /f /t /im &quot;进程id或者进程名称&quot;\ntaskkill /f /t /im &quot;java.exe&quot;\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/08/2021-08-17_161953.png\" alt=\"2021-08-17_161953\" /></p>\n', 0, NULL, NULL, '# Windows 端口被占用处理\n\n## 一、查看指定端口对应的进程 Id\n\n```bash\n# netstat -ano | findstr \"端口号\"\nnetstat -ano | findstr \"4682\"\n```\n\n![2021-08-17_161403](https://img.qinweizhao.com/2021/08/2021-08-17_161403.png)\n\n## 二、通过 Id 查找对应的进程名称（可选）\n\n```bash\n# tasklist |findstr \"进程id号\"\ntasklist |findstr \"23468\"\n```\n\n![2021-08-17_161926](https://img.qinweizhao.com/2021/08/2021-08-17_161926.png)\n\n## 三、使用进程 Id 或者进程名称杀掉进程\n\n```bash\n# taskkill /f /t /im \"进程id或者进程名称\"\ntaskkill /f /t /im \"java.exe\"\n```\n\n![2021-08-17_161953](https://img.qinweizhao.com/2021/08/2021-08-17_161953.png)', '', 'windowsduan-kou-bei-zhan-yong-chu-li', 0, 'Windows 端口被占用处理一、查看指定端口对应的进程 Id# netstat -ano | findstr &quot;端口号&quot;netstat -ano | findstr &quot;4682&quot;二、通过 Id 查找对应的进程名称（可选）# tasklist |findstr', '', '', 'Windows 端口被占用处理', 0, NULL, 3, 276);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 30, '2021-09-07 18:44:35.216000', '2021-11-25 15:31:24.517000', b'0', '2021-11-25 15:31:24.510000', 0, '<h1 id=\"springboot-日志\">SpringBoot 日志</h1>\n<h2 id=\"一现有的日志框架\">一、现有的日志框架</h2>\n<ul>\n<li>\n<p>JUL（Java util logging）、Logback、 Log4J、Log4J2</p>\n</li>\n<li>\n<p>JCL（Jakarta Commons Logging）、SLF4J（ Simple Logging Facade for Java）</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr><th>日志门面  （日志的抽象层）</th><th>日志实现</th></tr>\n</thead>\n<tbody>\n<tr><td>JCL（Jakarta  Commons Logging）    SLF4J（Simple  Logging Facade for Java）    <strong>jboss-logging</strong></td><td>Log4J  JUL（java.util.logging）  Log4J2  <strong>Logback</strong></td></tr>\n</tbody>\n</table>\n<p>左边选一个门面（抽象层）、右边来选一个实现；</p>\n<p>日志门面：  SLF4J；</p>\n<p>日志实现：Logback；</p>\n<blockquote>\n<p>SpringBoot：底层是 Spring 框架，Spring框架默认是用 JCL ；</p>\n<p><strong>SpringBoot 选用 SLF4j 和 Logback；</strong>；</p>\n</blockquote>\n<h2 id=\"二slf4j-使用\">二、SLF4J 使用</h2>\n<p>官网地址：<a href=\"https://www.slf4j.org\">https://www.slf4j.org</a></p>\n<h3 id=\"1如何在系统中使用\">1、如何在系统中使用</h3>\n<ol>\n<li>\n<p>导包</p>\n<pre><code class=\"language-xml\">&lt;!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-api --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;\n            &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;\n            &lt;version&gt;2.0.0-alpha5&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;!-- https://mvnrepository.com/artifact/ch.qos.logback/logback-classic --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;\n            &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;\n            &lt;version&gt;1.3.0-alpha10&lt;/version&gt;\n            &lt;scope&gt;compile&lt;/scope&gt;\n        &lt;/dependency&gt;\n</code></pre>\n</li>\n<li>\n<p>使用</p>\n<pre><code class=\"language-java\">public class TestMain {\n    public static void main(String[] args) {\n        Logger log = LoggerFactory.getLogger(UtilMain.class);\n        log.info(&quot;Hello World&quot;);\n    }\n}\n</code></pre>\n</li>\n<li>\n<p>图示</p>\n<p><img src=\"https://img.qinweizhao.com/2021/09/2021-09-06_171032.png\" alt=\"2021-09-06_171032\" /></p>\n</li>\n</ol>\n<h3 id=\"2遗留问题\">2、遗留问题</h3>\n<blockquote>\n<p>Spring（commons-logging）、Hibernate（jboss-logging）</p>\n</blockquote>\n<p>如何让系统中所有的日志都统一到 slf4j?</p>\n<ol>\n<li>将系统中其他日志框架先排除出去。</li>\n<li>用中间包来替换原有的日志框架。</li>\n<li>我们导入 slf4j 其他的实现。</li>\n<li>图示：</li>\n</ol>\n<p><img src=\"https://img.qinweizhao.com/2021/09/2021-09-06_171526.png\" alt=\"2021-09-06_171526\" /></p>\n<h2 id=\"三springboot-日志依赖关系\">三、SpringBoot 日志依赖关系</h2>\n<h3 id=\"1pom依赖\">1、pom依赖</h3>\n<pre><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;\n&lt;/dependency&gt;\n                    ||\n                    \\/\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre>\n<h3 id=\"2图示\">2、图示</h3>\n<p><img src=\"https://img.qinweizhao.com/2021/09/2021-09-07_150213.png\" alt=\"2021-09-07_150213\" /></p>\n<h2 id=\"四配置\">四、配置</h2>\n<h3 id=\"1默认配置\">1、默认配置</h3>\n<pre><code class=\"language-java\">@SpringBootTest\nclass LevelTest {\n\n    Logger logger = LoggerFactory.getLogger(getClass());\n\n    /**\n     * 日志的级别 由高到低 OFF &gt; FATAL &gt; ERROR &gt; WARN &gt; INFO &gt; DEBUG &gt; TRACE &gt; ALL\n     * SpringBoot 默认使用的是 info 级别，日志输出只会输出 info 级别之后的\n     */\n    @Test\n    void testLevel() {\n        logger.trace(&quot;这是trace日志...&quot;);\n        logger.debug(&quot;这是debug日志...&quot;);\n        logger.info(&quot;这是info日志...&quot;);\n        logger.warn(&quot;这是warn日志...&quot;);\n        logger.error(&quot;这是error日志...&quot;);\n    }\n\n}\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/09/2021-09-07_162233.png\" alt=\"2021-09-07_162233\" /></p>\n<h3 id=\"2修改默认配置\">2、修改默认配置</h3>\n<pre><code class=\"language-properties\"># 修改日志输出级别\nlogging.level.com.qinweizhao=trace\n# 在src/main/resources文件夹下生成 spring.log 作为默认文件\nlogging.file.path=src/main/resources\n# 在控制台输出的日志的格式\nlogging.pattern.console=%d{yyyy-MM-dd} [%thread] %-5level %logger{50} - %msg%n\n# 指定文件中日志输出的格式\nlogging.pattern.file=%d{yyyy-MM-dd} === [%thread] === %-5level === %logger{50} ==== %msg%n\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/09/2021-09-07_170744.png\" alt=\"2021-09-07_170744\" /></p>\n<blockquote>\n<p><span yyyy-MM-dd=\"\" HH:mm:ss.SSS=\"\">补充：<br />\n日志输出格式：<br />\n%d表示日期时间，<br />\n%thread表示线程名，<br />\n%-5level：级别从左显示5个字符宽度<br />\n%logger{50} 表示logger名字最长50个字符，否则按照句点分割。<br />\n%msg：日志消息，<br />\n%n是换行符<br />\n--&gt;<br />\n%d</span> [%thread] %-5level %logger{50} - %msg%n</p>\n</blockquote>\n<h3 id=\"3指定配置\">3、指定配置</h3>\n<p>给类路径下放上每个日志框架自己的配置文件即可；SpringBoot就不使用他默认配置的了</p>\n<table>\n<thead>\n<tr><th>Logging System</th><th>Customization</th></tr>\n</thead>\n<tbody>\n<tr><td>Logback</td><td><code>logback-spring.xml</code>, <code>logback-spring.groovy</code>, <code>logback.xml</code> or <code>logback.groovy</code></td></tr>\n<tr><td>Log4j2</td><td><code>log4j2-spring.xml</code> or <code>log4j2.xml</code></td></tr>\n<tr><td>JDK (Java Util Logging)</td><td><code>logging.properties</code></td></tr>\n</tbody>\n</table>\n<p>logback.xml：直接就被日志框架识别了；</p>\n<p><strong>logback-spring.xml</strong>：日志框架就不直接加载日志的配置项，由 SpringBoot 解析日志配置，可以使用 SpringBoot 的高级Profile功能</p>\n<pre><code class=\"language-xml\">&lt;springProfile name=&quot;staging&quot;&gt;\n &lt;!-- configuration to be enabled when the &quot;staging&quot; profile is active --&gt;\n 可以指定某段配置只在某个环境下生效\n&lt;/springProfile&gt;\n</code></pre>\n<p>如：</p>\n<pre><code class=\"language-xml\">&lt;appender name=&quot;stdout&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;\n&lt;!--\n   日志输出格式：\n   %d表示日期时间，\n   %thread表示线程名，\n   %-5level：级别从左显示5个字符宽度\n   %logger{50} 表示logger名字最长50个字符，否则按照句点分割。 \n   %msg：日志消息，\n   %n是换行符\n            --&gt;\n    &lt;layout class=&quot;ch.qos.logback.classic.PatternLayout&quot;&gt;\n        &lt;springProfile name=&quot;dev&quot;&gt;\n            &lt;pattern&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} ----&gt; [%thread] ---&gt; %-5level %logger{50} - %msg%n&lt;/pattern&gt;\n        &lt;/springProfile&gt;\n        &lt;springProfile name=&quot;!dev&quot;&gt;\n            &lt;pattern&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} ==== [%thread] ==== %-5level %logger{50} - %msg%n&lt;/pattern&gt;\n        &lt;/springProfile&gt;\n    &lt;/layout&gt;\n&lt;/appender&gt;\n</code></pre>\n<p>如果使用logback.xml作为日志配置文件，还要使用profile功能，会有以下错误</p>\n<blockquote>\n<p>no applicable action for [springProfile]</p>\n</blockquote>\n<p>如果 logback.xml 和logback-spring.xml 同时存在，那么 logback.xml 优先生效。</p>\n', 0, NULL, NULL, '# SpringBoot 日志\n\n## 一、现有的日志框架\n\n- JUL（Java util logging）、Logback、 Log4J、Log4J2\n\n- JCL（Jakarta Commons Logging）、SLF4J（ Simple Logging Facade for Java）\n\n| 日志门面  （日志的抽象层）                                   | 日志实现                                             |\n| ------------------------------------------------------------ | ---------------------------------------------------- |\n| JCL（Jakarta  Commons Logging）    SLF4J（Simple  Logging Facade for Java）    **jboss-logging** | Log4J  JUL（java.util.logging）  Log4J2  **Logback** |\n\n左边选一个门面（抽象层）、右边来选一个实现；\n\n日志门面：  SLF4J；\n\n日志实现：Logback；\n\n>SpringBoot：底层是 Spring 框架，Spring框架默认是用 JCL ；\n>\n>**SpringBoot 选用 SLF4j 和 Logback；**；\n\n## 二、SLF4J 使用\n\n官网地址：<https://www.slf4j.org>\n\n### 1、如何在系统中使用\n\n1. 导包\n\n   ``` xml\n   <!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-api -->\n           <dependency>\n               <groupId>org.slf4j</groupId>\n               <artifactId>slf4j-api</artifactId>\n               <version>2.0.0-alpha5</version>\n           </dependency>\n           <!-- https://mvnrepository.com/artifact/ch.qos.logback/logback-classic -->\n           <dependency>\n               <groupId>ch.qos.logback</groupId>\n               <artifactId>logback-classic</artifactId>\n               <version>1.3.0-alpha10</version>\n               <scope>compile</scope>\n           </dependency>\n   ```\n\n2. 使用\n\n   ``` java\n   public class TestMain {\n       public static void main(String[] args) {\n           Logger log = LoggerFactory.getLogger(UtilMain.class);\n           log.info(\"Hello World\");\n       }\n   }\n   ```\n\n3. 图示\n\n   ![2021-09-06_171032](https://img.qinweizhao.com/2021/09/2021-09-06_171032.png)\n\n### 2、遗留问题\n\n>Spring（commons-logging）、Hibernate（jboss-logging）\n\n如何让系统中所有的日志都统一到 slf4j?\n\n1. 将系统中其他日志框架先排除出去。\n2. 用中间包来替换原有的日志框架。\n3. 我们导入 slf4j 其他的实现。\n4. 图示：\n\n![2021-09-06_171526](https://img.qinweizhao.com/2021/09/2021-09-06_171526.png)\n\n## 三、SpringBoot 日志依赖关系\n\n### 1、pom依赖\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter</artifactId>\n</dependency>\n                    ||\n                    \\/\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-logging</artifactId>\n</dependency>\n```\n\n### 2、图示\n\n![2021-09-07_150213](https://img.qinweizhao.com/2021/09/2021-09-07_150213.png)\n\n## 四、配置\n\n### 1、默认配置\n\n```java\n@SpringBootTest\nclass LevelTest {\n\n    Logger logger = LoggerFactory.getLogger(getClass());\n\n    /**\n     * 日志的级别 由高到低 OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL\n     * SpringBoot 默认使用的是 info 级别，日志输出只会输出 info 级别之后的\n     */\n    @Test\n    void testLevel() {\n        logger.trace(\"这是trace日志...\");\n        logger.debug(\"这是debug日志...\");\n        logger.info(\"这是info日志...\");\n        logger.warn(\"这是warn日志...\");\n        logger.error(\"这是error日志...\");\n    }\n\n}\n```\n\n![2021-09-07_162233](https://img.qinweizhao.com/2021/09/2021-09-07_162233.png)\n\n### 2、修改默认配置\n\n```properties\n# 修改日志输出级别\nlogging.level.com.qinweizhao=trace\n# 在src/main/resources文件夹下生成 spring.log 作为默认文件\nlogging.file.path=src/main/resources\n# 在控制台输出的日志的格式\nlogging.pattern.console=%d{yyyy-MM-dd} [%thread] %-5level %logger{50} - %msg%n\n# 指定文件中日志输出的格式\nlogging.pattern.file=%d{yyyy-MM-dd} === [%thread] === %-5level === %logger{50} ==== %msg%n\n```\n\n![2021-09-07_170744](https://img.qinweizhao.com/2021/09/2021-09-07_170744.png)\n\n>补充：\n>日志输出格式：\n> %d表示日期时间，\n> %thread表示线程名，\n> %-5level：级别从左显示5个字符宽度\n> %logger{50} 表示logger名字最长50个字符，否则按照句点分割。\n> %msg：日志消息，\n> %n是换行符\n>-->\n>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n\n\n### 3、指定配置\n\n给类路径下放上每个日志框架自己的配置文件即可；SpringBoot就不使用他默认配置的了\n\n| Logging System          | Customization                                                |\n| ----------------------- | ------------------------------------------------------------ |\n| Logback                 | `logback-spring.xml`, `logback-spring.groovy`, `logback.xml` or `logback.groovy` |\n| Log4j2                  | `log4j2-spring.xml` or `log4j2.xml`                          |\n| JDK (Java Util Logging) | `logging.properties`                                         |\n\nlogback.xml：直接就被日志框架识别了；\n\n**logback-spring.xml**：日志框架就不直接加载日志的配置项，由 SpringBoot 解析日志配置，可以使用 SpringBoot 的高级Profile功能\n\n```xml\n<springProfile name=\"staging\">\n <!-- configuration to be enabled when the \"staging\" profile is active -->\n 可以指定某段配置只在某个环境下生效\n</springProfile>\n```\n\n如：\n\n```xml\n<appender name=\"stdout\" class=\"ch.qos.logback.core.ConsoleAppender\">\n<!--\n   日志输出格式：\n   %d表示日期时间，\n   %thread表示线程名，\n   %-5level：级别从左显示5个字符宽度\n   %logger{50} 表示logger名字最长50个字符，否则按照句点分割。 \n   %msg：日志消息，\n   %n是换行符\n            -->\n    <layout class=\"ch.qos.logback.classic.PatternLayout\">\n        <springProfile name=\"dev\">\n            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} ----> [%thread] ---> %-5level %logger{50} - %msg%n</pattern>\n        </springProfile>\n        <springProfile name=\"!dev\">\n            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} ==== [%thread] ==== %-5level %logger{50} - %msg%n</pattern>\n        </springProfile>\n    </layout>\n</appender>\n```\n\n如果使用logback.xml作为日志配置文件，还要使用profile功能，会有以下错误\n\n> no applicable action for [springProfile]\n\n如果 logback.xml 和logback-spring.xml 同时存在，那么 logback.xml 优先生效。\n', '', 'springbootri-zhi', 0, 'SpringBoot 日志一、现有的日志框架JUL（Java util logging）、Logback、 Log4J、Log4J2JCL（Jakarta Commons Logging）、SLF4J（ Simple Logging Facade for Java）日志门面  （日志的抽象层）日志实', '', '', 'Spring Boot 日志', 0, NULL, 63, 3688);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 31, '2021-09-11 23:57:37.813000', '2021-11-25 15:32:08.208000', b'0', '2021-11-25 15:32:08.201000', 0, '<h1 id=\"centos-7-通过-yum-安装-mysql-8\">CentOS 7 通过 yum 安装 MySQL 8</h1>\n<h2 id=\"一官网查看最新的安装包\">一、官网查看最新的安装包</h2>\n<p>[MySQL Yum Repository](<a href=\"https://dev.mysql.com/downloads/repo/yum/\">MySQL :: Download MySQL Yum Repository</a>)</p>\n<h2 id=\"二下载-mysql-源安装包\">二、下载 MySQL 源安装包</h2>\n<h3 id=\"1获取-rpm-包\">1、获取 rpm 包</h3>\n<pre><code class=\"language-bash\">wget https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm\n</code></pre>\n<h3 id=\"2安装-mysql-源\">2、安装 MySQL 源</h3>\n<pre><code class=\"language-bash\">yum -y install mysql80-community-release-el7-3.noarch.rpm\n</code></pre>\n<h3 id=\"3查看效果\">3、查看效果</h3>\n<pre><code class=\"language-bash\">yum repolist enabled | grep mysql.*\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/09/2021-09-11_235114.png\" alt=\"2021-09-11_235114\" /></p>\n<h2 id=\"三安装-mysql-服务器\">三、安装 MySQL 服务器</h2>\n<pre><code class=\"language-bash\">yum install mysql-community-server\n</code></pre>\n<h2 id=\"四启动-mysql-服务\">四、启动 MySQL 服务</h2>\n<pre><code class=\"language-bash\">systemctl start  mysqld.service\n</code></pre>\n<pre><code class=\"language-bash\">systemctl status mysqld.service\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/09/2021-09-11_235229.png\" alt=\"2021-09-11_235229\" /></p>\n<h2 id=\"五查看初始化密码\">五、查看初始化密码</h2>\n<pre><code class=\"language-gradle\">grep &quot;password&quot; /var/log/mysqld.log\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/09/2021-09-11_235335.png\" alt=\"2021-09-11_235335\" /></p>\n<h2 id=\"六修改-mysql-密码\">六、修改 MySQL 密码</h2>\n<pre><code class=\"language-sql\">ALTER USER \'root\'@\'localhost\' IDENTIFIED BY \'你的密码\';\n</code></pre>\n<p>注：可能如果密码过于简单则会报错（1819）：新密码不符合当前策略；</p>\n<p><img src=\"https://img.qinweizhao.com/2021/09/2021-09-12_005621.png\" alt=\"2021-09-12_005621\" /></p>\n<p>修改过密码后如果嫌复杂可以设置简单密码（可选）：</p>\n<h3 id=\"1查看-mysql-初始的密码策略\">1、查看 MySQL 初始的密码策略</h3>\n<pre><code class=\"language-sql\">SHOW VARIABLES LIKE \'validate_password%\'; \n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/09/2021-09-12_011809.png\" alt=\"2021-09-12_011809\" /></p>\n<h3 id=\"2首先需要设置密码的验证强度等级设置-validate-password-policy-的全局参数为-low-即可\">2、首先需要设置密码的验证强度等级，设置 validate_password_policy 的全局参数为 LOW 即可</h3>\n<pre><code class=\"language-sql\">set global validate_password.policy=LOW; \n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/09/2021-09-12_011841.png\" alt=\"2021-09-12_011841\" /></p>\n<h3 id=\"3当前密码长度为-8-如果不介意的话就不用修改了按照通用的来讲设置为-6-位的密码设置-validate-password-length-的全局参数为-6-即可\">3、当前密码长度为 8 ，如果不介意的话就不用修改了，按照通用的来讲，设置为 6 位的密码，设置 validate_password_length 的全局参数为 6 即可</h3>\n<pre><code class=\"language-sql\">set global validate_password.length=6; \n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/09/2021-09-12_011847.png\" alt=\"2021-09-12_011847\" /></p>\n<h3 id=\"4现在可以为-mysql-设置简单密码了只要满足六位的长度即可\">4、现在可以为 mysql 设置简单密码了，只要满足六位的长度即可</h3>\n<pre><code class=\"language-sql\">ALTER USER \'root\'@\'localhost\' IDENTIFIED BY \'112121\'; \n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/09/2021-09-12_011854.png\" alt=\"2021-09-12_011854\" /></p>\n<p>注：在默认密码的长度最小值为 4 ，由 大/小写字母各一个 + 阿拉伯数字一个 + 特殊字符一个，<br />\n只要设置密码的长度小于 3 ，都将自动设值为 4 。</p>\n<p><img src=\"https://img.qinweizhao.com/2021/09/2021-09-12_012144.png\" alt=\"2021-09-12_012144\" /></p>\n<p>关于 mysql 密码策略相关参数；<br />\n1）、validate_password.length  固定密码的总长度；<br />\n2）、validate_password.dictionary_file 指定密码验证的文件路径；<br />\n3）、validate_password.mixed_case_count  整个密码中至少要包含大/小写字母的总个数；<br />\n4）、validate_password.number_count  整个密码中至少要包含阿拉伯数字的个数；<br />\n5）、validate_password.policy 指定密码的强度验证等级，默认为 MEDIUM；<br />\n关于 validate_password.policy 的取值：<br />\n0/LOW：只验证长度；<br />\n1/MEDIUM：验证长度、数字、大小写、特殊字符；<br />\n2/STRONG：验证长度、数字、大小写、特殊字符、字典文件；<br />\n6）、validate_password_special_char_count 整个密码中至少要包含特殊字符的个数；</p>\n<h2 id=\"六数据库授权\">六、数据库授权</h2>\n<pre><code class=\"language-sql\">USE mysql;\nupdate user set host=\'%\' where user=\'root\';\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/09/2021-09-12_003311.png\" alt=\"2021-09-12_003311\" /></p>\n<h2 id=\"七授权其他用户可选\">七、授权其他用户(可选)</h2>\n<h3 id=\"1创建新用户\">1、创建新用户</h3>\n<pre><code class=\"language-sql\">CREATE USER \'用户名\'@\'%\' IDENTIFIED BY \'123321\';\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/09/2021-09-12_015218.png\" alt=\"2021-09-12_015218\" /></p>\n<h3 id=\"2授权\">2、授权</h3>\n<pre><code class=\"language-sql\">update user set host=\'%\' where user=\'用户名\';\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/09/2021-09-12_015225.png\" alt=\"2021-09-12_015225\" /></p>\n<h2 id=\"八刷新权限\">八、刷新权限</h2>\n<pre><code class=\"language-sql\">FLUSH PRIVILEGES;\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/09/2021-09-12_003503.png\" alt=\"2021-09-12_003503\" /></p>\n<h2 id=\"九防火墙打开3306端口\">九、防火墙打开3306端口</h2>\n<pre><code class=\"language-bash\"># 执行 exit 退出 MySQL\nfirewall-cmd --zone=public --add-port=3306/tcp --permanent\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/09/2021-09-12_004529.png\" alt=\"2021-09-12_004529\" /></p>\n<h2 id=\"十重启防火墙\">十、重启防火墙</h2>\n<pre><code class=\"language-bash\">firewall-cmd --reload\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/09/2021-09-12_004540.png\" alt=\"2021-09-12_004540\" /></p>\n', 0, NULL, NULL, '# CentOS 7 通过 yum 安装 MySQL 8\n\n## 一、官网查看最新的安装包\n\n[MySQL Yum Repository]([MySQL :: Download MySQL Yum Repository](https://dev.mysql.com/downloads/repo/yum/))\n\n## 二、下载 MySQL 源安装包\n\n### 1、获取 rpm 包\n\n``` bash\nwget https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm\n```\n\n### 2、安装 MySQL 源\n\n```bash\nyum -y install mysql80-community-release-el7-3.noarch.rpm\n```\n\n### 3、查看效果\n\n```bash\nyum repolist enabled | grep mysql.*\n```\n\n![2021-09-11_235114](https://img.qinweizhao.com/2021/09/2021-09-11_235114.png)\n\n## 三、安装 MySQL 服务器\n\n``` bash\nyum install mysql-community-server\n```\n\n## 四、启动 MySQL 服务\n\n```bash\nsystemctl start  mysqld.service\n```\n\n```bash\nsystemctl status mysqld.service\n```\n\n![2021-09-11_235229](https://img.qinweizhao.com/2021/09/2021-09-11_235229.png)\n\n## 五、查看初始化密码\n\n```gradle\ngrep \"password\" /var/log/mysqld.log\n```\n\n![2021-09-11_235335](https://img.qinweizhao.com/2021/09/2021-09-11_235335.png)\n\n## 六、修改 MySQL 密码\n\n``` sql\nALTER USER \'root\'@\'localhost\' IDENTIFIED BY \'你的密码\';\n```\n\n注：可能如果密码过于简单则会报错（1819）：新密码不符合当前策略；\n\n![2021-09-12_005621](https://img.qinweizhao.com/2021/09/2021-09-12_005621.png)\n\n修改过密码后如果嫌复杂可以设置简单密码（可选）：\n\n### 1、查看 MySQL 初始的密码策略\n\n```sql\nSHOW VARIABLES LIKE \'validate_password%\'; \n```\n\n![2021-09-12_011809](https://img.qinweizhao.com/2021/09/2021-09-12_011809.png)\n\n### 2、首先需要设置密码的验证强度等级，设置 validate_password_policy 的全局参数为 LOW 即可\n\n```sql\nset global validate_password.policy=LOW; \n```\n\n![2021-09-12_011841](https://img.qinweizhao.com/2021/09/2021-09-12_011841.png)\n\n### 3、当前密码长度为 8 ，如果不介意的话就不用修改了，按照通用的来讲，设置为 6 位的密码，设置 validate_password_length 的全局参数为 6 即可\n\n```sql\nset global validate_password.length=6; \n```\n\n![2021-09-12_011847](https://img.qinweizhao.com/2021/09/2021-09-12_011847.png)\n\n### 4、现在可以为 mysql 设置简单密码了，只要满足六位的长度即可\n\n```sql\nALTER USER \'root\'@\'localhost\' IDENTIFIED BY \'112121\'; \n```\n\n![2021-09-12_011854](https://img.qinweizhao.com/2021/09/2021-09-12_011854.png)\n\n注：在默认密码的长度最小值为 4 ，由 大/小写字母各一个 + 阿拉伯数字一个 + 特殊字符一个，\n只要设置密码的长度小于 3 ，都将自动设值为 4 。\n\n![2021-09-12_012144](https://img.qinweizhao.com/2021/09/2021-09-12_012144.png)\n\n关于 mysql 密码策略相关参数；\n1）、validate_password.length  固定密码的总长度；\n2）、validate_password.dictionary_file 指定密码验证的文件路径；\n3）、validate_password.mixed_case_count  整个密码中至少要包含大/小写字母的总个数；\n4）、validate_password.number_count  整个密码中至少要包含阿拉伯数字的个数；\n5）、validate_password.policy 指定密码的强度验证等级，默认为 MEDIUM；\n关于 validate_password.policy 的取值：\n0/LOW：只验证长度；\n1/MEDIUM：验证长度、数字、大小写、特殊字符；\n2/STRONG：验证长度、数字、大小写、特殊字符、字典文件；\n6）、validate_password_special_char_count 整个密码中至少要包含特殊字符的个数；\n\n## 六、数据库授权\n\n```sql\nUSE mysql;\nupdate user set host=\'%\' where user=\'root\';\n```\n\n![2021-09-12_003311](https://img.qinweizhao.com/2021/09/2021-09-12_003311.png)\n\n## 七、授权其他用户(可选)\n\n### 1、创建新用户\n\n```sql\nCREATE USER \'用户名\'@\'%\' IDENTIFIED BY \'123321\';\n```\n\n![2021-09-12_015218](https://img.qinweizhao.com/2021/09/2021-09-12_015218.png)\n\n### 2、授权\n\n```sql\nupdate user set host=\'%\' where user=\'用户名\';\n```\n\n![2021-09-12_015225](https://img.qinweizhao.com/2021/09/2021-09-12_015225.png)\n\n## 八、刷新权限\n\n```sql\nFLUSH PRIVILEGES;\n```\n\n![2021-09-12_003503](https://img.qinweizhao.com/2021/09/2021-09-12_003503.png)\n\n## 九、防火墙打开3306端口\n\n```bash\n# 执行 exit 退出 MySQL\nfirewall-cmd --zone=public --add-port=3306/tcp --permanent\n```\n\n![2021-09-12_004529](https://img.qinweizhao.com/2021/09/2021-09-12_004529.png)\n\n## 十、重启防火墙\n\n```bash\nfirewall-cmd --reload\n```\n\n![2021-09-12_004540](https://img.qinweizhao.com/2021/09/2021-09-12_004540.png)\n', '', 'centos7tong-guo-yuman-zhuang-mysql', 0, 'CentOS 7 通过 yum 安装 MySQL一、官网查看最新的安装包[MySQL Yum Repository](MySQL :: Download MySQL Yum Repository)二、下载 MySQL 源安装包获取 rpm 包wget https://dev.mysql.com/ge', '', '', 'CentOS 7 通过 Yum 安装 MySQL 8', 0, NULL, 110, 1662);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 32, '2021-09-12 20:02:15.519000', '2021-11-25 15:32:01.050000', b'0', '2021-11-25 15:32:01.035000', 0, '<h1 id=\"centos-7-安装-elasticsearch-714\">CentOS 7 安装 Elasticsearch 7.14</h1>\n<h2 id=\"一下载-elasticsearch\">一、下载 Elasticsearch</h2>\n<ol>\n<li>\n<p>获取下载链接</p>\n<p><a href=\"https://www.elastic.co/cn/downloads/elasticsearch\">官网下载地址</a></p>\n</li>\n<li>\n<p>下载压缩包</p>\n<pre><code class=\"language-bash\">wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.14.1-linux-x86_64.tar.gz\n</code></pre>\n</li>\n<li>\n<p>解压（到上层目录）</p>\n<pre><code class=\"language-bash\">tar -zxvf elasticsearch-7.14.1-linux-x86_64.tar.gz -C ../\n</code></pre>\n</li>\n<li>\n<p>重命名</p>\n<pre><code class=\"language-bash\"># 返回上层目录\ncd ..\n\n# 重命名\nmv elasticsearch-7.14.1 elasticsearch\n</code></pre>\n</li>\n</ol>\n<h2 id=\"二修改配置\">二、修改配置</h2>\n<h3 id=\"1修改-linux-配置\">1、修改 Linux 配置</h3>\n<ol>\n<li>\n<p>限制 Linux 资源，配置文件为 <strong>/etc/security/limits.conf</strong></p>\n<pre><code class=\"language-bash\">vim /etc/security/limits.conf\n</code></pre>\n<p>在配置文件中增加：</p>\n<pre><code class=\"language-conf\"># 任何用户可以打开的最大的文件描述符数量，默认1024，这里的数值会限制tcp连接\n* soft nofile 65536 \n* hard nofile 65536\n# 任何用户可以打开的最大进程数\n* soft nproc 2048\n* hard nproc 4096\n# 锁住 swapping 因此需要在这个配置文件下再增加两行代码\nelasticsearch soft memlock unlimited\nelasticsearch hard memlock unlimited\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/09/2021-09-12_174651.png\" alt=\"2021-09-12_174651\" /></p>\n</li>\n<li>\n<p>Linux 内核配置，配置文件为 <strong>/etc/sysctl.conf</strong></p>\n<pre><code class=\"language-bash\">vim /etc/sysctl.conf\n</code></pre>\n<p>在配置文件中增加：</p>\n<pre><code class=\"language-conf\"># 修改虚拟内存的大小\nvm.max_map_count=655360\n\nfs.file-max=655360\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/09/2021-09-12_174234.png\" alt=\"2021-09-12_174234\" /></p>\n<p>更改完成后执行命令使得系统文件配置生效</p>\n<pre><code class=\"language-bash\">sysctl -p\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/09/2021-09-12_175221.png\" alt=\"2021-09-12_175221\" /></p>\n</li>\n</ol>\n<h3 id=\"2修改-elasticsearch-配置\">2、修改 Elasticsearch 配置</h3>\n<ol>\n<li>\n<p>Elasticsearch 的配置文件为安装目录的 <strong>config/elasticsearch.yml</strong></p>\n<pre><code class=\"language-bash\"># 进入 es 的安装目录\ncd /usr/local/elasticsearch/config\n\n# 编辑 yml 配置文件\nvim elasticsearch.yml\n</code></pre>\n<p>在配置文件中增加：</p>\n<pre><code class=\"language-yaml\">cluster.name: my-application\nnode.name: node-1\n\nnetwork.host: 192.168.79.79\nhttp.port: 9200\n\ndiscovery.seed_hosts: [&quot;192.168.79.79&quot;]\ncluster.initial_master_nodes: [&quot;node-1&quot;]\n\nhttp.cors.enabled: true \nhttp.cors.allow-origin: &quot;*&quot;\n</code></pre>\n<p>补充：配置详解</p>\n<pre><code class=\"language-yaml\"># 配置的集群名称，默认是elasticsearch，es服务会通过广播方式自动连接在同一网段下的es服务，通过多播方式进行通信，同一网段下可以有多个集群，通过集群名称这个属性来区分不同的集群。\ncluster.name: elasticsearch\n\n# 当前配置所在机器的节点名，你不设置就默认随机指定一个name列表中名字，该name列表在es的jar包中config文件夹里name.txt文件中，其中有很多作者添加的有趣名字。\nnode.name: &quot;Franz Kafka&quot;\n\n# 指定该节点是否有资格被选举成为node（注意这里只是设置成有资格， 不代表该node一定就是master），默认是true，es是默认集群中的第一台机器为master，如果这台机挂了就会重新选举master。\nnode.master: true\n\n# 指定该节点是否存储索引数据，默认为true。 \nnode.data: true\n\n# 设置默认索引分片个数，默认为5片。\nindex.number_of_shards: 5\n\n# 设置默认索引副本个数，默认为1个副本。如果采用默认设置，而你集群只配置了一台机器，那么集群的健康度为yellow，也就是所有的数据都是可用的，但是某些复制没有被分配\n# （健康度可用 curl \'localhost:9200/_cat/health?v\' 查看， 分为绿色、黄色或红色。绿色代表一切正常，集群功能齐全，黄色意味着所有的数据都是可用的，但是某些复制没有被分配，红色则代表因为某些原因，某些数据不可用）。 \nindex.number_of_replicas: 1\n\n# 设置配置文件的存储路径，默认是es根目录下的config文件夹。\npath.conf: /path/to/conf\n\n# 设置索引数据的存储路径，默认是es根目录下的data文件夹，可以设置多个存储路径，用逗号隔开，例：\n# path.data: /path/to/data1,/path/to/data2 \npath.data: /path/to/data\n\n# 设置临时文件的存储路径，默认是es根目录下的work文件夹。\npath.work: /path/to/work\n\n# 设置日志文件的存储路径，默认是es根目录下的logs文件夹  \npath.logs: /path/to/logs\n\n# 设置插件的存放路径，默认是es根目录下的plugins文件夹, 插件在es里面普遍使用，用来增强原系统核心功能。 \npath.plugins: /path/to/plugins\n\n# 设置为true来锁住内存不进行swapping。因为当jvm开始swapping时es的效率 会降低，所以要保证它不swap，可以把ES_MIN_MEM和ES_MAX_MEM两个环境变量设置成同一个值，并且保证机器有足够的内存分配给es。 同时也要允许elasticsearch的进程可以锁住内# # 存，linux下启动es之前可以通过`ulimit -l unlimited`命令设置。 \nbootstrap.mlockall: true\n\n# 设置绑定的ip地址，可以是ipv4或ipv6的，默认为0.0.0.0，绑定这台机器的任何一个ip。 \nnetwork.bind_host: 192.168.0.1\n\n# 设置其它节点和该节点交互的ip地址，如果不设置它会自动判断，值必须是个真实的ip地址。 \nnetwork.publish_host: 192.168.0.1\n\n# 这个参数是用来同时设置bind_host和publish_host上面两个参数。\nnetwork.host: 192.168.0.1\n\n# 设置节点之间交互的tcp端口，默认是9300。 \ntransport.tcp.port: 9300\n\n# 设置是否压缩tcp传输时的数据，默认为false，不压缩。\ntransport.tcp.compress: true\n\n# 设置对外服务的http端口，默认为9200。\nhttp.port: 9200\n\n# 设置内容的最大容量，默认100mb。\nhttp.max_content_length: 100mb\n\n# 是否使用http协议对外提供服务，默认为true，开启。\nhttp.enabled: false\n\n# gateway的类型，默认为local即为本地文件系统，可以设置为本地文件系统，分布式文件系统，hadoop的HDFS，和amazon的s3服务器等。\ngateway.type: local\n\n# 设置集群中N个节点启动时进行数据恢复，默认为1。\ngateway.recover_after_nodes: 1\n\n# 设置初始化数据恢复进程的超时时间，默认是5分钟。\ngateway.recover_after_time: 5m\n\n# 设置这个集群中节点的数量，默认为2，一旦这N个节点启动，就会立即进行数据恢复。\ngateway.expected_nodes: 2\n\n# 初始化数据恢复时，并发恢复线程的个数，默认为4。\ncluster.routing.allocation.node_initial_primaries_recoveries: 4\n\n# 添加删除节点或负载均衡时并发恢复线程的个数，默认为4。\ncluster.routing.allocation.node_concurrent_recoveries: 2\n\n# 设置数据恢复时限制的带宽，如入100mb，默认为0，即无限制。\nindices.recovery.max_size_per_sec: 0\n\n# 设置这个参数来限制从其它分片恢复数据时最大同时打开并发流的个数，默认为5。\nindices.recovery.concurrent_streams: 5\n\n# 设置这个参数来保证集群中的节点可以知道其它N个有master资格的节点。默认为1，对于大的集群来说，可以设置大一点的值（2-4）。\ndiscovery.zen.minimum_master_nodes: 1\n\n# 设置集群中自动发现其它节点时ping连接超时时间，默认为3秒，对于比较差的网络环境可以高点的值来防止自动发现时出错。\ndiscovery.zen.ping.timeout: 3s\n\n# 设置是否打开多播发现节点，默认是true。\ndiscovery.zen.ping.multicast.enabled: false\n\n# 设置集群中master节点的初始列表，可以通过这些节点来自动发现新加入集群的节点。\ndiscovery.zen.ping.unicast.hosts: [&quot;host1&quot;, &quot;host2:port&quot;, &quot;host3[portX-portY]&quot;]\n</code></pre>\n<p>elasticsearch 7 版本引入的新集群协调子系统，新增两个如下配置项</p>\n<pre><code class=\"language-yaml\">discovery.seed_hosts\ncluster.initial_master_nodes\n\n# 例子\ndiscovery.seed_hosts:\n   - 192.168.1.10:9300\n   - 192.168.1.11 \n   - seeds.mydomain.com \n\ncluster.initial_master_nodes: \n   - master-node-a\n   - master-node-b\n   - master-node-c\n</code></pre>\n</li>\n<li>\n<p>修改堆内存配置文件为安装目录的 <strong>jvm.options</strong></p>\n<pre><code class=\"language-bash\">vim config/jvm.options\n</code></pre>\n<p>在配置文件中增加：</p>\n<pre><code class=\"language-options\">-Xms512m\n-Xmx512m\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/09/2021-09-12_220444.png\" alt=\"2021-09-12_220444\" /></p>\n</li>\n<li>\n<p>使用 Elasticsearch 自带的 jdk（位置与 bin 目录同级的 jdk 文件夹）</p>\n<pre><code class=\"language-bash\"># 进入 bin 目录\ncd bin\n\n# 编辑\nvim elasticsearch-env\n</code></pre>\n<p>增加内容：</p>\n<pre><code class=\"language-elasticsearch-env\">ES_JAVA_HOME=&quot;/usr/local/elasticsearch/jdk&quot;\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/09/2021-09-12_185303.png\" alt=\"2021-09-12_185303\" /></p>\n</li>\n</ol>\n<h2 id=\"五启动-elasticsearch\">五、启动 Elasticsearch</h2>\n<h3 id=\"1新增系统用户\">1、新增系统用户</h3>\n<p>​由于 Elasticsearch 不能使用root账户启动。</p>\n<ol>\n<li>\n<p>新增用户</p>\n<pre><code class=\"language-bash\">useradd wz\n# 设置密码（可选）\npasswd wz\n</code></pre>\n</li>\n<li>\n<p>更改权限</p>\n<pre><code class=\"language-bash\">chown -R wz /usr/local/elasticsearch\n</code></pre>\n</li>\n<li>\n<p>切换用户</p>\n<pre><code class=\"language-bash\">su wz\n</code></pre>\n</li>\n</ol>\n<h3 id=\"2启动并验证\">2、启动并验证</h3>\n<ol>\n<li>\n<p>启动</p>\n<pre><code class=\"language-bash\"># 在 bin 目录下\n./elasticsearch\n</code></pre>\n</li>\n<li>\n<p>检查是否成功</p>\n<pre><code class=\"language-bash\">curl 192.168.79.79:9200\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/09/2021-09-12_195418.png\" alt=\"2021-09-12_195418\" /></p>\n</li>\n</ol>\n', 0, NULL, NULL, '# CentOS 7 安装 Elasticsearch 7.14\n\n## 一、下载 Elasticsearch\n\n1. 获取下载链接\n\n   [官网下载地址](https://www.elastic.co/cn/downloads/elasticsearch)\n\n2. 下载压缩包\n\n   ```bash\n   wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.14.1-linux-x86_64.tar.gz\n   ```\n\n3. 解压（到上层目录）\n\n   ```bash\n   tar -zxvf elasticsearch-7.14.1-linux-x86_64.tar.gz -C ../\n   ```\n\n4. 重命名\n\n   ```bash\n   # 返回上层目录\n   cd ..\n   \n   # 重命名\n   mv elasticsearch-7.14.1 elasticsearch\n   ```\n\n## 二、修改配置\n\n### 1、修改 Linux 配置\n\n1. 限制 Linux 资源，配置文件为 **/etc/security/limits.conf**\n\n   ```bash\n   vim /etc/security/limits.conf\n   ```\n\n   在配置文件中增加：\n\n   ```conf\n   # 任何用户可以打开的最大的文件描述符数量，默认1024，这里的数值会限制tcp连接\n   * soft nofile 65536 \n   * hard nofile 65536\n   # 任何用户可以打开的最大进程数\n   * soft nproc 2048\n   * hard nproc 4096\n   # 锁住 swapping 因此需要在这个配置文件下再增加两行代码\n   elasticsearch soft memlock unlimited\n   elasticsearch hard memlock unlimited\n   ```\n\n   ![2021-09-12_174651](https://img.qinweizhao.com/2021/09/2021-09-12_174651.png)\n\n2. Linux 内核配置，配置文件为 **/etc/sysctl.conf**\n\n   ```bash\n   vim /etc/sysctl.conf\n   ```\n\n   在配置文件中增加：\n\n   ```conf\n   # 修改虚拟内存的大小\n   vm.max_map_count=655360\n   \n   fs.file-max=655360\n   ```\n\n   ![2021-09-12_174234](https://img.qinweizhao.com/2021/09/2021-09-12_174234.png)\n\n   更改完成后执行命令使得系统文件配置生效\n\n   ```bash\n   sysctl -p\n   ```\n\n   ![2021-09-12_175221](https://img.qinweizhao.com/2021/09/2021-09-12_175221.png)\n\n### 2、修改 Elasticsearch 配置\n\n1. Elasticsearch 的配置文件为安装目录的 **config/elasticsearch.yml**\n\n   ```bash\n   # 进入 es 的安装目录\n   cd /usr/local/elasticsearch/config\n   \n   # 编辑 yml 配置文件\n   vim elasticsearch.yml\n   ```\n\n   在配置文件中增加：\n\n   ```yaml\n   cluster.name: my-application\n   node.name: node-1\n   \n   network.host: 192.168.79.79\n   http.port: 9200\n   \n   discovery.seed_hosts: [\"192.168.79.79\"]\n   cluster.initial_master_nodes: [\"node-1\"]\n   \n   http.cors.enabled: true \n   http.cors.allow-origin: \"*\"\n   ```\n\n   补充：配置详解\n\n   ```yaml\n   # 配置的集群名称，默认是elasticsearch，es服务会通过广播方式自动连接在同一网段下的es服务，通过多播方式进行通信，同一网段下可以有多个集群，通过集群名称这个属性来区分不同的集群。\n   cluster.name: elasticsearch\n   \n   # 当前配置所在机器的节点名，你不设置就默认随机指定一个name列表中名字，该name列表在es的jar包中config文件夹里name.txt文件中，其中有很多作者添加的有趣名字。\n   node.name: \"Franz Kafka\"\n   \n   # 指定该节点是否有资格被选举成为node（注意这里只是设置成有资格， 不代表该node一定就是master），默认是true，es是默认集群中的第一台机器为master，如果这台机挂了就会重新选举master。\n   node.master: true\n   \n   # 指定该节点是否存储索引数据，默认为true。 \n   node.data: true\n   \n   # 设置默认索引分片个数，默认为5片。\n   index.number_of_shards: 5\n   \n   # 设置默认索引副本个数，默认为1个副本。如果采用默认设置，而你集群只配置了一台机器，那么集群的健康度为yellow，也就是所有的数据都是可用的，但是某些复制没有被分配\n   # （健康度可用 curl \'localhost:9200/_cat/health?v\' 查看， 分为绿色、黄色或红色。绿色代表一切正常，集群功能齐全，黄色意味着所有的数据都是可用的，但是某些复制没有被分配，红色则代表因为某些原因，某些数据不可用）。 \n   index.number_of_replicas: 1\n   \n   # 设置配置文件的存储路径，默认是es根目录下的config文件夹。\n   path.conf: /path/to/conf\n   \n   # 设置索引数据的存储路径，默认是es根目录下的data文件夹，可以设置多个存储路径，用逗号隔开，例：\n   # path.data: /path/to/data1,/path/to/data2 \n   path.data: /path/to/data\n   \n   # 设置临时文件的存储路径，默认是es根目录下的work文件夹。\n   path.work: /path/to/work\n   \n   # 设置日志文件的存储路径，默认是es根目录下的logs文件夹  \n   path.logs: /path/to/logs\n   \n   # 设置插件的存放路径，默认是es根目录下的plugins文件夹, 插件在es里面普遍使用，用来增强原系统核心功能。 \n   path.plugins: /path/to/plugins\n   \n   # 设置为true来锁住内存不进行swapping。因为当jvm开始swapping时es的效率 会降低，所以要保证它不swap，可以把ES_MIN_MEM和ES_MAX_MEM两个环境变量设置成同一个值，并且保证机器有足够的内存分配给es。 同时也要允许elasticsearch的进程可以锁住内# # 存，linux下启动es之前可以通过`ulimit -l unlimited`命令设置。 \n   bootstrap.mlockall: true\n   \n   # 设置绑定的ip地址，可以是ipv4或ipv6的，默认为0.0.0.0，绑定这台机器的任何一个ip。 \n   network.bind_host: 192.168.0.1\n   \n   # 设置其它节点和该节点交互的ip地址，如果不设置它会自动判断，值必须是个真实的ip地址。 \n   network.publish_host: 192.168.0.1\n   \n   # 这个参数是用来同时设置bind_host和publish_host上面两个参数。\n   network.host: 192.168.0.1\n   \n   # 设置节点之间交互的tcp端口，默认是9300。 \n   transport.tcp.port: 9300\n   \n   # 设置是否压缩tcp传输时的数据，默认为false，不压缩。\n   transport.tcp.compress: true\n   \n   # 设置对外服务的http端口，默认为9200。\n   http.port: 9200\n   \n   # 设置内容的最大容量，默认100mb。\n   http.max_content_length: 100mb\n   \n   # 是否使用http协议对外提供服务，默认为true，开启。\n   http.enabled: false\n   \n   # gateway的类型，默认为local即为本地文件系统，可以设置为本地文件系统，分布式文件系统，hadoop的HDFS，和amazon的s3服务器等。\n   gateway.type: local\n   \n   # 设置集群中N个节点启动时进行数据恢复，默认为1。\n   gateway.recover_after_nodes: 1\n   \n   # 设置初始化数据恢复进程的超时时间，默认是5分钟。\n   gateway.recover_after_time: 5m\n   \n   # 设置这个集群中节点的数量，默认为2，一旦这N个节点启动，就会立即进行数据恢复。\n   gateway.expected_nodes: 2\n   \n   # 初始化数据恢复时，并发恢复线程的个数，默认为4。\n   cluster.routing.allocation.node_initial_primaries_recoveries: 4\n   \n   # 添加删除节点或负载均衡时并发恢复线程的个数，默认为4。\n   cluster.routing.allocation.node_concurrent_recoveries: 2\n   \n   # 设置数据恢复时限制的带宽，如入100mb，默认为0，即无限制。\n   indices.recovery.max_size_per_sec: 0\n   \n   # 设置这个参数来限制从其它分片恢复数据时最大同时打开并发流的个数，默认为5。\n   indices.recovery.concurrent_streams: 5\n   \n   # 设置这个参数来保证集群中的节点可以知道其它N个有master资格的节点。默认为1，对于大的集群来说，可以设置大一点的值（2-4）。\n   discovery.zen.minimum_master_nodes: 1\n   \n   # 设置集群中自动发现其它节点时ping连接超时时间，默认为3秒，对于比较差的网络环境可以高点的值来防止自动发现时出错。\n   discovery.zen.ping.timeout: 3s\n   \n   # 设置是否打开多播发现节点，默认是true。\n   discovery.zen.ping.multicast.enabled: false\n   \n   # 设置集群中master节点的初始列表，可以通过这些节点来自动发现新加入集群的节点。\n   discovery.zen.ping.unicast.hosts: [\"host1\", \"host2:port\", \"host3[portX-portY]\"]\n   ```\n\n   elasticsearch 7 版本引入的新集群协调子系统，新增两个如下配置项\n\n   ```yaml\n   discovery.seed_hosts\n   cluster.initial_master_nodes\n   \n   # 例子\n   discovery.seed_hosts:\n      - 192.168.1.10:9300\n      - 192.168.1.11 \n      - seeds.mydomain.com \n      \n   cluster.initial_master_nodes: \n      - master-node-a\n      - master-node-b\n      - master-node-c\n   ```\n\n2. 修改堆内存配置文件为安装目录的 **jvm.options**\n\n   ```bash\n   vim config/jvm.options\n   ```\n\n   在配置文件中增加：\n\n   ```options\n   -Xms512m\n   -Xmx512m\n   ```\n\n   ![2021-09-12_220444](https://img.qinweizhao.com/2021/09/2021-09-12_220444.png)\n\n3. 使用 Elasticsearch 自带的 jdk（位置与 bin 目录同级的 jdk 文件夹）\n\n   ```bash\n   # 进入 bin 目录\n   cd bin\n   \n   # 编辑\n   vim elasticsearch-env\n   ```\n\n   增加内容：\n\n   ```elasticsearch-env\n   ES_JAVA_HOME=\"/usr/local/elasticsearch/jdk\"\n   ```\n\n   ![2021-09-12_185303](https://img.qinweizhao.com/2021/09/2021-09-12_185303.png)\n\n## 五、启动 Elasticsearch\n\n### 1、新增系统用户\n\n​由于 Elasticsearch 不能使用root账户启动。\n\n1. 新增用户\n\n   ```bash\n   useradd wz\n   # 设置密码（可选）\n   passwd wz\n   ```\n\n2. 更改权限\n\n   ```bash\n   chown -R wz /usr/local/elasticsearch\n   ```\n\n3. 切换用户\n\n   ```bash\n   su wz\n   ```\n\n### 2、启动并验证\n\n1. 启动\n\n   ```bash\n   # 在 bin 目录下\n   ./elasticsearch\n   ```\n\n2. 检查是否成功\n\n   ```bash\n   curl 192.168.79.79:9200\n   ```\n\n   ![2021-09-12_195418](https://img.qinweizhao.com/2021/09/2021-09-12_195418.png)\n', '', 'centos7an-zhuang-elasticsearch714', 0, 'CentOS 7 安装 Elasticsearch 7.14一、下载 Elasticsearch获取下载链接官网下载地址下载压缩包wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.14.1-linux-', '', '', 'CentOS 7 安装 Elasticsearch 7.14', 0, NULL, 68, 4416);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 33, '2021-09-12 20:54:25.723000', '2021-11-25 15:32:35.992000', b'0', '2021-11-25 15:32:35.985000', 0, '<h1 id=\"centos-7-安装-kibana-714\">CentOS 7 安装 Kibana 7.14</h1>\n<h2 id=\"一下载-kibana\">一、下载 Kibana</h2>\n<ol>\n<li>\n<p>获取下载链接</p>\n<p><a href=\"https://www.elastic.co/cn/downloads/kibana\">官网下载地址</a></p>\n</li>\n<li>\n<p>下载压缩包</p>\n<pre><code class=\"language-bash\">wget https://artifacts.elastic.co/downloads/kibana/kibana-7.14.1-linux-x86_64.tar.gz\n</code></pre>\n</li>\n<li>\n<p>解压（到上层目录）</p>\n<pre><code class=\"language-bash\">tar -zxvf kibana-7.14.1-linux-x86_64.tar.gz -C ../\n</code></pre>\n</li>\n<li>\n<p>重命名</p>\n<pre><code class=\"language-bash\"># 返回上层目录\ncd ..\n\n# 重命名\nmv kibana-7.14.1-linux-x86_64/ kibana/\n</code></pre>\n</li>\n</ol>\n<h2 id=\"二修改配置\">二、修改配置</h2>\n<p>Kibana 的配置文件为安装目录的 <strong>config/kibana.yml</strong></p>\n<pre><code class=\"language-bash\"># 进入 kibana 的安装目录\ncd /usr/local/kibana/config\n\n# 编辑 yml 配置文件\nvim kibana.yml\n</code></pre>\n<p>在配置文件中增加：</p>\n<pre><code class=\"language-yaml\"># 端口\nserver.port: 5601\n\n# ip\nserver.host: &quot;192.168.79.79&quot;\n\n# es 地址\nelasticsearch.hosts: [&quot;http://192.168.79.79:9200&quot;]\n\n# kibana 索引\nkibana.index: &quot;.kibana&quot;\n\n# kibana默认文字是英文，变更成中文\ni18n.locale: &quot;zh-CN&quot;\n</code></pre>\n<h2 id=\"五启动-kibana-714\">五、启动 Kibana 7.14</h2>\n<ol>\n<li>\n<p>启动</p>\n<p>非 root 用户（推荐）</p>\n<pre><code class=\"language-bash\"># 在 bin 目录下\n./kibana\n</code></pre>\n<p>root 用户</p>\n<pre><code class=\"language-bash\">./kibana --allow-root\n</code></pre>\n</li>\n<li>\n<p>在浏览器中打开 <a href=\"http://192.168.79.79:5601\">http://192.168.79.79:5601</a> 检查是否成功</p>\n<p><img src=\"https://img.qinweizhao.com/2021/09/2021-09-12_205226.png\" alt=\"2021-09-12_205226\" /></p>\n</li>\n</ol>\n', 0, NULL, NULL, '# CentOS 7 安装 Kibana 7.14\n\n## 一、下载 Kibana\n\n1. 获取下载链接\n\n   [官网下载地址](https://www.elastic.co/cn/downloads/kibana)\n\n2. 下载压缩包\n\n   ```bash\n   wget https://artifacts.elastic.co/downloads/kibana/kibana-7.14.1-linux-x86_64.tar.gz\n   ```\n\n3. 解压（到上层目录）\n\n   ```bash\n   tar -zxvf kibana-7.14.1-linux-x86_64.tar.gz -C ../\n   ```\n\n4. 重命名\n\n   ```bash\n   # 返回上层目录\n   cd ..\n   \n   # 重命名\n   mv kibana-7.14.1-linux-x86_64/ kibana/\n   ```\n\n## 二、修改配置\n\nKibana 的配置文件为安装目录的 **config/kibana.yml**\n\n```bash\n# 进入 kibana 的安装目录\ncd /usr/local/kibana/config\n\n# 编辑 yml 配置文件\nvim kibana.yml\n```\n\n在配置文件中增加：\n\n```yaml\n# 端口\nserver.port: 5601\n\n# ip\nserver.host: \"192.168.79.79\"\n\n# es 地址\nelasticsearch.hosts: [\"http://192.168.79.79:9200\"]\n\n# kibana 索引\nkibana.index: \".kibana\"\n\n# kibana默认文字是英文，变更成中文\ni18n.locale: \"zh-CN\"\n```\n\n## 五、启动 Kibana 7.14\n\n1. 启动\n\n   非 root 用户（推荐）\n\n   ```bash\n   # 在 bin 目录下\n   ./kibana\n   ```\n\n   root 用户\n\n   ```bash\n   ./kibana --allow-root\n   ```\n\n2. 在浏览器中打开 <http://192.168.79.79:5601> 检查是否成功\n\n   ![2021-09-12_205226](https://img.qinweizhao.com/2021/09/2021-09-12_205226.png)\n', '', 'centos7an-zhuang-kibana714', 0, 'CentOS 7 安装 Kibana 7.14一、下载 Kibana获取下载链接官网下载地址下载压缩包wget https://artifacts.elastic.co/downloads/kibana/kibana-7.14.1-linux-x86_64.tar.gz解压（到上层目录）tar -z', '', '', 'CentOS 7 安装 Kibana 7.14', 0, NULL, 83, 670);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 34, '2021-09-15 14:13:56.456000', '2021-11-25 15:31:54.650000', b'0', '2021-11-25 15:31:54.643000', 0, '<h1 id=\"centos-7-yum-命令\">CentOS 7 Yum 命令</h1>\n<h2 id=\"一前置了解\">一、前置了解</h2>\n<p>​		当 Yum执行安装或删除的命令时，Yum会查询数据库，有无这一软件包，如果有，则检查其依赖冲突关系。如果有，则会给出提示，询问是否要同时安装或删除有冲突的包。</p>\n<h2 id=\"二yum-查询\">二、Yum 查询</h2>\n<ol>\n<li>\n<p>查找软件包</p>\n<pre><code class=\"language-bash\">yum search ~\n</code></pre>\n</li>\n<li>\n<p>列出所有可安装的软件包</p>\n<pre><code class=\"language-bash\">yum list\n</code></pre>\n</li>\n<li>\n<p>列出所有可更新的软件包</p>\n<pre><code class=\"language-bash\">yum list updates\n</code></pre>\n</li>\n<li>\n<p>列出所有已安装的软件包</p>\n<pre><code class=\"language-bash\">yum list installed\n</code></pre>\n</li>\n<li>\n<p>列出所有已安装但不在Yum Repository 內的软件包</p>\n<pre><code class=\"language-bash\">yum list extras\n</code></pre>\n</li>\n<li>\n<p>列出所指定软件包</p>\n<pre><code class=\"language-bash\">yum list ～\n</code></pre>\n</li>\n<li>\n<p>使用YUM获取软件包信息</p>\n<pre><code class=\"language-bash\">yum info ～\n</code></pre>\n</li>\n<li>\n<p>列出所有软件包的信息</p>\n<pre><code class=\"language-bash\">yum info\n</code></pre>\n</li>\n<li>\n<p>列出所有可更新的软件包信息</p>\n<pre><code class=\"language-bash\">yum info updates\n</code></pre>\n</li>\n<li>\n<p>列出所有已安裝的软件包信息</p>\n<pre><code class=\"language-bash\">yum info installed\n</code></pre>\n</li>\n<li>\n<p>列出所有已安裝但不在Yum Repository 內的软件包信息</p>\n<pre><code class=\"language-bash\">yum info extras\n</code></pre>\n</li>\n<li>\n<p>列出软件包提供哪些文件</p>\n<pre><code class=\"language-bash\">yum provides ~\n</code></pre>\n</li>\n</ol>\n<h2 id=\"三清除yum缓存\">三、清除YUM缓存</h2>\n<p>​		yum 会把下载的软件包和 header 存储在 cache 中，而不会自动删除。如果我们觉得它们占用了磁盘空间，可以使用 yum clean 指令进行清除，更精确的用法是 yum clean headers 清除 header ，yum clean packages 清除下载的 rpm 包，yum clean all 清除所有。</p>\n<ol>\n<li>\n<p>清除缓存目录(/var/cache/yum)下的软件包</p>\n<pre><code class=\"language-bash\">yum clean packages\n</code></pre>\n</li>\n<li>\n<p>清除缓存目录(/var/cache/yum)下的 headers</p>\n<pre><code class=\"language-bash\">yum clean headers\n</code></pre>\n</li>\n<li>\n<p>清除缓存目录(/var/cache/yum)下旧的 headers</p>\n<pre><code class=\"language-bash\">clean oldheaders\n</code></pre>\n</li>\n<li>\n<p>清除缓存目录（/var/cache/yum）下的软件包及旧的 headers</p>\n<pre><code class=\"language-bash\">yum clean, yum clean all (= yum clean packages; yum clean oldheaders)\n</code></pre>\n</li>\n</ol>\n<h2 id=\"四例子\">四、例子</h2>\n<pre><code class=\"language-bash\">yum update 升级系统\nyum install ～ 安装指定软件包\nyum update ～ 升级指定软件包\nyum remove ～ 卸载指定软件\nyum grouplist 查看系统中已经安装的和可用的软件组，可用的可以安装\nyum grooupinstall ～安装上一个命令显示的可用的软件组中的一个\nyum grooupupdate ～更新指定软件组的软件包\nyum grooupremove ～ 卸载指定软件组中的软件包\nyum deplist ～ 查询指定软件包的依赖关系\nyum list yum\\* 列出所有以yum开头的软件包\nyum localinstall ～ 从硬盘安装rpm包并使用yum解决依赖\n</code></pre>\n', 0, NULL, NULL, '# CentOS 7 Yum 命令\n\n## 一、前置了解\n\n​		当 Yum执行安装或删除的命令时，Yum会查询数据库，有无这一软件包，如果有，则检查其依赖冲突关系。如果有，则会给出提示，询问是否要同时安装或删除有冲突的包。\n\n## 二、Yum 查询\n\n1. 查找软件包\n\n   ```bash\n   yum search ~\n   ```\n\n2. 列出所有可安装的软件包\n\n   ```bash\n   yum list\n   ```\n\n3. 列出所有可更新的软件包\n\n   ```bash\n   yum list updates\n   ```\n\n4. 列出所有已安装的软件包\n\n   ```bash\n   yum list installed\n   ```\n\n5. 列出所有已安装但不在Yum Repository 內的软件包\n\n   ```bash\n   yum list extras\n   ```\n\n6. 列出所指定软件包\n\n   ```bash\n   yum list ～\n   ```\n\n7. 使用YUM获取软件包信息\n\n   ```bash\n   yum info ～\n   ```\n\n8. 列出所有软件包的信息\n\n   ```bash\n   yum info\n   ```\n\n9. 列出所有可更新的软件包信息\n\n   ```bash\n   yum info updates\n   ```\n\n10. 列出所有已安裝的软件包信息\n\n    ```bash\n    yum info installed\n    ```\n\n11. 列出所有已安裝但不在Yum Repository 內的软件包信息\n\n    ```bash\n    yum info extras\n    ```\n\n12. 列出软件包提供哪些文件\n\n    ```bash\n    yum provides ~\n    ```\n\n## 三、清除YUM缓存\n\n​		yum 会把下载的软件包和 header 存储在 cache 中，而不会自动删除。如果我们觉得它们占用了磁盘空间，可以使用 yum clean 指令进行清除，更精确的用法是 yum clean headers 清除 header ，yum clean packages 清除下载的 rpm 包，yum clean all 清除所有。\n\n1. 清除缓存目录(/var/cache/yum)下的软件包\n\n   ```bash\n   yum clean packages\n   ```\n\n2. 清除缓存目录(/var/cache/yum)下的 headers\n\n   ```bash\n   yum clean headers\n   ```\n\n3. 清除缓存目录(/var/cache/yum)下旧的 headers\n\n   ```bash\n   clean oldheaders\n   ```\n\n4. 清除缓存目录（/var/cache/yum）下的软件包及旧的 headers\n\n   ```bash\n   yum clean, yum clean all (= yum clean packages; yum clean oldheaders)\n   ```\n\n## 四、例子\n\n```bash\nyum update 升级系统\nyum install ～ 安装指定软件包\nyum update ～ 升级指定软件包\nyum remove ～ 卸载指定软件\nyum grouplist 查看系统中已经安装的和可用的软件组，可用的可以安装\nyum grooupinstall ～安装上一个命令显示的可用的软件组中的一个\nyum grooupupdate ～更新指定软件组的软件包\nyum grooupremove ～ 卸载指定软件组中的软件包\nyum deplist ～ 查询指定软件包的依赖关系\nyum list yum\\* 列出所有以yum开头的软件包\nyum localinstall ～ 从硬盘安装rpm包并使用yum解决依赖\n```\n\n', '', 'centos7yumming-ling', 0, 'CentOS 7 Yum 命令一、前置了解​当 Yum执行安装或删除的命令时，Yum会查询数据库，有无这一软件包，如果有，则检查其依赖冲突关系。如果有，则会给出提示，询问是否要同时安装或删除有冲突的包。二、Yum 查询查找软件包yum search ~列出所有可安装的软件包yum list列出所有可', '', '', 'CentOS 7 Yum 命令', 0, NULL, 100, 1071);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 35, '2021-09-15 14:49:11.391000', '2021-11-25 15:32:28.138000', b'0', '2021-11-25 15:32:28.130000', 0, '<h1 id=\"centos-7-查找-openjdk-的安装路径\">CentOS 7 查找 OpenJDK 的安装路径</h1>\n<h2 id=\"一确认是否已安装-jdk\">一、确认是否已安装 JDK</h2>\n<pre><code class=\"language-bash\">java -version\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/09/2021-09-15_144425.png\" alt=\"2021-09-15_144425\" /></p>\n<h2 id=\"二然后查找-java-命令的位置\">二、然后查找 java 命令的位置</h2>\n<pre><code class=\"language-bash\">which java\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/09/2021-09-15_144503.png\" alt=\"2021-09-15_144503\" /></p>\n<h2 id=\"三查找java命令的位置所对于的软链地址\">三、查找java命令的位置所对于的软链地址</h2>\n<pre><code class=\"language-bash\">ll /usr/bin/java\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/09/2021-09-15_144519.png\" alt=\"2021-09-15_144519\" /></p>\n<h2 id=\"四最后通过软链地址查找jdk的安装目录\">四、最后通过软链地址查找JDK的安装目录</h2>\n<pre><code class=\"language-bash\">ll /etc/alternatives/java\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/09/2021-09-15_144605.png\" alt=\"2021-09-15_144605\" /></p>\n', 0, NULL, NULL, '# CentOS 7 查找 OpenJDK 的安装路径\n\n## 一、确认是否已安装 JDK\n```bash\njava -version\n```\n\n![2021-09-15_144425](https://img.qinweizhao.com/2021/09/2021-09-15_144425.png)\n\n## 二、然后查找 java 命令的位置\n\n```bash\nwhich java\n```\n\n![2021-09-15_144503](https://img.qinweizhao.com/2021/09/2021-09-15_144503.png)\n\n## 三、查找java命令的位置所对于的软链地址\n\n```bash\nll /usr/bin/java\n```\n\n![2021-09-15_144519](https://img.qinweizhao.com/2021/09/2021-09-15_144519.png)\n\n## 四、最后通过软链地址查找JDK的安装目录\n\n```bash\nll /etc/alternatives/java\n```\n\n![2021-09-15_144605](https://img.qinweizhao.com/2021/09/2021-09-15_144605.png)\n\n', '', 'centos7cha-zhao-openjdkde-an-zhuang-lu-jing', 0, 'CentOS 7 查找 OpenJDK 的安装路径一、确认是否已安装 JDKjava -version二、然后查找 java 命令的位置which java三、查找java命令的位置所对于的软链地址ll /usr/bin/java四、最后通过软链地址查找JDK的安装目录ll /etc/alterna', '', '', 'CentOS 7 查找 OpenJDK 的安装路径', 0, NULL, 87, 149);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 36, '2021-09-15 15:12:14.684000', '2021-11-25 15:32:14.705000', b'0', '2021-11-25 15:32:14.698000', 0, '<h1 id=\"centos-7-卸载自带的-openjdk\">CentOS 7 卸载自带的 OpenJDK</h1>\n<h2 id=\"一查询系统是否已经安装-jdk\">一、查询系统是否已经安装 JDK</h2>\n<pre><code class=\"language-bash\">rpm -qa|grep java\n# 或\nrpm -qa|grep jdk\n# 或\nrpm -qa|grep gcj \n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/09/2021-09-15_145835.png\" alt=\"2021-09-15_145835\" /></p>\n<h2 id=\"二卸载已安装的-jdk\">二、卸载已安装的 JDK</h2>\n<p>除去以下三个可以不删除，剩余的全部删除。</p>\n<p><img src=\"https://img.qinweizhao.com/2021/09/2021-09-15_150553.png\" alt=\"2021-09-15_150553\" /></p>\n<p>删除命令：</p>\n<pre><code class=\"language-bash\">rpm -e --nodeps xxx\n</code></pre>\n<blockquote>\n<p>参数介绍：</p>\n<p>​		-e ：清除 (卸载) 软件包</p>\n<p>​		--nodeps：不验证软件包依赖</p>\n</blockquote>\n<p>验证是否卸载：</p>\n<pre><code class=\"language-bash\">java -version\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/09/2021-09-15_151037.png\" alt=\"2021-09-15_151037\" /></p>\n', 0, NULL, NULL, '# CentOS 7 卸载自带的 OpenJDK\n\n## 一、查询系统是否已经安装 JDK\n\n```bash\nrpm -qa|grep java\n# 或\nrpm -qa|grep jdk\n# 或\nrpm -qa|grep gcj \n```\n\n![2021-09-15_145835](https://img.qinweizhao.com/2021/09/2021-09-15_145835.png)\n\n## 二、卸载已安装的 JDK\n\n除去以下三个可以不删除，剩余的全部删除。\n\n![2021-09-15_150553](https://img.qinweizhao.com/2021/09/2021-09-15_150553.png)\n\n删除命令：\n\n```bash\nrpm -e --nodeps xxx\n```\n\n>参数介绍：\n>\n>​		-e ：清除 (卸载) 软件包\n>\n>​		--nodeps：不验证软件包依赖\n\n验证是否卸载：\n\n```bash\njava -version\n```\n\n![2021-09-15_151037](https://img.qinweizhao.com/2021/09/2021-09-15_151037.png)', '', 'centos7xie-zai-zi-dai-de-openjdk', 0, 'Centos 7 卸载自带的 OpenJDK一、查询系统是否已经安装 JDKrpm -qa|grep java# 或rpm -qa|grep jdk# 或rpm -qa|grep gcj 二、卸载已安装的 JDK除去以下三个可以不删除，剩余的全部删除。删除命令：rpm -e --nodeps xxx', '', '', 'CentOS 7 卸载自带的 OpenJDK', 0, NULL, 105, 188);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 38, '2021-09-17 18:24:53.696000', '2021-11-25 15:32:21.418000', b'0', '2021-11-25 15:32:21.407000', 0, '<h1 id=\"spring-boot-配置文件\">Spring Boot 配置文件</h1>\n<h2 id=\"一配置文件\">一、配置文件</h2>\n<h3 id=\"1格式\">1、格式</h3>\n<p>SpringBoot 配置文件名有两种不同的格式，一个是 properties ，另一个是 yaml 。yaml 还有另外一个特点，就是 yaml 中的数据是有序的，properties 中的数据是无序的。</p>\n<h3 id=\"2文件名\">2、文件名</h3>\n<p>默认的配置文件名为 application（可更改）</p>\n<ul>\n<li>application.properties</li>\n<li>application.yml</li>\n</ul>\n<h2 id=\"二yaml语法\">二、YAML语法</h2>\n<blockquote>\n<p>YAML：<strong>以数据为中心</strong>，比json、xml等更适合做配置文件；</p>\n</blockquote>\n<h3 id=\"1基本语法\">1、基本语法</h3>\n<p>k:(空格)v：表示一对键值对（空格必须有）；</p>\n<p>以<strong>空格</strong>的缩进来控制层级关系；只要是左对齐的一列数据，都是同一个层级的</p>\n<pre><code class=\"language-yaml\">server:\n    port: 8081\n</code></pre>\n<p>属性和值也是大小写敏感；</p>\n<h3 id=\"2值的写法\">2、值的写法</h3>\n<ol>\n<li>\n<p>字面量：普通的值（数字，字符串，布尔）</p>\n<p>k: v：字面直接来写；</p>\n<p>字符串默认不用加上单引号或者双引号；</p>\n<p>&quot;&quot;：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思</p>\n<p>name:   &quot;tom\\n jerry&quot;：输出： tom换行  jerry</p>\n<p>\'\'：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据</p>\n<p>name:   ‘tom\\n jerry’：输出： tom\\n jerry’i</p>\n</li>\n<li>\n<p>对象、Map（属性和值）（键值对）：</p>\n<p>k: v：在下一行来写对象的属性和值的关系；对象还是 k: v 的方式</p>\n<pre><code class=\"language-yaml\">user:\n  name: weizhao\n  age: 24\n</code></pre>\n<p>行内写法：</p>\n<pre><code class=\"language-yaml\">user2: {name: weizhao,age: 24}\n</code></pre>\n</li>\n<li>\n<p>数组（List、Set）：</p>\n<p>用 - 值表示数组中的一个元素</p>\n<pre><code class=\"language-yaml\">pets:\n  - cat\n  - dog\n  - pig\n</code></pre>\n<p>行内写法</p>\n<pre><code class=\"language-yaml\">pets: [cat,dog,pig]\n</code></pre>\n</li>\n</ol>\n<h3 id=\"3profile\">3、Profile</h3>\n<ol>\n<li>\n<p>多Profile文件</p>\n<p><span profile=\"\">我们在主配置文件编写的时候，文件名可以是   application-</span>.properties/yml</p>\n<p>默认使用application.properties的配置；</p>\n</li>\n<li>\n<p>yml支持多文档块方式</p>\n<pre><code class=\"language-yaml\">server:\n  port: 8081\nspring:\n  profiles:\n    active: prod\n\n---\nserver:\n  port: 8083\nspring:\n  profiles: dev\n\n\n---\n\nserver:\n  port: 8084\nspring:\n  profiles: prod  #指定属于哪个环境\n</code></pre>\n</li>\n<li>\n<p>激活指定profile</p>\n</li>\n</ol>\n<p>1、在配置文件中指定  spring.profiles.active=dev</p>\n<p>2、命令行：java -jar spring-boot-02-config-0.0.1-SNAPSHOT.jar --spring.profiles.active=dev；可以直接在测试的时候，配置传入命令行参数</p>\n<p>3、虚拟机参数；-Dspring.profiles.active=dev</p>\n<h2 id=\"三配置文件值注入\">三、配置文件值注入</h2>\n<h3 id=\"1spring-方式\">1、Spring 方式</h3>\n<p>配置文件：</p>\n<pre><code class=\"language-properties\">entity.user.name=&quot;qinweizhao&quot;\nentity.user.age=24\n</code></pre>\n<p>entity:</p>\n<pre><code class=\"language-java\">package com.qinweizhao.entity;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\n/**\n *\n *  * &lt;bean class=&quot;User&quot;&gt;\n *  *      &lt;property name=&quot;name&quot; value=&quot;字面量/${key}从环境变量、配置文件中获取值/#{SpEL}&quot;&gt;&lt;/property&gt;\n *  *      &lt;property name=&quot;age&quot; value=&quot;字面量/${key}从环境变量、配置文件中获取值/#{SpEL}&quot;&gt;&lt;/property&gt;\n *  * &lt;bean/&gt;\n *\n * @author qinweizhao\n * @since 2021/9/17\n */\n@Component\npublic class User {\n\n\n    /**\n     * 名字\n     */\n    @Value(&quot;${entity.user.name}&quot;)\n    private String name;\n\n    /**\n     * 年龄\n     */\n    @Value(&quot;${entity.user.age}&quot;)\n    private Integer age;\n\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public Integer getAge() {\n        return age;\n    }\n\n    public void setAge(Integer age) {\n        this.age = age;\n    }\n\n    @Override\n    public String toString() {\n        return &quot;User{&quot; +\n                &quot;name=\'&quot; + name + \'\\\'\' +\n                &quot;, age=&quot; + age +\n                \'}\';\n    }\n}\n</code></pre>\n<p>运行结果：</p>\n<pre><code class=\"language-json\">{\n    &quot;name&quot;: &quot;qinweizhao&quot;,\n    &quot;age&quot;: 24\n}\n</code></pre>\n<h3 id=\"2springboot-方式\">2、SpringBoot 方式</h3>\n<p>配置文件</p>\n<pre><code class=\"language-yaml\">person:\n  name: qinweizhao\n  age: 24\n  birth: 1997/12/01\n  pet:\n      tom:\n        name: 小狗\n  friend:\n    - one\n    - two\n</code></pre>\n<p>entity：</p>\n<pre><code class=\"language-java\">Person:\n\npackage com.qinweizhao.entity;\n\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.stereotype.Component;\nimport org.springframework.validation.annotation.Validated;\n\n\nimport javax.validation.constraints.Email;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n *\n *  * @ConfigurationProperties：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定；\n *  * prefix = &quot;person&quot;：配置文件中哪个下面的所有属性进行一一映射\n *\n * @author qinweizhao\n * @since 2021/9/17\n */\n@Component\n@ConfigurationProperties(prefix = &quot;person&quot;)\npublic class Person {\n\n    /**\n     * 姓名\n     */\n    private String name;\n\n    /**\n     * 年龄\n     */\n    private Integer age;\n\n    /**\n     * 生日\n     */\n    private Date birth;\n\n    /**\n     * 邮箱e\n     */\n    @Email\n    private String email;\n\n\n    /**\n     * 宠物\n     */\n    private Map&lt;String,Pet&gt; pet;\n\n    /**\n     * 朋友\n     */\n    private List&lt;Object&gt; friend;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public Integer getAge() {\n        return age;\n    }\n\n    public void setAge(Integer age) {\n        this.age = age;\n    }\n\n    public Date getBirth() {\n        return birth;\n    }\n\n    public void setBirth(Date birth) {\n        this.birth = birth;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    public Map&lt;String, Pet&gt; getPet() {\n        return pet;\n    }\n\n    public void setPet(Map&lt;String, Pet&gt; pet) {\n        this.pet = pet;\n    }\n\n    public List&lt;Object&gt; getFriend() {\n        return friend;\n    }\n\n    public void setFriend(List&lt;Object&gt; friend) {\n        this.friend = friend;\n    }\n\n    @Override\n    public String toString() {\n        return super.toString();\n    }\n}\n\n\n\nPet:\n\npackage com.qinweizhao.entity;\n\n\n/**\n * @author qinweizhao\n * @since 2021/9/17\n */\n\npublic class Pet {\n    private String name;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n\n</code></pre>\n<p>运行结果：</p>\n<pre><code class=\"language-json\">{\n    &quot;name&quot;: &quot;qinweizhao&quot;,\n    &quot;age&quot;: 24,\n    &quot;birth&quot;: &quot;1997-11-30T16:00:00.000+00:00&quot;,\n    &quot;email&quot;: null,\n    &quot;pet&quot;: {\n        &quot;tom&quot;: {\n            &quot;name&quot;: &quot;小狗&quot;\n        }\n    },\n    &quot;friend&quot;: [\n        &quot;one&quot;,\n        &quot;two&quot;\n    ]\n}\n</code></pre>\n<p><strong>补充</strong>：</p>\n<p>我们可以导入配置文件处理器，以后编写配置就有提示了</p>\n<pre><code class=\"language-xml\">&lt;!--导入配置文件处理器，配置文件进行绑定就会有提示--&gt;\n  &lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;\n    &lt;optional&gt;true&lt;/optional&gt;\n  &lt;/dependency&gt;\n</code></pre>\n<h3 id=\"3value-获取值和-configurationproperties-获取值比较\">3、@Value 获取值和 @ConfigurationProperties 获取值比较</h3>\n<table>\n<thead>\n<tr><th> </th><th>@ConfigurationProperties</th><th>@Value</th></tr>\n</thead>\n<tbody>\n<tr><td>功能</td><td>批量注入配置文件中的属性</td><td>一个个指定</td></tr>\n<tr><td>松散绑定（松散语法）</td><td>支持</td><td>不支持</td></tr>\n<tr><td>SpEL</td><td>不支持</td><td>支持</td></tr>\n<tr><td>JSR303数据校验</td><td>支持</td><td>不支持</td></tr>\n<tr><td>复杂类型封装</td><td>支持</td><td>不支持</td></tr>\n</tbody>\n</table>\n<p>配置文件无论 yml 还是 properties 他们都能获取到值；</p>\n<p>如果说，我们只是在某个业务逻辑中需要获取一下配置文件中的某项值，使用 @Value；</p>\n<p>如果说，我们专门编写了一个 javaBean 来和配置文件进行映射，我们就直接使用 @ConfigurationProperties；</p>\n<h3 id=\"4注入值数据校验\">4、注入值数据校验</h3>\n<ol>\n<li>\n<p>导包</p>\n<pre><code class=\"language-pom\">        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n</code></pre>\n</li>\n<li>\n<p>加注解</p>\n<pre><code class=\"language-java\">@Component\n@ConfigurationProperties(prefix = &quot;person&quot;)\n@Validated\npublic class Person {\n 、、、\n\n    /**\n     * 邮箱\n     * 类上标注 @Validated 注解\n     * 属性标注  \n     */\n    @Email\n    private String email;\n\n    、、、\n}\n</code></pre>\n</li>\n</ol>\n<h3 id=\"5propertysourceimportresourcebean\">5、@PropertySource&amp;@ImportResource&amp;@Bean</h3>\n<p>@<strong>PropertySource</strong>：加载指定的配置文件；</p>\n<pre><code class=\"language-java\">@PropertySource(value = {&quot;classpath:person.properties&quot;})\n加载 person.properties 配置文件\n</code></pre>\n<p><strong>注</strong>：即便指定了配置文件但还是会去读取 application 配置文件，并且优先读取 application 配置文件；指定配置文件默认只支持 properties 文件，若要用指定的 yam 则需要如下配置：</p>\n<pre><code class=\"language-java\">// 实体类\n@PropertySource(value = &quot;classpath:person.yml&quot;,factory = YamlPropertySourceFactory.class)\npublic class Person\n    \n    \n    \n// factory\npackage com.qinweizhao.support;\nimport org.springframework.boot.env.YamlPropertySourceLoader;\nimport org.springframework.core.env.PropertySource;\nimport org.springframework.core.io.support.EncodedResource;\nimport org.springframework.core.io.support.PropertySourceFactory;\nimport org.springframework.lang.Nullable;\nimport java.io.IOException;\nimport java.util.List;\n\n/**\n * @author qinweizhao\n * @since 2021/9/17\n */\npublic class YamlPropertySourceFactory implements PropertySourceFactory {\n    @Override\n    public PropertySource&lt;?&gt; createPropertySource(@Nullable String name, EncodedResource resource) throws IOException {\n        List&lt;PropertySource&lt;?&gt;&gt; sources = new YamlPropertySourceLoader().load(resource.getResource().getFilename(), resource.getResource());\n        return sources.get(0);\n    }\n\n}\n\n</code></pre>\n<p>@<strong>ImportResource</strong>：导入Spring的配置文件，让配置文件里面的内容生效；</p>\n<p>Spring Boot里面没有 Spring 的配置文件，我们自己编写的配置文件，也不能自动识别；</p>\n<p>想让 Spring 的配置文件生效，加载进来；@ImportResource 标注在一个配置类上</p>\n<pre><code class=\"language-java\">@ImportResource(locations = {&quot;classpath:beans.xml&quot;})\n导入Spring的配置文件让其生效\n</code></pre>\n<p>SpringBoot 推荐给容器中添加组件的方式；推荐使用全注解的方式</p>\n<p>1、配置类**@Configuration**------&gt;Spring配置文件</p>\n<p>2、使用**@Bean**给容器中添加组件</p>\n<pre><code class=\"language-java\">/**\n * @Configuration：指明当前类是一个配置类；就是来替代之前的Spring配置文件\n *\n * 在配置文件中用&lt;bean&gt;&lt;bean/&gt;标签添加组件\n *\n */\n@Configuration\npublic class MyConfig {\n\n    /**\n     * 将方法的返回值添加到容器中；容器中这个组件默认的id就是方法名\n     */\n    @Bean\n    public Person helloPerson(){\n        System.out.println(&quot;配置类@Bean给容器中添加组件了...&quot;);\n        return new Person();\n    }\n}\n</code></pre>\n<h3 id=\"6占位符\">6、占位符</h3>\n<ol>\n<li>\n<p>随机数</p>\n<pre><code class=\"language-java\">${random.value}、${random.int}、${random.long}\n${random.int(10)}、${random.int[1024,65536]}\n</code></pre>\n</li>\n<li>\n<p>占位符获取之前配置的值，如果没有可以是用:指定默认值</p>\n<pre><code class=\"language-properties\">person:\n  name: qinweizhao${random.uuid}\n  age: ${random.int}\n  birth: 1997/12/01\n#  email: 11111\n  pet:\n      tom:\n        name: ${person.hello:hello}小狗\n  friend:\n    - one\n    - two\n</code></pre>\n<p>运行结果：</p>\n<pre><code class=\"language-json\">{\n    &quot;name&quot;: &quot;qinweizhao 74f19257-6ae0-4b75-98e3-a1f5ae2176c9&quot;,\n    &quot;age&quot;: -1076407203,\n    &quot;birth&quot;: &quot;1997-11-30T16:00:00.000+00:00&quot;,\n    &quot;email&quot;: null,\n    &quot;pet&quot;: {\n        &quot;tom&quot;: {\n            &quot;name&quot;: &quot;hello小狗&quot;\n        }\n    },\n    &quot;friend&quot;: [\n        &quot;one&quot;,\n        &quot;two&quot;\n    ]\n}\n</code></pre>\n</li>\n</ol>\n<h2 id=\"四配置文件加载\">四、配置文件加载</h2>\n<h3 id=\"1加载位置\">1、加载位置</h3>\n<p>springboot 启动会扫描以下位置的 application.properties 或者 application.yml 文件作为 SpringBoot 的默认配置文件</p>\n<pre><code class=\"language-help\">–file:./config/\n\n–file:./\n\n–classpath:/config/\n\n–classpath:/\n\n优先级由高到底，高优先级的配置会覆盖低优先级的配置；SpringBoot 会从这四个位置全部加载主配置文件；互补配置；\n</code></pre>\n<p>可以通过 spring.config.location 来改变默认的配置文件位置；项目打包好以后，可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；指定配置文件和默认加载的这些配置文件共同起作用形成互补配置；</p>\n<pre><code class=\"language-bash\">java -jar boot-config-0.0.1-SNAPSHOT.jar --spring.config.location=G:/application.properties\n</code></pre>\n<h3 id=\"2加载顺序\">2、加载顺序</h3>\n<p>SpringBoot也可以从以下位置加载配置； 优先级从高到低；高优先级的配置覆盖低优先级的配置，所有的配置会形成互补配置</p>\n<ol>\n<li>\n<p>命令行参数</p>\n<p>所有的配置都可以在命令行上进行指定</p>\n<pre><code class=\"language-bash\"># 多个配置用空格分开； --配置项=值\njava -jar boot-config-0.0.1-SNAPSHOT.jar --server.port=8087  --server.context-path=/abc\n</code></pre>\n</li>\n<li>\n<p>来自java:comp/env的JNDI属性</p>\n</li>\n<li>\n<p>Java系统属性（System.getProperties()）</p>\n</li>\n<li>\n<p>操作系统环境变量</p>\n</li>\n<li>\n<p>RandomValuePropertySource配置的random.*属性值</p>\n<p>由jar包外向jar包内进行寻找</p>\n<p><strong>优先加载带profile</strong></p>\n</li>\n<li>\n<p><span profile=\"\">jar 包外部的 application-</span>.propertie s或 application.yml (带 spring.profile) 配置文件</p>\n</li>\n<li>\n<p><span profile=\"\">jar 包内部的 application-</span>.properties 或 application.yml (带spring.profile) 配置文件</p>\n<p><strong>再来加载不带profile</strong></p>\n</li>\n<li>\n<p>jar包外部的 application.properties 或 application.yml(不带spring.profile) 配置文件</p>\n</li>\n<li>\n<p>jar包内部的 application.properties 或 application.yml(不带spring.profile) 配置文件</p>\n</li>\n<li>\n<p>@Configuration 注解类上的 @PropertySource</p>\n</li>\n<li>\n<p>通过 SpringApplication.setDefaultProperties 指定的默认属性</p>\n</li>\n</ol>\n', 0, NULL, NULL, '# Spring Boot 配置文件\n\n## 一、配置文件\n\n### 1、格式\n\nSpringBoot 配置文件名有两种不同的格式，一个是 properties ，另一个是 yaml 。yaml 还有另外一个特点，就是 yaml 中的数据是有序的，properties 中的数据是无序的。\n\n### 2、文件名\n\n默认的配置文件名为 application（可更改）\n\n- application.properties\n- application.yml\n\n## 二、YAML语法\n\n>YAML：**以数据为中心**，比json、xml等更适合做配置文件；\n\n### 1、基本语法\n\nk:(空格)v：表示一对键值对（空格必须有）；\n\n以**空格**的缩进来控制层级关系；只要是左对齐的一列数据，都是同一个层级的\n\n```yaml\nserver:\n    port: 8081\n```\n\n属性和值也是大小写敏感；\n\n### 2、值的写法\n\n1. 字面量：普通的值（数字，字符串，布尔）\n\n   k: v：字面直接来写；\n\n   字符串默认不用加上单引号或者双引号；\n\n   \"\"：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思\n\n   name:   \"tom\\n jerry\"：输出： tom换行  jerry\n\n   \'\'：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据\n\n   name:   ‘tom\\n jerry’：输出： tom\\n jerry’i\n\n2. 对象、Map（属性和值）（键值对）：\n\n   k: v：在下一行来写对象的属性和值的关系；对象还是 k: v 的方式\n\n   ```yaml\n   user:\n     name: weizhao\n     age: 24\n   ```\n\n   行内写法：\n\n   ```yaml\n   user2: {name: weizhao,age: 24}\n   ```\n\n3. 数组（List、Set）：\n\n   用 - 值表示数组中的一个元素\n\n   ```yaml\n   pets:\n     - cat\n     - dog\n     - pig\n   ```\n\n   行内写法\n\n   ```yaml\n   pets: [cat,dog,pig]\n   ```\n\n### 3、Profile\n\n1. 多Profile文件\n\n   我们在主配置文件编写的时候，文件名可以是   application-{profile}.properties/yml\n\n   默认使用application.properties的配置；\n\n2. yml支持多文档块方式\n\n   ```yaml\n   server:\n     port: 8081\n   spring:\n     profiles:\n       active: prod\n   \n   ---\n   server:\n     port: 8083\n   spring:\n     profiles: dev\n   \n   \n   ---\n   \n   server:\n     port: 8084\n   spring:\n     profiles: prod  #指定属于哪个环境\n   ```\n\n3. 激活指定profile\n\n 1、在配置文件中指定  spring.profiles.active=dev\n\n 2、命令行：java -jar spring-boot-02-config-0.0.1-SNAPSHOT.jar --spring.profiles.active=dev；可以直接在测试的时候，配置传入命令行参数\n\n 3、虚拟机参数；-Dspring.profiles.active=dev\n\n## 三、配置文件值注入\n\n### 1、Spring 方式\n\n配置文件：\n\n```properties\nentity.user.name=\"qinweizhao\"\nentity.user.age=24\n```\n\nentity:\n\n```java\npackage com.qinweizhao.entity;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\n/**\n *\n *  * <bean class=\"User\">\n *  *      <property name=\"name\" value=\"字面量/${key}从环境变量、配置文件中获取值/#{SpEL}\"></property>\n *  *      <property name=\"age\" value=\"字面量/${key}从环境变量、配置文件中获取值/#{SpEL}\"></property>\n *  * <bean/>\n *\n * @author qinweizhao\n * @since 2021/9/17\n */\n@Component\npublic class User {\n\n\n    /**\n     * 名字\n     */\n    @Value(\"${entity.user.name}\")\n    private String name;\n\n    /**\n     * 年龄\n     */\n    @Value(\"${entity.user.age}\")\n    private Integer age;\n\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public Integer getAge() {\n        return age;\n    }\n\n    public void setAge(Integer age) {\n        this.age = age;\n    }\n\n    @Override\n    public String toString() {\n        return \"User{\" +\n                \"name=\'\" + name + \'\\\'\' +\n                \", age=\" + age +\n                \'}\';\n    }\n}\n```\n\n运行结果：\n\n```json\n{\n    \"name\": \"qinweizhao\",\n    \"age\": 24\n}\n```\n\n### 2、SpringBoot 方式\n\n配置文件\n\n```yaml\nperson:\n  name: qinweizhao\n  age: 24\n  birth: 1997/12/01\n  pet:\n      tom:\n        name: 小狗\n  friend:\n    - one\n    - two\n```\n\nentity：\n\n```java\nPerson:\n\npackage com.qinweizhao.entity;\n\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.stereotype.Component;\nimport org.springframework.validation.annotation.Validated;\n\n\nimport javax.validation.constraints.Email;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n *\n *  * @ConfigurationProperties：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定；\n *  * prefix = \"person\"：配置文件中哪个下面的所有属性进行一一映射\n *\n * @author qinweizhao\n * @since 2021/9/17\n */\n@Component\n@ConfigurationProperties(prefix = \"person\")\npublic class Person {\n\n    /**\n     * 姓名\n     */\n    private String name;\n\n    /**\n     * 年龄\n     */\n    private Integer age;\n\n    /**\n     * 生日\n     */\n    private Date birth;\n\n    /**\n     * 邮箱e\n     */\n    @Email\n    private String email;\n\n\n    /**\n     * 宠物\n     */\n    private Map<String,Pet> pet;\n\n    /**\n     * 朋友\n     */\n    private List<Object> friend;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public Integer getAge() {\n        return age;\n    }\n\n    public void setAge(Integer age) {\n        this.age = age;\n    }\n\n    public Date getBirth() {\n        return birth;\n    }\n\n    public void setBirth(Date birth) {\n        this.birth = birth;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    public Map<String, Pet> getPet() {\n        return pet;\n    }\n\n    public void setPet(Map<String, Pet> pet) {\n        this.pet = pet;\n    }\n\n    public List<Object> getFriend() {\n        return friend;\n    }\n\n    public void setFriend(List<Object> friend) {\n        this.friend = friend;\n    }\n\n    @Override\n    public String toString() {\n        return super.toString();\n    }\n}\n\n\n\nPet:\n\npackage com.qinweizhao.entity;\n\n\n/**\n * @author qinweizhao\n * @since 2021/9/17\n */\n\npublic class Pet {\n    private String name;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n\n```\n\n运行结果：\n\n```json\n{\n    \"name\": \"qinweizhao\",\n    \"age\": 24,\n    \"birth\": \"1997-11-30T16:00:00.000+00:00\",\n    \"email\": null,\n    \"pet\": {\n        \"tom\": {\n            \"name\": \"小狗\"\n        }\n    },\n    \"friend\": [\n        \"one\",\n        \"two\"\n    ]\n}\n```\n\n**补充**：\n\n我们可以导入配置文件处理器，以后编写配置就有提示了\n\n```xml\n<!--导入配置文件处理器，配置文件进行绑定就会有提示-->\n  <dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-configuration-processor</artifactId>\n    <optional>true</optional>\n  </dependency>\n```\n\n### 3、@Value 获取值和 @ConfigurationProperties 获取值比较\n\n|                      | @ConfigurationProperties | @Value     |\n| -------------------- | ------------------------ | ---------- |\n| 功能                 | 批量注入配置文件中的属性 | 一个个指定 |\n| 松散绑定（松散语法） | 支持                     | 不支持     |\n| SpEL                 | 不支持                   | 支持       |\n| JSR303数据校验       | 支持                     | 不支持     |\n| 复杂类型封装         | 支持                     | 不支持     |\n\n配置文件无论 yml 还是 properties 他们都能获取到值；\n\n如果说，我们只是在某个业务逻辑中需要获取一下配置文件中的某项值，使用 @Value；\n\n如果说，我们专门编写了一个 javaBean 来和配置文件进行映射，我们就直接使用 @ConfigurationProperties；\n\n### 4、注入值数据校验\n\n1. 导包\n\n   ```pom\n           <dependency>\n               <groupId>org.springframework.boot</groupId>\n               <artifactId>spring-boot-starter-validation</artifactId>\n           </dependency>\n   ```\n\n2. 加注解\n\n   ```java\n   @Component\n   @ConfigurationProperties(prefix = \"person\")\n   @Validated\n   public class Person {\n    、、、\n       \n       /**\n        * 邮箱\n        * 类上标注 @Validated 注解\n        * 属性标注  \n        */\n       @Email\n       private String email;\n           \n       、、、\n   }\n   ```\n\n### 5、@PropertySource&@ImportResource&@Bean\n\n@**PropertySource**：加载指定的配置文件；\n\n```java\n@PropertySource(value = {\"classpath:person.properties\"})\n加载 person.properties 配置文件\n```\n\n**注**：即便指定了配置文件但还是会去读取 application 配置文件，并且优先读取 application 配置文件；指定配置文件默认只支持 properties 文件，若要用指定的 yam 则需要如下配置：\n\n```java\n// 实体类\n@PropertySource(value = \"classpath:person.yml\",factory = YamlPropertySourceFactory.class)\npublic class Person\n    \n    \n    \n// factory\npackage com.qinweizhao.support;\nimport org.springframework.boot.env.YamlPropertySourceLoader;\nimport org.springframework.core.env.PropertySource;\nimport org.springframework.core.io.support.EncodedResource;\nimport org.springframework.core.io.support.PropertySourceFactory;\nimport org.springframework.lang.Nullable;\nimport java.io.IOException;\nimport java.util.List;\n\n/**\n * @author qinweizhao\n * @since 2021/9/17\n */\npublic class YamlPropertySourceFactory implements PropertySourceFactory {\n    @Override\n    public PropertySource<?> createPropertySource(@Nullable String name, EncodedResource resource) throws IOException {\n        List<PropertySource<?>> sources = new YamlPropertySourceLoader().load(resource.getResource().getFilename(), resource.getResource());\n        return sources.get(0);\n    }\n\n}\n\n```\n\n@**ImportResource**：导入Spring的配置文件，让配置文件里面的内容生效；\n\nSpring Boot里面没有 Spring 的配置文件，我们自己编写的配置文件，也不能自动识别；\n\n想让 Spring 的配置文件生效，加载进来；@ImportResource 标注在一个配置类上\n\n```java\n@ImportResource(locations = {\"classpath:beans.xml\"})\n导入Spring的配置文件让其生效\n```\n\nSpringBoot 推荐给容器中添加组件的方式；推荐使用全注解的方式\n\n1、配置类**@Configuration**------>Spring配置文件\n\n2、使用**@Bean**给容器中添加组件\n\n```java\n/**\n * @Configuration：指明当前类是一个配置类；就是来替代之前的Spring配置文件\n *\n * 在配置文件中用<bean><bean/>标签添加组件\n *\n */\n@Configuration\npublic class MyConfig {\n\n    /**\n     * 将方法的返回值添加到容器中；容器中这个组件默认的id就是方法名\n     */\n    @Bean\n    public Person helloPerson(){\n        System.out.println(\"配置类@Bean给容器中添加组件了...\");\n        return new Person();\n    }\n}\n```\n\n### 6、占位符\n\n1. 随机数\n\n   ```java\n   ${random.value}、${random.int}、${random.long}\n   ${random.int(10)}、${random.int[1024,65536]}\n   ```\n\n2. 占位符获取之前配置的值，如果没有可以是用:指定默认值\n\n   ```properties\n   person:\n     name: qinweizhao${random.uuid}\n     age: ${random.int}\n     birth: 1997/12/01\n   #  email: 11111\n     pet:\n         tom:\n           name: ${person.hello:hello}小狗\n     friend:\n       - one\n       - two\n   ```\n\n   运行结果：\n\n   ```json\n   {\n       \"name\": \"qinweizhao 74f19257-6ae0-4b75-98e3-a1f5ae2176c9\",\n       \"age\": -1076407203,\n       \"birth\": \"1997-11-30T16:00:00.000+00:00\",\n       \"email\": null,\n       \"pet\": {\n           \"tom\": {\n               \"name\": \"hello小狗\"\n           }\n       },\n       \"friend\": [\n           \"one\",\n           \"two\"\n       ]\n   }\n   ```\n\n## 四、配置文件加载\n\n### 1、加载位置\n\nspringboot 启动会扫描以下位置的 application.properties 或者 application.yml 文件作为 SpringBoot 的默认配置文件\n\n```help\n–file:./config/\n\n–file:./\n\n–classpath:/config/\n\n–classpath:/\n\n优先级由高到底，高优先级的配置会覆盖低优先级的配置；SpringBoot 会从这四个位置全部加载主配置文件；互补配置；\n```\n\n可以通过 spring.config.location 来改变默认的配置文件位置；项目打包好以后，可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；指定配置文件和默认加载的这些配置文件共同起作用形成互补配置；\n\n```bash\njava -jar boot-config-0.0.1-SNAPSHOT.jar --spring.config.location=G:/application.properties\n```\n\n### 2、加载顺序\n\nSpringBoot也可以从以下位置加载配置； 优先级从高到低；高优先级的配置覆盖低优先级的配置，所有的配置会形成互补配置\n\n1. 命令行参数\n\n   所有的配置都可以在命令行上进行指定\n\n   ```bash\n   # 多个配置用空格分开； --配置项=值\n   java -jar boot-config-0.0.1-SNAPSHOT.jar --server.port=8087  --server.context-path=/abc\n   ```\n\n2. 来自java:comp/env的JNDI属性\n\n3. Java系统属性（System.getProperties()）\n\n4. 操作系统环境变量\n\n5. RandomValuePropertySource配置的random.*属性值\n\n   由jar包外向jar包内进行寻找\n\n   **优先加载带profile**\n\n6. jar 包外部的 application-{profile}.propertie s或 application.yml (带 spring.profile) 配置文件\n\n7. jar 包内部的 application-{profile}.properties 或 application.yml (带spring.profile) 配置文件\n\n   **再来加载不带profile**\n\n8. jar包外部的 application.properties 或 application.yml(不带spring.profile) 配置文件\n\n9. jar包内部的 application.properties 或 application.yml(不带spring.profile) 配置文件\n\n10. @Configuration 注解类上的 @PropertySource\n\n11. 通过 SpringApplication.setDefaultProperties 指定的默认属性\n', '', 'springbootpei-zhi-wen-jian', 0, 'Spring Boot 配置文件一、配置文件1、格式SpringBoot 配置文件名有两种不同的格式，一个是 properties ，另一个是 yaml 。yaml 还有另外一个特点，就是 yaml 中的数据是有序的，properties 中的数据是无序的。2、文件名默认的配置文件名为 applic', '', '', 'Spring Boot 配置文件', 0, NULL, 94, 8239);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 39, '2021-09-22 18:27:28.460000', '2021-11-25 15:29:38.052000', b'0', '2021-11-25 15:29:38.042000', 0, '<h1 id=\"es-6-新特性\">ES 6 新特性</h1>\n<h2 id=\"一let-声明变量\">一、let 声明变量</h2>\n<pre><code class=\"language-javascript\">// var 声明的变量往往会越域\n// let 声明的变量有严格局部作用域\n{\n var a = 1;\nlet b = 2;\n}\nconsole.log(a); // 1\nconsole.log(b); // ReferenceError: b is not defined\n// var 可以声明多次\n// let 只能声明一次\nvar m = 1\nvar m = 2\nlet n = 3\n// let n = 4\nconsole.log(m) // 2\nconsole.log(n) // Identifier \'n\' has already been declared\n// var 会变量提升\n// let 不存在变量提升\nconsole.log(x); // undefined\nvar x = 10;\nconsole.log(y); //ReferenceError: y is not defined\nlet y = 20;\n</code></pre>\n<h2 id=\"2const-声明常量只读变量\">2、const 声明常量（只读变量）</h2>\n<pre><code class=\"language-javascript\">// 1. 声明之后不允许改变\n// 2. 一但声明必须初始化，否则会报错\nconst a = 1;\na = 3; //Uncaught TypeError: Assignment to constant variable.\n</code></pre>\n<h2 id=\"3解构表达式\">3、解构表达式</h2>\n<ol>\n<li>\n<p>数组解构</p>\n<pre><code class=\"language-javascript\">let arr = [1,2,3];\n//以前我们想获取其中的值，只能通过角标。ES6 可以这样：\nconst [x,y,z] = arr;// x，y，z 将与 arr 中的每个位置对应来取值\n// 然后打印\nconsole.log(x,y,z);\n</code></pre>\n</li>\n<li>\n<p>对象解构</p>\n<pre><code class=\"language-javascript\">const person = {\n  name: &quot;jack&quot;,\n  age: 21,\n  language: [\'java\', \'js\', \'css\']\n}\n// 解构表达式获取值，将 person 里面每一个属性和左边对应赋值\nconst { name, age, language } = person;\n// 等价于下面\n// const name = person.name;\n// const age = person.age;\n// const language = person.language;\n// 可以分别打印\nconsole.log(name);\nconsole.log(age);\nconsole.log(language);\n//扩展：如果想要将 name 的值赋值给其他变量，可以如下,nn 是新的变量名\nconst { name: nn, age, language } = person;\nconsole.log(nn);\nconsole.log(age);\nconsole.log(language);\n</code></pre>\n</li>\n</ol>\n<h2 id=\"4字符串扩展\">4、字符串扩展</h2>\n<ol>\n<li>\n<p>新增 API</p>\n<blockquote>\n<p>ES6 为字符串扩展了几个新的 API：</p>\n<ul>\n<li><code>includes()</code>：返回布尔值，表示是否找到了参数字符串。</li>\n<li><code>startsWith()</code>：返回布尔值，表示参数字符串是否在原字符串的头部。</li>\n<li><code>endsWith()</code>：返回布尔值，表示参数字符串是否在原字符串的尾部。</li>\n</ul>\n</blockquote>\n<pre><code class=\"language-javascript\"> // 新 API \n let str =&quot;hello&quot;;\n console.log(str.startsWith(&quot;h&quot;)); //true\n console.log(str.endsWith(&quot;o&quot;)); //true\n console.log(str.includes(&quot;l&quot;)); //true\n console.log(str.includes(&quot;hello&quot;)); //true\n</code></pre>\n</li>\n<li>\n<p>字符串模板</p>\n<blockquote>\n<p>模板字符串相当于加强版的字符串，用反引号 `，除了作为普通字符串，还可以用来定义多行 字符串，还可以在字符串中加入变量和表达式。</p>\n</blockquote>\n<pre><code class=\"language-javascript\">// 字符串模板\n// 1、多行字符串\nlet s =\n   `\n&lt;div&gt;\n   &lt;span&gt;hello world&lt;span&gt;\n&lt;/div&gt;\n`;\nconsole.log(s); // &lt;div&gt;\n               //   &lt;span&gt;hello world&lt;span&gt;\n               // &lt;/div&gt;\n\n// 2、字符串插入变量和表达式。变量名写在 ${} 中，${} 中可以放入 JavaScript 表达式。\nlet name = &quot;qinweizhao&quot;;\nlet age = 24;\nlet info = `我是${name},今年${age}岁了`;\nconsole.log(info); // 我是qinweizhao,今年24岁了\n\n// 3、字符串中调用函数\nfunction fun(){\n  return &quot;函数&quot;\n}\nlet ss = ` 这是一个${fun()}`;\nconsole.log(ss); //这是一个函数\n</code></pre>\n</li>\n</ol>\n<h2 id=\"5函数优化\">5、函数优化</h2>\n<ol>\n<li>\n<p>函数参数默认值</p>\n<pre><code class=\"language-javascript\">// 在 ES6 以前，我们无法给一个函数参数设置默认值，只能采用变通写法：\nfunction add(a, b) {\n  // 判断 b 是否为空，为空就给默认值 1\n  b = b || 1;\n  return a + b;\n}\n// 传一个参数\nconsole.log(add(10));\n// 现在可以这么写：直接给参数写上默认值，没传就会自动使用默认值\nfunction add2(a , b = 1) {\n  return a + b;\n}\n// 传一个参数\nconsole.log(add2(10));\n</code></pre>\n</li>\n<li>\n<p>不定参数</p>\n<blockquote>\n<p>不定参数用来表示不确定参数个数，形如，...变量名，由...加上一个具名参数标识符组成。 具名参数只能放在参数列表的最后，并且有且只有一个不定参数。</p>\n</blockquote>\n<pre><code class=\"language-javascript\">function fun(...values) {\n  console.log(values.length)\n}\nfun(1, 2) //2\nfun(1, 2, 3, 4) //4\n</code></pre>\n</li>\n<li>\n<p>箭头函数</p>\n<ul>\n<li>一个参数时：</li>\n</ul>\n<pre><code class=\"language-javascript\">\n// 以前声明一个方法\n// var print = function (obj) {\n//   console.log(obj);\n// }\n// 可以简写为：\nvar print = obj =&gt; console.log(obj);\n// 测试调用\nprint(100)\n</code></pre>\n<ul>\n<li>多个参数时：</li>\n</ul>\n<pre><code class=\"language-javascript\">// 两个参数的情况：\nvar sum = function (a, b) {\n  return a + b;\n}\n// 简写为：\n// 当只有一行语句，并且需要返回结果时，可以省略 {} , 结果会自动返回。\nvar sum2 = (a, b) =&gt; a + b;\n// 测试调用\nconsole.log(sum2(10, 10)); // 20\n// 代码不止一行，可以用`{}`括起来\nvar sum3 = (a, b) =&gt; {\n  c = a + b;\n  return c;\n};\n// 测试调用\nconsole.log(sum3(10, 20)); // 3\n</code></pre>\n</li>\n<li>\n<p>实战：箭头函数结合解构表达式</p>\n<pre><code class=\"language-javascript\">// 需求，声明一个对象，hello 方法需要对象的个别属性\n// 以前的方式：\nconst person = {\n  name: &quot;jack&quot;,\n  age: 21,\n  language: [\'java\', \'js\', \'css\']\n}\nfunction hello(person) {\n  console.log(&quot;hello,&quot; + person.name)\n}\n// 现在的方式\nvar hello2 = ({ name }) =&gt; { console.log(&quot;hello,&quot; + name) };\n// 测试\nhello2(person);\n</code></pre>\n</li>\n</ol>\n<h2 id=\"6对象优化\">6、对象优化</h2>\n<ol>\n<li>\n<p>新增的 API</p>\n<blockquote>\n<p>ES6 给 Object 拓展了许多新的方法，如：</p>\n<ul>\n<li>\n<p>keys(obj)：获取对象的所有 key 形成的数组</p>\n</li>\n<li>\n<p>values(obj)：获取对象的所有 value 形成的数组</p>\n</li>\n<li>\n<p>entries(obj)：获取对象的所有 key 和 value 形成的二维数组。</p>\n</li>\n</ul>\n<p>格式：<code>[[k1,v1],[k2,v2],...]</code> - assign(dest, ...src) ：将多个 src 对象的值 拷贝到 dest 中。（第一层为深拷贝，第二层为浅 拷贝）</p>\n</blockquote>\n<pre><code class=\"language-javascript\">const person = {\nname: &quot;jack&quot;,\nage: 21,\nlanguage: [\'java\', \'js\', \'css\']\n}\nconsole.log(Object.keys(person));//[&quot;name&quot;, &quot;age&quot;, &quot;language&quot;]\nconsole.log(Object.values(person));//[&quot;jack&quot;, 21, Array(3)]\nconsole.log(Object.entries(person));//[Array(2), Array(2), Arra\ny(2)]\n\n\nconst target = { a: 1 };\nconst source1 = { b: 2 };\nconst source2 = { c: 3 };\n//Object.assign 方法的第一个参数是目标对象，后面的参数都是源对象。\nObject.assign(target, source1, source2);\nconsole.log(target)//{a: 1, b: 2, c: 3}\n</code></pre>\n</li>\n<li>\n<p>声明对象简写</p>\n<pre><code class=\"language-javascript\">const age = 23\nconst name = &quot;张三&quot;\n\n// 传统\nconst person1 = { age: age, name: name }\nconsole.log(person1)\n// ES6：属性名和属性值变量名一样，可以省略\nconst person2 = { age, name }\nconsole.log(person2) //{age: 23, name: &quot;张三&quot;}\n</code></pre>\n</li>\n<li>\n<p>对象的函数属性简写</p>\n<pre><code class=\"language-javascript\">let person = {\nname: &quot;jack&quot;,\n// 以前：\neat: function (food) {\nconsole.log(this.name + &quot;在吃&quot; + food);\n},\n// 箭头函数版：这里拿不到 this\neat2: food =&gt; console.log(person.name + &quot;在吃&quot; + food),\n// 简写版：\neat3(food) {\nconsole.log(this.name + &quot;在吃&quot; + food);\n}\n}\nperson.eat(&quot;apple&quot;);\n</code></pre>\n</li>\n<li>\n<p>对象拓展运算符</p>\n<blockquote>\n<p>拓展运算符（...）用于取出参数对象所有可遍历属性然后拷贝到当前对象。</p>\n</blockquote>\n<pre><code class=\"language-javascript\">// 1、拷贝对象（深拷贝）\nlet person1 = { name: &quot;Amy&quot;, age: 15 }\nlet someone = { ...person1 }\nconsole.log(someone) //{name: &quot;Amy&quot;, age: 15}\n// 2、合并对象\nlet age = { age: 15 }\nlet name = { name: &quot;Amy&quot; }\nlet person2 = { ...age, ...name } //如果两个对象的字段名重复，后面对象字\n段值会覆盖前面对象的字段值\nconsole.log(person2) //{age: 15, name: &quot;Amy&quot;}\n</code></pre>\n</li>\n</ol>\n<h2 id=\"7map-和-reduce\">7、map 和 reduce</h2>\n<ol>\n<li>\n<p>map</p>\n<blockquote>\n<p>map()：接收一个函数，将原数组中的所有元素用这个函数处理后放入新数组返回。</p>\n</blockquote>\n<pre><code class=\"language-javascript\">let arr = [\'1\', \'20\', \'-5\', \'3\'];\nconsole.log(arr)\narr = arr.map(s =&gt; parseInt(s));\nconsole.log(arr\n</code></pre>\n</li>\n<li>\n<p>reduce</p>\n<blockquote>\n<p>语法： arr.reduce(callback,[initialValue]) reduce 为数组中的每一个元素依次执行回调函数，不包括数组中被删除或从未被赋值的元 素，接受四个参数：初始值（或者上一次回调函数的返回值），当前元素值，当前索引，调 用 reduce 的数组。</p>\n<p>callback （执行数组中每个值的函数，包含四个参数）</p>\n<p>1、previousValue （上一次调用回调返回的值，或者是提供的初始值（initialValue））</p>\n<p>2、currentValue （数组中当前被处理的元素）</p>\n<p>3、index （当前元素在数组中的索引）</p>\n<p>4、array （调用 reduce 的数组） initialValue （作为第一次调用 callback 的第一个参数。）</p>\n</blockquote>\n<pre><code class=\"language-javascript\">const arr = [1,20,-5,3];\n//没有初始值：\nconsole.log(arr.reduce((a,b)=&gt;a+b));//19\nconsole.log(arr.reduce((a,b)=&gt;a*b));//-300\n\n//指定初始值：\nconsole.log(arr.reduce((a,b)=&gt;a+b,1));//20\nconsole.log(arr.reduce((a,b)=&gt;a*b,0));//-\n</code></pre>\n</li>\n</ol>\n<h2 id=\"8promise\">8、Promise</h2>\n<p>在 JavaScript 的世界中，所有代码都是单线程执行的。由于这个“缺陷”，导致 JavaScript 的所有网络操作，浏览器事件，都必须是异步执行。异步执行可以用回调函数实现。一旦有一连串的 ajax 请求 a,b,c,d... 后面的请求依赖前面的请求结果，就需要层层嵌套。这种缩进和层层嵌套的方式，非常容易造成上下文代码混乱，我们不得不非常小心翼翼处理内层函数与外层函数的数据，一旦内层函数使用了上层函数的变量，这种混乱程度就会加剧......总之，这 种<code>层叠上下文</code>的层层嵌套方式，着实增加了神经的紧张程度。案例：用户登录，并展示该用户的各科成绩。在页面发送两次请求：</p>\n<ol>\n<li>\n<p>查询用户，查询成功说明可以登录</p>\n</li>\n<li>\n<p>查询用户成功，查询科目</p>\n</li>\n<li>\n<p>根据科目的查询结果，获取去成绩 分析：此时后台应该提供三个接口，一个提供用户查询接口，一个提供科目的接口，一个提 供各科成绩的接口，为了渲染方便，最好响应 json 数据。在这里就不编写后台接口了，而 是提供三个 json 文件，直接提供 json</p>\n</li>\n</ol>\n<pre><code class=\"language-json\">user.json：\n{ \n    &quot;id&quot;: 1, \n    &quot;name&quot;: &quot;zhangsan&quot;, \n    &quot;password&quot;: &quot;123456&quot;\n}\n</code></pre>\n<pre><code class=\"language-json\">user_corse_1.json:\n{ &quot;id&quot;: 10, &quot;name&quot;: &quot;chinese&quot;\n}\n</code></pre>\n<pre><code class=\"language-json\">corse_score_10.json:\n{ &quot;id&quot;: 100, &quot;score&quot;: 90\n}\n</code></pre>\n<pre><code class=\"language-javascript\">//回调函数嵌套的噩梦：层层嵌套。\n$.ajax({\nurl: &quot;mock/user.json&quot;,\nsuccess(data) {\nconsole.log(&quot;查询用户：&quot;, data);\n$.ajax({\nurl: `mock/user_corse_${data.id}.json`,\nsuccess(data) {\nconsole.log(&quot;查询到课程：&quot;, data);\n$.ajax({\nurl: `mock/corse_score_${data.id}.json`,\nsuccess(data) {\nconsole.log(&quot;查询到分数：&quot;, data);\n},\nerror(error) {\nconsole.log(&quot;出现异常了：&quot; + error);\n}\n});\n},\nerror(error) {\nconsole.log(&quot;出现异常了：&quot; + error);\n}\n});\n},\nerror(error) {\nconsole.log(&quot;出现异常了：&quot; + error);\n}\n});\n</code></pre>\n<p><strong>我们可以通过 Promise 解决以上问题。</strong></p>\n<ol>\n<li>\n<p>Promise 语法</p>\n<pre><code class=\"language-javascript\">const promise = new Promise(function (resolve, reject) {\n// 执行异步操作\nif (/* 异步操作成功 */) {\nresolve(value);// 调用 resolve，代表 Promise 将返回成功的结果\n} else {\nreject(error);// 调用 reject，代表 Promise 会返回失败结果\n}\n});\n\n</code></pre>\n<p>使用箭头函数可以简写为：</p>\n<pre><code class=\"language-javascript\">const promise = new Promise((resolve, reject) =&gt;{\n// 执行异步操作\nif (/* 异步操作成功 */) {\nresolve(value);// 调用 resolve，代表 Promise 将返回成功的结果\n} else {\nreject(error);// 调用 reject，代表 Promise 会返回失败结果\n}\n});\n</code></pre>\n<p>这样，在 promise 中就封装了一段异步执行的结果</p>\n</li>\n<li>\n<p>、处理异步结果</p>\n<p>如果我们想要等待异步执行完成，做一些事情，我们可以通过 promise 的 then 方法来实现。 如果想要处理 promise 异步执行失败的事件，还可以跟上 catch</p>\n<pre><code class=\"language-javascript\">promise.then(function (value) {\n// 异步执行成功后的回调\n}).catch(function (error) {\n// 异步执行失败后的回调\n})\n</code></pre>\n</li>\n<li>\n<p>Promise 改造以前嵌套方式</p>\n<pre><code class=\"language-javascript\">new Promise((resolve, reject) =&gt; {\n$.ajax({\nurl: &quot;mock/user.json&quot;,\nsuccess(data) {\nconsole.log(&quot;查询用户：&quot;, data);\nresolve(data.id);\n},\nerror(error) {\nconsole.log(&quot;出现异常了：&quot; + error);\n}\n});\n}).then((userId) =&gt; {\nreturn new Promise((resolve, reject) =&gt; {\n$.ajax({\nurl: `mock/user_corse_${userId}.json`,\nsuccess(data) {\nconsole.log(&quot;查询到课程：&quot;, data);\nresolve(data.id);\n},\nerror(error) {\nconsole.log(&quot;出现异常了：&quot; + error);\n}\n});\n});\n}).then((corseId) =&gt; {\nconsole.log(corseId);\n$.ajax({\nurl: `mock/corse_score_${corseId}.json`,\nsuccess(data) {\nconsole.log(&quot;查询到分数：&quot;, data);\n},\nerror(error) {\nconsole.log(&quot;出现异常了：&quot; + error);\n}\n});\n});\n</code></pre>\n</li>\n<li>\n<p>优化处理</p>\n<p>优化：通常在企业开发中，会把 promise 封装成通用方法，如下：封装了一个通用的 get 请 求方法；</p>\n<pre><code class=\"language-javascript\">let get = function (url, data) { // 实际开发中会单独放到 common.js 中\nreturn new Promise((resolve, reject) =&gt; {\n$.ajax({\nurl: url,\ntype: &quot;GET&quot;,\ndata: data,\nsuccess(result) {\nresolve(result);\n},\nerror(error) {\nreject(error);\n}\n});\n})\n}\n// 使用封装的 get 方法，实现查询分数\nget(&quot;mock/user.json&quot;).then((result) =&gt; {\nconsole.log(&quot;查询用户：&quot;, result);\nreturn get(`mock/user_corse_${result.id}.json`);\n}).then((result) =&gt; {\nconsole.log(&quot;查询到课程：&quot;, result);\nreturn get(`mock/corse_score_${result.id}.json`)\n}).then((result) =&gt; {\nconsole.log(&quot;查询到分数：&quot;, result);\n}).catch(() =&gt; {\nconsole.log(&quot;出现异常了：&quot; + error);\n});\n</code></pre>\n<p>通过比较，我们知道了 Promise 的扁平化设计理念，也领略了这种<code>上层设计</code>带来的好处。 我们的项目中会使用到这种异步处理的方式；</p>\n</li>\n</ol>\n<h2 id=\"9模块化\">9、模块化</h2>\n<ol>\n<li>\n<p>什么是模块化</p>\n<p>模块化就是把代码进行拆分，方便重复利用。类似 java 中的导包：要使用一个包，必须先 导包。而 JS 中没有包的概念，换来的是 模块。 模块功能主要由两个命令构成：<code>export</code>和<code>import</code>。</p>\n<p> <code>export</code>命令用于规定模块的对外接口。</p>\n<p> <code>import</code>命令用于导入其他模块提供的功能。</p>\n</li>\n<li>\n<p>export</p>\n<p>比如我定义一个 js 文件:hello.js，里面有</p>\n<pre><code class=\"language-javascript\">const util = {\nsum(a,b){\nreturn a + b;\n}\n\n</code></pre>\n<p>我可以使用 export 将这个对象导出：</p>\n<pre><code class=\"language-javascript\">const util = {\nsum(a,b){\n    return a + b;\n}\n}\nexport {util};\n\n</code></pre>\n<p>当然，也可以简写为：</p>\n<pre><code class=\"language-javascript\">export const util = {\nsum(a,b){\nreturn a + b;\n}\n\n</code></pre>\n<p><code>export</code>不仅可以导出对象，一切 JS 变量都可以导出。比如：基本类型变量、函数、数组、 对象。 当要导出多个值时，还可以简写。比如我有一个文件：user.js：</p>\n<pre><code class=\"language-javascript\">var name = &quot;jack&quot;\nvar age = 21\nexport {name,age}\n</code></pre>\n<p>省略名称 上面的导出代码中，都明确指定了导出的变量名，这样其它人在导入使用时就必须准确写出 变量名，否则就会出错。 因此 js 提供了<code>default</code>关键字，可以对导出的变量名进行省略 例如：</p>\n<pre><code class=\"language-javascript\">// 无需声明对象的名字 export default { sum(a,b){ return a + b; } } \n</code></pre>\n<p>这样，当使用者导入时，可以任意起名字</p>\n</li>\n<li>\n<p>import</p>\n<p>使用<code>export</code>命令定义了模块的对外接口以后，其他 JS 文件就可以通过<code>import</code>命令加载这 个模块。</p>\n<p>例如我要使用上面导出的 util</p>\n<pre><code class=\"language-javascript\">// 导入 util\nimport util from \'hello.js\'\n// 调用 util 中的属性\nutil.sum(1,2)\n</code></pre>\n<p>要批量导入前面导出的 name 和 age：</p>\n<pre><code class=\"language-javascript\">import {name, age} from \'user.js\'\nconsole.log(name + &quot; , 今年&quot;+ age +&quot;岁了&quot;)\n</code></pre>\n<p>但是上面的代码暂时无法测试，因为浏览器目前还不支持 ES6 的导入和导出功能。除非借 助于工具，把 ES6 的语法进行编译降级到 ES5。</p>\n</li>\n</ol>\n', 0, NULL, NULL, '# ES 6 新特性\n\n## 一、let 声明变量\n\n```javascript\n// var 声明的变量往往会越域\n// let 声明的变量有严格局部作用域\n{\n var a = 1;\nlet b = 2;\n}\nconsole.log(a); // 1\nconsole.log(b); // ReferenceError: b is not defined\n// var 可以声明多次\n// let 只能声明一次\nvar m = 1\nvar m = 2\nlet n = 3\n// let n = 4\nconsole.log(m) // 2\nconsole.log(n) // Identifier \'n\' has already been declared\n// var 会变量提升\n// let 不存在变量提升\nconsole.log(x); // undefined\nvar x = 10;\nconsole.log(y); //ReferenceError: y is not defined\nlet y = 20;\n```\n\n## 2、const 声明常量（只读变量）\n\n```javascript\n// 1. 声明之后不允许改变\n// 2. 一但声明必须初始化，否则会报错\nconst a = 1;\na = 3; //Uncaught TypeError: Assignment to constant variable.\n```\n\n## 3、解构表达式\n\n1. 数组解构\n\n   ```javascript\n   let arr = [1,2,3];\n   //以前我们想获取其中的值，只能通过角标。ES6 可以这样：\n   const [x,y,z] = arr;// x，y，z 将与 arr 中的每个位置对应来取值\n   // 然后打印\n   console.log(x,y,z);\n   ```\n\n2. 对象解构\n\n   ```javascript\n   const person = {\n     name: \"jack\",\n     age: 21,\n     language: [\'java\', \'js\', \'css\']\n   }\n   // 解构表达式获取值，将 person 里面每一个属性和左边对应赋值\n   const { name, age, language } = person;\n   // 等价于下面\n   // const name = person.name;\n   // const age = person.age;\n   // const language = person.language;\n   // 可以分别打印\n   console.log(name);\n   console.log(age);\n   console.log(language);\n   //扩展：如果想要将 name 的值赋值给其他变量，可以如下,nn 是新的变量名\n   const { name: nn, age, language } = person;\n   console.log(nn);\n   console.log(age);\n   console.log(language);\n   ```\n\n## 4、字符串扩展\n\n1. 新增 API\n\n   >ES6 为字符串扩展了几个新的 API：\n   >\n   >- `includes()`：返回布尔值，表示是否找到了参数字符串。\n   >- `startsWith()`：返回布尔值，表示参数字符串是否在原字符串的头部。\n   >- `endsWith()`：返回布尔值，表示参数字符串是否在原字符串的尾部。\n\n   ```javascript\n    // 新 API \n    let str =\"hello\";\n    console.log(str.startsWith(\"h\")); //true\n    console.log(str.endsWith(\"o\")); //true\n    console.log(str.includes(\"l\")); //true\n    console.log(str.includes(\"hello\")); //true\n   ```\n\n2. 字符串模板\n\n   >模板字符串相当于加强版的字符串，用反引号 `，除了作为普通字符串，还可以用来定义多行 字符串，还可以在字符串中加入变量和表达式。\n\n   ```javascript\n   // 字符串模板\n   // 1、多行字符串\n   let s =\n      `\n   <div>\n      <span>hello world<span>\n   </div>\n   `;\n   console.log(s); // <div>\n                  //   <span>hello world<span>\n                  // </div>\n   \n   // 2、字符串插入变量和表达式。变量名写在 ${} 中，${} 中可以放入 JavaScript 表达式。\n   let name = \"qinweizhao\";\n   let age = 24;\n   let info = `我是${name},今年${age}岁了`;\n   console.log(info); // 我是qinweizhao,今年24岁了\n   \n   // 3、字符串中调用函数\n   function fun(){\n     return \"函数\"\n   }\n   let ss = ` 这是一个${fun()}`;\n   console.log(ss); //这是一个函数\n   ```\n\n## 5、函数优化\n\n1. 函数参数默认值\n\n   ```javascript\n   // 在 ES6 以前，我们无法给一个函数参数设置默认值，只能采用变通写法：\n   function add(a, b) {\n     // 判断 b 是否为空，为空就给默认值 1\n     b = b || 1;\n     return a + b;\n   }\n   // 传一个参数\n   console.log(add(10));\n   // 现在可以这么写：直接给参数写上默认值，没传就会自动使用默认值\n   function add2(a , b = 1) {\n     return a + b;\n   }\n   // 传一个参数\n   console.log(add2(10));\n   ```\n\n2. 不定参数\n\n   >不定参数用来表示不确定参数个数，形如，...变量名，由...加上一个具名参数标识符组成。 具名参数只能放在参数列表的最后，并且有且只有一个不定参数。\n\n   ```javascript\n   function fun(...values) {\n     console.log(values.length)\n   }\n   fun(1, 2) //2\n   fun(1, 2, 3, 4) //4\n   ```\n\n3. 箭头函数\n\n   - 一个参数时：\n\n   ```javascript\n   \n   // 以前声明一个方法\n   // var print = function (obj) {\n   //   console.log(obj);\n   // }\n   // 可以简写为：\n   var print = obj => console.log(obj);\n   // 测试调用\n   print(100)\n   ```\n\n   - 多个参数时：\n\n   ```javascript\n   // 两个参数的情况：\n   var sum = function (a, b) {\n     return a + b;\n   }\n   // 简写为：\n   // 当只有一行语句，并且需要返回结果时，可以省略 {} , 结果会自动返回。\n   var sum2 = (a, b) => a + b;\n   // 测试调用\n   console.log(sum2(10, 10)); // 20\n   // 代码不止一行，可以用`{}`括起来\n   var sum3 = (a, b) => {\n     c = a + b;\n     return c;\n   };\n   // 测试调用\n   console.log(sum3(10, 20)); // 3\n   ```\n\n4. 实战：箭头函数结合解构表达式\n\n   ```javascript\n   // 需求，声明一个对象，hello 方法需要对象的个别属性\n   // 以前的方式：\n   const person = {\n     name: \"jack\",\n     age: 21,\n     language: [\'java\', \'js\', \'css\']\n   }\n   function hello(person) {\n     console.log(\"hello,\" + person.name)\n   }\n   // 现在的方式\n   var hello2 = ({ name }) => { console.log(\"hello,\" + name) };\n   // 测试\n   hello2(person);\n   ```\n\n## 6、对象优化\n\n1. 新增的 API\n\n   >ES6 给 Object 拓展了许多新的方法，如：\n   >\n   >- keys(obj)：获取对象的所有 key 形成的数组\n   >\n   >- values(obj)：获取对象的所有 value 形成的数组\n   >\n   >- entries(obj)：获取对象的所有 key 和 value 形成的二维数组。\n   >\n   >  格式：`[[k1,v1],[k2,v2],...]` - assign(dest, ...src) ：将多个 src 对象的值 拷贝到 dest 中。（第一层为深拷贝，第二层为浅 拷贝）\n\n   ```javascript\n   const person = {\n   name: \"jack\",\n   age: 21,\n   language: [\'java\', \'js\', \'css\']\n   }\n   console.log(Object.keys(person));//[\"name\", \"age\", \"language\"]\n   console.log(Object.values(person));//[\"jack\", 21, Array(3)]\n   console.log(Object.entries(person));//[Array(2), Array(2), Arra\n   y(2)]\n   \n   \n   const target = { a: 1 };\n   const source1 = { b: 2 };\n   const source2 = { c: 3 };\n   //Object.assign 方法的第一个参数是目标对象，后面的参数都是源对象。\n   Object.assign(target, source1, source2);\n   console.log(target)//{a: 1, b: 2, c: 3}\n   ```\n\n2. 声明对象简写\n\n   ```javascript\n   const age = 23\n   const name = \"张三\"\n   \n   // 传统\n   const person1 = { age: age, name: name }\n   console.log(person1)\n   // ES6：属性名和属性值变量名一样，可以省略\n   const person2 = { age, name }\n   console.log(person2) //{age: 23, name: \"张三\"}\n   ```\n\n3. 对象的函数属性简写\n\n   ```javascript\n   let person = {\n   name: \"jack\",\n   // 以前：\n   eat: function (food) {\n   console.log(this.name + \"在吃\" + food);\n   },\n   // 箭头函数版：这里拿不到 this\n   eat2: food => console.log(person.name + \"在吃\" + food),\n   // 简写版：\n   eat3(food) {\n   console.log(this.name + \"在吃\" + food);\n   }\n   }\n   person.eat(\"apple\");\n   ```\n\n4. 对象拓展运算符\n\n   >\n   >\n   >拓展运算符（...）用于取出参数对象所有可遍历属性然后拷贝到当前对象。\n\n   ```javascript\n   // 1、拷贝对象（深拷贝）\n   let person1 = { name: \"Amy\", age: 15 }\n   let someone = { ...person1 }\n   console.log(someone) //{name: \"Amy\", age: 15}\n   // 2、合并对象\n   let age = { age: 15 }\n   let name = { name: \"Amy\" }\n   let person2 = { ...age, ...name } //如果两个对象的字段名重复，后面对象字\n   段值会覆盖前面对象的字段值\n   console.log(person2) //{age: 15, name: \"Amy\"}\n   ```\n\n## 7、map 和 reduce\n\n1. map\n\n   >map()：接收一个函数，将原数组中的所有元素用这个函数处理后放入新数组返回。\n\n   ```javascript\n   let arr = [\'1\', \'20\', \'-5\', \'3\'];\n   console.log(arr)\n   arr = arr.map(s => parseInt(s));\n   console.log(arr\n   ```\n\n2. reduce\n\n   >语法： arr.reduce(callback,[initialValue]) reduce 为数组中的每一个元素依次执行回调函数，不包括数组中被删除或从未被赋值的元 素，接受四个参数：初始值（或者上一次回调函数的返回值），当前元素值，当前索引，调 用 reduce 的数组。\n   >\n   >callback （执行数组中每个值的函数，包含四个参数）\n   >\n   >1、previousValue （上一次调用回调返回的值，或者是提供的初始值（initialValue））\n   >\n   >2、currentValue （数组中当前被处理的元素）\n   >\n   >3、index （当前元素在数组中的索引）\n   >\n   >4、array （调用 reduce 的数组） initialValue （作为第一次调用 callback 的第一个参数。）\n\n   ```javascript\n   const arr = [1,20,-5,3];\n   //没有初始值：\n   console.log(arr.reduce((a,b)=>a+b));//19\n   console.log(arr.reduce((a,b)=>a*b));//-300\n   \n   //指定初始值：\n   console.log(arr.reduce((a,b)=>a+b,1));//20\n   console.log(arr.reduce((a,b)=>a*b,0));//-\n   ```\n\n## 8、Promise\n\n在 JavaScript 的世界中，所有代码都是单线程执行的。由于这个“缺陷”，导致 JavaScript 的所有网络操作，浏览器事件，都必须是异步执行。异步执行可以用回调函数实现。一旦有一连串的 ajax 请求 a,b,c,d... 后面的请求依赖前面的请求结果，就需要层层嵌套。这种缩进和层层嵌套的方式，非常容易造成上下文代码混乱，我们不得不非常小心翼翼处理内层函数与外层函数的数据，一旦内层函数使用了上层函数的变量，这种混乱程度就会加剧......总之，这 种`层叠上下文`的层层嵌套方式，着实增加了神经的紧张程度。案例：用户登录，并展示该用户的各科成绩。在页面发送两次请求：\n\n1. 查询用户，查询成功说明可以登录\n\n2. 查询用户成功，查询科目\n\n3. 根据科目的查询结果，获取去成绩 分析：此时后台应该提供三个接口，一个提供用户查询接口，一个提供科目的接口，一个提 供各科成绩的接口，为了渲染方便，最好响应 json 数据。在这里就不编写后台接口了，而 是提供三个 json 文件，直接提供 json\n\n```json\nuser.json：\n{ \n    \"id\": 1, \n    \"name\": \"zhangsan\", \n    \"password\": \"123456\"\n}\n```\n\n```json\nuser_corse_1.json:\n{ \"id\": 10, \"name\": \"chinese\"\n}\n```\n\n```json\ncorse_score_10.json:\n{ \"id\": 100, \"score\": 90\n}\n```\n\n```javascript\n//回调函数嵌套的噩梦：层层嵌套。\n$.ajax({\nurl: \"mock/user.json\",\nsuccess(data) {\nconsole.log(\"查询用户：\", data);\n$.ajax({\nurl: `mock/user_corse_${data.id}.json`,\nsuccess(data) {\nconsole.log(\"查询到课程：\", data);\n$.ajax({\nurl: `mock/corse_score_${data.id}.json`,\nsuccess(data) {\nconsole.log(\"查询到分数：\", data);\n},\nerror(error) {\nconsole.log(\"出现异常了：\" + error);\n}\n});\n},\nerror(error) {\nconsole.log(\"出现异常了：\" + error);\n}\n});\n},\nerror(error) {\nconsole.log(\"出现异常了：\" + error);\n}\n});\n```\n\n**我们可以通过 Promise 解决以上问题。**\n\n1. Promise 语法\n\n   ```javascript\n   const promise = new Promise(function (resolve, reject) {\n   // 执行异步操作\n   if (/* 异步操作成功 */) {\n   resolve(value);// 调用 resolve，代表 Promise 将返回成功的结果\n   } else {\n   reject(error);// 调用 reject，代表 Promise 会返回失败结果\n   }\n   });\n   \n   ```\n\n   使用箭头函数可以简写为：\n\n   ```javascript\n   const promise = new Promise((resolve, reject) =>{\n   // 执行异步操作\n   if (/* 异步操作成功 */) {\n   resolve(value);// 调用 resolve，代表 Promise 将返回成功的结果\n   } else {\n   reject(error);// 调用 reject，代表 Promise 会返回失败结果\n   }\n   });\n   ```\n\n   这样，在 promise 中就封装了一段异步执行的结果\n\n2. 、处理异步结果\n\n   如果我们想要等待异步执行完成，做一些事情，我们可以通过 promise 的 then 方法来实现。 如果想要处理 promise 异步执行失败的事件，还可以跟上 catch\n\n   ```javascript\n   promise.then(function (value) {\n   // 异步执行成功后的回调\n   }).catch(function (error) {\n   // 异步执行失败后的回调\n   })\n   ```\n\n3. Promise 改造以前嵌套方式\n\n   ```javascript\n   new Promise((resolve, reject) => {\n   $.ajax({\n   url: \"mock/user.json\",\n   success(data) {\n   console.log(\"查询用户：\", data);\n   resolve(data.id);\n   },\n   error(error) {\n   console.log(\"出现异常了：\" + error);\n   }\n   });\n   }).then((userId) => {\n   return new Promise((resolve, reject) => {\n   $.ajax({\n   url: `mock/user_corse_${userId}.json`,\n   success(data) {\n   console.log(\"查询到课程：\", data);\n   resolve(data.id);\n   },\n   error(error) {\n   console.log(\"出现异常了：\" + error);\n   }\n   });\n   });\n   }).then((corseId) => {\n   console.log(corseId);\n   $.ajax({\n   url: `mock/corse_score_${corseId}.json`,\n   success(data) {\n   console.log(\"查询到分数：\", data);\n   },\n   error(error) {\n   console.log(\"出现异常了：\" + error);\n   }\n   });\n   });\n   ```\n\n4. 优化处理\n\n   优化：通常在企业开发中，会把 promise 封装成通用方法，如下：封装了一个通用的 get 请 求方法；\n\n   ```javascript\n   let get = function (url, data) { // 实际开发中会单独放到 common.js 中\n   return new Promise((resolve, reject) => {\n   $.ajax({\n   url: url,\n   type: \"GET\",\n   data: data,\n   success(result) {\n   resolve(result);\n   },\n   error(error) {\n   reject(error);\n   }\n   });\n   })\n   }\n   // 使用封装的 get 方法，实现查询分数\n   get(\"mock/user.json\").then((result) => {\n   console.log(\"查询用户：\", result);\n   return get(`mock/user_corse_${result.id}.json`);\n   }).then((result) => {\n   console.log(\"查询到课程：\", result);\n   return get(`mock/corse_score_${result.id}.json`)\n   }).then((result) => {\n   console.log(\"查询到分数：\", result);\n   }).catch(() => {\n   console.log(\"出现异常了：\" + error);\n   });\n   ```\n\n   通过比较，我们知道了 Promise 的扁平化设计理念，也领略了这种`上层设计`带来的好处。 我们的项目中会使用到这种异步处理的方式；\n\n## 9、模块化\n\n1. 什么是模块化\n\n   模块化就是把代码进行拆分，方便重复利用。类似 java 中的导包：要使用一个包，必须先 导包。而 JS 中没有包的概念，换来的是 模块。 模块功能主要由两个命令构成：`export`和`import`。\n\n    `export`命令用于规定模块的对外接口。\n\n     `import`命令用于导入其他模块提供的功能。\n\n2. export\n\n   比如我定义一个 js 文件:hello.js，里面有\n\n   ```javascript\n   const util = {\n   sum(a,b){\n   return a + b;\n   }\n   \n   ```\n\n   我可以使用 export 将这个对象导出：\n\n   ```javascript\n   const util = {\n   sum(a,b){\n       return a + b;\n   }\n   }\n   export {util};\n   \n   ```\n\n   当然，也可以简写为：\n\n   ```javascript\n   export const util = {\n   sum(a,b){\n   return a + b;\n   }\n   \n   ```\n\n   `export`不仅可以导出对象，一切 JS 变量都可以导出。比如：基本类型变量、函数、数组、 对象。 当要导出多个值时，还可以简写。比如我有一个文件：user.js：\n\n   ```javascript\n   var name = \"jack\"\n   var age = 21\n   export {name,age}\n   ```\n\n   省略名称 上面的导出代码中，都明确指定了导出的变量名，这样其它人在导入使用时就必须准确写出 变量名，否则就会出错。 因此 js 提供了`default`关键字，可以对导出的变量名进行省略 例如：\n\n   ```javascript\n   // 无需声明对象的名字 export default { sum(a,b){ return a + b; } } \n   ```\n\n   这样，当使用者导入时，可以任意起名字\n\n3. import\n\n   使用`export`命令定义了模块的对外接口以后，其他 JS 文件就可以通过`import`命令加载这 个模块。\n\n   例如我要使用上面导出的 util\n\n   ```javascript\n   // 导入 util\n   import util from \'hello.js\'\n   // 调用 util 中的属性\n   util.sum(1,2)\n   ```\n\n   要批量导入前面导出的 name 和 age：\n\n   ```javascript\n   import {name, age} from \'user.js\'\n   console.log(name + \" , 今年\"+ age +\"岁了\")\n   ```\n\n   但是上面的代码暂时无法测试，因为浏览器目前还不支持 ES6 的导入和导出功能。除非借 助于工具，把 ES6 的语法进行编译降级到 ES5。\n', '', 'es6xin-te-xing', 0, 'ES 6 新特性一、let 声明变量// var 声明的变量往往会越域// let 声明的变量有严格局部作用域{var a = 1;let b = 2;}console.log(a); // 1console.log(b); // ReferenceError: b is not defined//', '', '', 'ES 6 新特性', 0, NULL, 87, 8929);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 40, '2021-09-22 23:35:35.761000', '2022-03-06 18:42:39.765000', b'0', '2022-03-06 18:42:39.759000', 0, '<h1 id=\"nodejs-环境配置\">Node.js 环境配置</h1>\n<h2 id=\"一在-nodejs-安装目录新建两个文件夹\">一、在 Nodejs 安装目录新建两个文件夹</h2>\n<blockquote>\n<p>// 全局包下载存放</p>\n<p>node_global</p>\n<p>// 缓存</p>\n<p>node_cache node</p>\n</blockquote>\n<p><img src=\"https://img.qinweizhao.com/2021/09/2021-09-22_230024.png\" alt=\"2021-09-22_230024\" /></p>\n<h2 id=\"二修改路径\">二、修改路径</h2>\n<p>打开 cmd 窗口，执行命令</p>\n<pre><code class=\"language-bash\">npm config set prefix &quot;D:\\Node\\nodejs\\node_global&quot;\nnpm config set cache &quot;D:\\Node\\nodejs\\node_cache&quot;\n</code></pre>\n<p>或：</p>\n<p>在Nodejs 的安装目录中找到 node_modules/npm/npmrc 文件，修改如下：</p>\n<pre><code class=\"language-npmrc\">prefix=D:\\Node\\nodejs\\node_global\ncache=D:\\Node\\nodejs\\node_cache\n</code></pre>\n<p>全局包的存放路径可通过 npm root -g 查看</p>\n<p><img src=\"https://img.qinweizhao.com/2021/09/2021-09-22_233236.png\" alt=\"2021-09-22_233236\" /></p>\n<h2 id=\"三配置环境变量\">三、配置环境变量</h2>\n<ul>\n<li>\n<p>变量名： <strong>NODE_PATH</strong></p>\n<p>变量值： <strong>D:\\Nodejs\\node_global\\node_modules</strong></p>\n</li>\n<li>\n<p>变量名： <strong>PATH</strong></p>\n<p>变量值： <strong>D:\\Nodejs\\node_global</strong></p>\n<p><img src=\"https://img.qinweizhao.com/2021/09/2021-09-22_232437.png\" alt=\"2021-09-22_232437\" /></p>\n</li>\n</ul>\n<p><img src=\"https://img.qinweizhao.com/2021/09/2021-09-22_232525.png\" alt=\"2021-09-22_232525\" /></p>\n', 0, NULL, NULL, '# Node.js 环境配置\n\n## 一、在 Nodejs 安装目录新建两个文件夹\n\n> // 全局包下载存放\n>\n>node_global\n>\n>// 缓存\n>\n>node_cache node\n\n![2021-09-22_230024](https://img.qinweizhao.com/2021/09/2021-09-22_230024.png)\n\n## 二、修改路径\n\n打开 cmd 窗口，执行命令\n\n```bash\nnpm config set prefix \"D:\\Node\\nodejs\\node_global\"\nnpm config set cache \"D:\\Node\\nodejs\\node_cache\"\n```\n\n或：\n\n在Nodejs 的安装目录中找到 node_modules/npm/npmrc 文件，修改如下：\n\n```npmrc\nprefix=D:\\Node\\nodejs\\node_global\ncache=D:\\Node\\nodejs\\node_cache\n```\n\n全局包的存放路径可通过 npm root -g 查看\n\n![2021-09-22_233236](https://img.qinweizhao.com/2021/09/2021-09-22_233236.png)\n\n## 三、配置环境变量\n\n- 变量名： **NODE_PATH**\n\n  变量值： **D:\\Nodejs\\node_global\\node_modules**\n  \n- 变量名： **PATH**\n\n  变量值： **D:\\Nodejs\\node_global**\n  \n  ![2021-09-22_232437](https://img.qinweizhao.com/2021/09/2021-09-22_232437.png)\n\n![2021-09-22_232525](https://img.qinweizhao.com/2021/09/2021-09-22_232525.png)\n', '', 'nodejshuan-jing-pei-zhi', 0, 'Nodejs 环境配置一、在 Nodejs 安装目录新建两个文件夹// 全局包下载存放node_global// 缓存node_cache node二、修改路径打开 cmd 窗口，执行命令npm config set prefix &quot;D:\\Develop\\nodejs\\node_globa', '', '', 'Node.js 环境配置', 0, NULL, 90, 422);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 41, '2021-09-23 15:02:11.212000', '2021-11-25 15:30:36.958000', b'0', '2021-11-25 15:30:36.950000', 0, '<h1 id=\"centos-7-安装和配置-git\">CentOS 7 安装和配置 Git</h1>\n<h2 id=\"一安装依赖\">一、安装依赖</h2>\n<pre><code class=\"language-bash\">sudo yum install -y wget\nsudo yum install -y gcc-c++\nsudo yum install -y zlib-devel perl-ExtUtils-MakeMaker curl-devel expat-devel\n</code></pre>\n<h2 id=\"二获取压缩包\">二、获取压缩包</h2>\n<pre><code class=\"language-bash\">wget https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.33.0.tar.gz\n</code></pre>\n<h2 id=\"三解压\">三、解压</h2>\n<pre><code class=\"language-bash\">tar -zxvf tar -zxvf git-2.33.0.tar.gz\n</code></pre>\n<h2 id=\"四编译\">四、编译</h2>\n<pre><code class=\"language-bash\"># 进入解压后的目录\ncd git-2.33.0/\n# 指定安装位置\n./configure --prefix=/usr/local\n# 执行 mack 命令编译\nmake \n# 安装\nmake install\n</code></pre>\n<p>解释：</p>\n<blockquote>\n<p>1）./configure 命令就是执行当前目录的名为 configure 的脚本，主要的作用是对即将安装的软件进行配置，检查当前的环境是否满足要安装软件的依赖关系，并把生成的makefile放到....onePackage/install下<br />\n2）编译 make<br />\nmake 的基本用处是自动根据 makefile 里的指令来编译源文件。<br />\n3） 安装 make install<br />\nmake install：将程序安装至系统中。如果原始码编译无误，且执行结果正确，便可以把程序安装至系统预设的可执行文件存放路径。默认/usr/local/bin</p>\n</blockquote>\n<p>补充：</p>\n<p>如果需要安装到其他位置则需要配置环境变量。</p>\n<blockquote>\n<p>配置文件：  /etc/profile</p>\n</blockquote>\n<pre><code class=\"language-config\"># git\nexport PATH=/xxx/git/bin:$PATH\nexport PATH=$PATH:/xxx/git/libexec/git-core:$PATH\n</code></pre>\n<h2 id=\"五验证\">五、验证</h2>\n<pre><code class=\"language-bash\">git --version\n</code></pre>\n<h2 id=\"五配置\">五、配置</h2>\n<ol>\n<li>\n<p>配置用户名</p>\n<pre><code class=\"language-bash\"># git config --global user.name &quot;Your Name&quot;\ngit config --global user.name &quot;qinweizhao&quot;\n</code></pre>\n</li>\n<li>\n<p>配置邮箱</p>\n<pre><code class=\"language-bash\"># git config --global user.email &quot;email@example.com&quot;\ngit config --global user.email &quot;qinweizhao1997@163.com&quot;\n</code></pre>\n</li>\n<li>\n<p>生成公钥和私钥</p>\n<pre><code class=\"language-bash\"># ssh-keygen -t rsa -C &quot;youremail@example.com&quot;\nssh-keygen -t rsa -C &quot;qinweizhao1997@163.com&quot;\n</code></pre>\n</li>\n</ol>\n', 0, NULL, NULL, '# CentOS 7 安装和配置 Git\n\n## 一、安装依赖\n\n``` bash\nsudo yum install -y wget\nsudo yum install -y gcc-c++\nsudo yum install -y zlib-devel perl-ExtUtils-MakeMaker curl-devel expat-devel\n```\n\n## 二、获取压缩包\n\n```bash\nwget https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.33.0.tar.gz\n```\n\n## 三、解压\n\n```bash\ntar -zxvf tar -zxvf git-2.33.0.tar.gz\n```\n\n## 四、编译\n\n```bash\n# 进入解压后的目录\ncd git-2.33.0/\n# 指定安装位置\n./configure --prefix=/usr/local\n# 执行 mack 命令编译\nmake \n# 安装\nmake install\n```\n\n  解释：\n\n>1）./configure 命令就是执行当前目录的名为 configure 的脚本，主要的作用是对即将安装的软件进行配置，检查当前的环境是否满足要安装软件的依赖关系，并把生成的makefile放到....onePackage/install下\n>2）编译 make\n>make 的基本用处是自动根据 makefile 里的指令来编译源文件。\n>3） 安装 make install\n>make install：将程序安装至系统中。如果原始码编译无误，且执行结果正确，便可以把程序安装至系统预设的可执行文件存放路径。默认/usr/local/bin\n\n  补充：\n\n  如果需要安装到其他位置则需要配置环境变量。\n\n> 配置文件：  /etc/profile\n\n```config\n# git\nexport PATH=/xxx/git/bin:$PATH\nexport PATH=$PATH:/xxx/git/libexec/git-core:$PATH\n```\n\n## 五、验证\n\n```bash\ngit --version\n```\n\n## 五、配置\n\n1. 配置用户名\n\n   ```bash\n   # git config --global user.name \"Your Name\"\n   git config --global user.name \"qinweizhao\"\n   ```\n\n2. 配置邮箱\n\n   ```bash\n   # git config --global user.email \"email@example.com\"\n   git config --global user.email \"qinweizhao1997@163.com\"\n   ```\n\n3. 生成公钥和私钥\n\n   ```bash\n   # ssh-keygen -t rsa -C \"youremail@example.com\"\n   ssh-keygen -t rsa -C \"qinweizhao1997@163.com\"\n   ```\n', '', 'centos7an-zhuang-he-pei-zhi-git', 0, 'CentOS 7 安装和配置 Git一、安装依赖sudo yum install -y wgetsudo yum install -y gcc-c++sudo yum install -y zlib-devel perl-ExtUtils-MakeMaker curl-devel expat-dev', '', '', 'CentOS 7 安装和配置 Git', 0, NULL, 87, 1074);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 42, '2021-09-23 18:04:41.710000', '2021-11-23 18:30:37.427000', b'0', '2021-11-23 18:30:37.419000', 0, '<h1 id=\"babel\">Babel</h1>\n<h2 id=\"一简介\">一、简介</h2>\n<p>Babel是一个广泛使用的转码器，可以将 ES 6 代码转为 ES 5 代码，从而在现有环境执行执行。</p>\n<h2 id=\"二安装\">二、安装</h2>\n<p>Babel 提供 babel-cli 工具，用于命令行转码。它的安装命令如下：</p>\n<pre><code class=\"language-bash\"># 全局安装\nnpm install --global babel-cli\n# 查看是否安装成功\nbabel --version\n</code></pre>\n<h2 id=\"三babel的使用\">三、Babel的使用</h2>\n<h3 id=\"1初始化项目\">1、初始化项目</h3>\n<pre><code class=\"language-npm\">npm init -y\n</code></pre>\n<h3 id=\"2创建文件\">2、创建文件</h3>\n<p>在 src 目录下新建 example.js</p>\n<p>下面是一段 ES 6 代码：</p>\n<pre><code class=\"language-es\">// 转码前\n// 定义数据\nlet input = [1, 2, 3]\n// 将数组的每个元素 +1\ninput = input.map(item =&gt; item + 1)\nconsole.log(input)\n</code></pre>\n<h3 id=\"2配置-babelrc\">2、配置 .babelrc</h3>\n<p>Babel的配置文件是 .babelrc ，存放在项目的根目录下，该文件用来设置转码规则和插件，基本格式如下。</p>\n<pre><code class=\"language-babelrc\">{\n    &quot;presets&quot;: [],\n    &quot;plugins&quot;: []\n}\n</code></pre>\n<p>presets字段设定转码规则，将 es 2015 规则加入 .babelrc ：</p>\n<pre><code class=\"language-babelrc\">{\n    &quot;presets&quot;: [&quot;es2015&quot;],\n    &quot;plugins&quot;: []\n}\n</code></pre>\n<h2 id=\"3安装转码器\">3、安装转码器</h2>\n<p>在项目中安装</p>\n<pre><code class=\"language-npm\">npm install --save-dev babel-preset-es2015\n</code></pre>\n<h3 id=\"4转码\">4、转码</h3>\n<pre><code class=\"language-bash\"># 转码结果写入一个文件\nmkdir dist1\n# --out-file 或 -o 参数指定输出文件\nbabel src/example.js --out-file dist1/compiled.js\n# 或者\nbabel src/example.js -o dist1/compiled.js\n# 整个目录转码\nmkdir dist2\n# --out-dir 或 -d 参数指定输出目录\nbabel src --out-dir dist2\n# 或者\nbabel src -d dist2\n</code></pre>\n<h3 id=\"5自定义脚本\">5、自定义脚本</h3>\n<p>改写 package.json ：</p>\n<pre><code class=\"language-shell\">{\n    // ...\n    &quot;scripts&quot;: {\n        // ...\n        &quot;build&quot;:  &quot;babel src\\\\example.js -o dist\\\\compiled.js&quot;\n    },\n}\n</code></pre>\n<p>转码的时候，执行下面的命令：</p>\n<pre><code class=\"language-bash\">mkdir dist\nnpm run build\n</code></pre>\n', 0, NULL, NULL, '# Babel\n\n## 一、简介\n\nBabel是一个广泛使用的转码器，可以将 ES 6 代码转为 ES 5 代码，从而在现有环境执行执行。\n\n## 二、安装\n\nBabel 提供 babel-cli 工具，用于命令行转码。它的安装命令如下：\n\n```bash\n# 全局安装\nnpm install --global babel-cli\n# 查看是否安装成功\nbabel --version\n```\n\n## 三、Babel的使用\n\n### 1、初始化项目\n\n```npm\nnpm init -y\n```\n\n### 2、创建文件\n\n在 src 目录下新建 example.js\n\n下面是一段 ES 6 代码：\n\n```es\n// 转码前\n// 定义数据\nlet input = [1, 2, 3]\n// 将数组的每个元素 +1\ninput = input.map(item => item + 1)\nconsole.log(input)\n```\n\n### 2、配置 .babelrc\n\nBabel的配置文件是 .babelrc ，存放在项目的根目录下，该文件用来设置转码规则和插件，基本格式如下。\n\n```babelrc\n{\n    \"presets\": [],\n    \"plugins\": []\n}\n```\n\npresets字段设定转码规则，将 es 2015 规则加入 .babelrc ：\n\n```babelrc\n{\n    \"presets\": [\"es2015\"],\n    \"plugins\": []\n}\n```\n\n## 3、安装转码器\n\n在项目中安装\n\n```npm\nnpm install --save-dev babel-preset-es2015\n```\n\n### 4、转码\n\n```bash\n# 转码结果写入一个文件\nmkdir dist1\n# --out-file 或 -o 参数指定输出文件\nbabel src/example.js --out-file dist1/compiled.js\n# 或者\nbabel src/example.js -o dist1/compiled.js\n# 整个目录转码\nmkdir dist2\n# --out-dir 或 -d 参数指定输出目录\nbabel src --out-dir dist2\n# 或者\nbabel src -d dist2\n```\n\n### 5、自定义脚本\n\n改写 package.json ：\n\n```shell\n{\n    // ...\n    \"scripts\": {\n        // ...\n        \"build\":  \"babel src\\\\example.js -o dist\\\\compiled.js\"\n    },\n}\n```\n\n转码的时候，执行下面的命令：\n\n```bash\nmkdir dist\nnpm run build\n```\n', '', 'babel', 0, 'Babel一、简介Babel是一个广泛使用的转码器，可以将 ES 6 代码转为 ES 5 代码，从而在现有环境执行执行。二、安装Babel 提供 babel-cli 工具，用于命令行转码。它的安装命令如下：# 全局安装npm install --global babel-cli# 查看是否安装成功b', '', '', 'Babel', 0, NULL, 83, 937);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 43, '2021-10-11 16:44:52.032000', '2021-11-23 18:30:32.400000', b'0', '2021-11-23 18:30:32.392000', 0, '<h1 id=\"webpack\">webpack</h1>\n<h2 id=\"一简介\">一、简介</h2>\n<p>webpack 是一个前端资源加载/打包工具。它将根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源。</p>\n<h2 id=\"二准备\">二、准备</h2>\n<h3 id=\"1全局安装\">1、全局安装</h3>\n<pre><code class=\"language-bash\">npm install -g webpack webpack-cli\n</code></pre>\n<h3 id=\"2查看版本号\">2、查看版本号</h3>\n<pre><code class=\"language-bash\">webpack -v\n</code></pre>\n<h3 id=\"3初始化项目\">3、初始化项目</h3>\n<p>创建 webpack-sample 文件夹</p>\n<pre><code class=\"language-bash\"># webpack-sample 目录下执行\nnpm init -y\n</code></pre>\n<p>创建 index.html 文件</p>\n<p>创建 src 文件夹，并新增 js文件</p>\n<ol>\n<li>\n<p>common.js</p>\n<pre><code class=\"language-js\">exports.info = function (str) {\n    document.write(str);\n}\n</code></pre>\n</li>\n<li>\n<p>utils.js</p>\n<pre><code class=\"language-js\">exports.add = function (a, b) {\n    return a + b;\n}\n</code></pre>\n</li>\n<li>\n<p>main.js</p>\n<pre><code class=\"language-js\">const common = require(\'./common\');\nconst utils = require(\'./utils\');\ncommon.info(\'Hello world!\' + utils.add(100, 200));\n</code></pre>\n</li>\n</ol>\n<p><img src=\"https://img.qinweizhao.com/2021/10/2021-10-11_163856.png\" alt=\"2021-10-11_163856\" /></p>\n<h2 id=\"三打包\">三、打包</h2>\n<h3 id=\"1js\">1、js</h3>\n<ol>\n<li>\n<p>在 webpack-sample 目录下创建配置文件 webpack.config.js</p>\n<pre><code class=\"language-js\"># 读取当前项目目录下src文件夹中的main.js（入口文件）内容，分析资源依赖，把相关的js文件打包，打包后的文件放入当前目录的dist文件夹下，打包后的js文件名为bundle.js\nconst path = require(&quot;path&quot;); //Node.js内置模块\nmodule.exports = {\n    entry: \'./src/main.js\', //配置入口文件\n    output: {\n        path: path.resolve(__dirname, \'./dist\'), //输出路径，__dirname：当前文件所在路径\n        filename: \'bundle.js\' //输出文件\n    }\n}\n</code></pre>\n</li>\n<li>\n<p>命令行执行编译命令</p>\n<pre><code class=\"language-bash\">webpack #有黄色警告\nwebpack --mode=development #没有警告\n#执行后查看bundle.js 里面包含了上面两个js文件的内容并进行了代码压缩\n</code></pre>\n<p>也可以配置项目的npm运行命令，修改package.json文件</p>\n<pre><code class=\"language-json\">&quot;scripts&quot;: {\n    //...,\n    &quot;dev&quot;: &quot;webpack --mode=development&quot;\n }\n</code></pre>\n<p>运行npm命令执行打包</p>\n<pre><code class=\"language-bash\">npm run dev\n</code></pre>\n</li>\n<li>\n<p>在 index.html 中引入编译后的文件</p>\n<pre><code class=\"language-html\">&lt;body&gt;\n    &lt;script src=&quot;dist/bundle-npm.js&quot;&gt;&lt;/script&gt;\n&lt;/body&gt;\n</code></pre>\n</li>\n</ol>\n<h3 id=\"2css-打包\">2、CSS 打包</h3>\n<ol>\n<li>\n<p>安装 style-loader 和 css-loader</p>\n<p>Webpack 本身只能处理 JavaScript 模块，如果要处理其他类型的文件，就需要使用 loader 进行转换。</p>\n<p>Loader 可以理解为是模块和资源的转换器。</p>\n<p>首先我们需要安装相关Loader插件，css-loader 是将 css 装载到 javascript；style-loader 是让 javascript 认识css</p>\n<pre><code class=\"language-bash\">npm install --save-dev style-loader css-loader \n</code></pre>\n</li>\n<li>\n<p>修改webpack.config.js</p>\n<pre><code class=\"language-js\">const path = require(&quot;path&quot;); //Node.js内置模块\nmodule.exports = {\n    //...,\n    entry: \'./src/main.js\', //配置入口文件\n    output: {\n        path: path.resolve(__dirname, \'./dist\'), //输出路径，__dirname：当前文件所在路径\n        filename: \'bundle-npm.js\' //输出文件\n    },\n    module: {\n        rules: [  \n            {  \n                test: /\\.css$/,    //打包规则应用到以css结尾的文件上\n                use: [\'style-loader\', \'css-loader\']\n            }  \n        ]  \n    }\n}\n</code></pre>\n</li>\n<li>\n<p>在 src 文件夹创建 style.css</p>\n<pre><code class=\"language-css\">body{\n    background:pink;\n}\n</code></pre>\n</li>\n<li>\n<p>修改main.js</p>\n<p>在第一行引入style.css</p>\n<pre><code class=\"language-js\">require(\'./style.css\');\n</code></pre>\n</li>\n<li>\n<p>运行编译命令</p>\n<pre><code class=\"language-bash\">npm run dev\n</code></pre>\n</li>\n</ol>\n<h2 id=\"四浏览器中查看-indexhtml\">四、浏览器中查看 index.html</h2>\n<p>看看背景是不是变成粉色啦？</p>\n<p><img src=\"https://img.qinweizhao.com/2021/10/2021-10-11_163710.png\" alt=\"2021-10-11_163710\" /></p>\n', 0, NULL, NULL, '# webpack\n\n## 一、简介\n\nwebpack 是一个前端资源加载/打包工具。它将根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源。\n\n## 二、准备\n\n### 1、全局安装\n\n```bash\nnpm install -g webpack webpack-cli\n```\n\n### 2、查看版本号\n\n```bash\nwebpack -v\n```\n\n### 3、初始化项目\n\n创建 webpack-sample 文件夹\n\n```bash\n# webpack-sample 目录下执行\nnpm init -y\n```\n\n创建 index.html 文件\n\n创建 src 文件夹，并新增 js文件\n\n1. common.js\n\n   ```js\n   exports.info = function (str) {\n       document.write(str);\n   }\n   ```\n\n2. utils.js\n\n   ```js\n   exports.add = function (a, b) {\n       return a + b;\n   }\n   ```\n\n3. main.js\n\n   ```js\n   const common = require(\'./common\');\n   const utils = require(\'./utils\');\n   common.info(\'Hello world!\' + utils.add(100, 200));\n   ```\n\n![2021-10-11_163856](https://img.qinweizhao.com/2021/10/2021-10-11_163856.png)\n\n## 三、打包\n\n### 1、js\n\n1. 在 webpack-sample 目录下创建配置文件 webpack.config.js\n\n   ```js\n   # 读取当前项目目录下src文件夹中的main.js（入口文件）内容，分析资源依赖，把相关的js文件打包，打包后的文件放入当前目录的dist文件夹下，打包后的js文件名为bundle.js\n   const path = require(\"path\"); //Node.js内置模块\n   module.exports = {\n       entry: \'./src/main.js\', //配置入口文件\n       output: {\n           path: path.resolve(__dirname, \'./dist\'), //输出路径，__dirname：当前文件所在路径\n           filename: \'bundle.js\' //输出文件\n       }\n   }\n   ```\n\n2. 命令行执行编译命令\n\n   ```bash\n   webpack #有黄色警告\n   webpack --mode=development #没有警告\n   #执行后查看bundle.js 里面包含了上面两个js文件的内容并进行了代码压缩\n   ```\n\n   也可以配置项目的npm运行命令，修改package.json文件\n\n   ```json\n   \"scripts\": {\n       //...,\n       \"dev\": \"webpack --mode=development\"\n    }\n   ```\n\n   运行npm命令执行打包\n\n   ```bash\n   npm run dev\n   ```\n\n3. 在 index.html 中引入编译后的文件\n\n   ```html\n   <body>\n       <script src=\"dist/bundle-npm.js\"></script>\n   </body>\n   ```\n\n### 2、CSS 打包\n\n1. 安装 style-loader 和 css-loader\n\n   Webpack 本身只能处理 JavaScript 模块，如果要处理其他类型的文件，就需要使用 loader 进行转换。\n\n   Loader 可以理解为是模块和资源的转换器。\n\n   首先我们需要安装相关Loader插件，css-loader 是将 css 装载到 javascript；style-loader 是让 javascript 认识css\n\n   ```bash\n   npm install --save-dev style-loader css-loader \n   ```\n\n2. 修改webpack.config.js\n\n    ```js\n    const path = require(\"path\"); //Node.js内置模块\n    module.exports = {\n        //...,\n        entry: \'./src/main.js\', //配置入口文件\n        output: {\n            path: path.resolve(__dirname, \'./dist\'), //输出路径，__dirname：当前文件所在路径\n            filename: \'bundle-npm.js\' //输出文件\n        },\n        module: {\n            rules: [  \n                {  \n                    test: /\\.css$/,    //打包规则应用到以css结尾的文件上\n                    use: [\'style-loader\', \'css-loader\']\n                }  \n            ]  \n        }\n    }\n    ```\n\n3. 在 src 文件夹创建 style.css\n\n    ```css\n    body{\n        background:pink;\n    }\n    ```\n\n4. 修改main.js\n\n   在第一行引入style.css\n\n   ```js\n   require(\'./style.css\');\n   ```\n\n5. 运行编译命令\n\n   ```bash\n   npm run dev\n   ```\n\n## 四、浏览器中查看 index.html\n\n看看背景是不是变成粉色啦？\n\n![2021-10-11_163710](https://img.qinweizhao.com/2021/10/2021-10-11_163710.png)\n', '', 'webpack', 0, 'webpack一、简介webpack 是一个前端资源加载/打包工具。它将根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源。二、准备1、全局安装npm install -g webpack webpack-cli2、查看版本号webpack -v3、初始化项目创建 web', '', '', 'webpack', 0, NULL, 82, 1771);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 44, '2021-10-13 12:18:57.478000', '2021-11-25 15:30:05.179000', b'0', '2021-11-25 15:30:05.172000', 0, '<h1 id=\"springboot-集成-swagger2-与-swagger3-的区别\">SpringBoot 集成 Swagger2 与 Swagger3 的区别</h1>\n<h2 id=\"一pom文件中引入swagger依赖\">一、pom文件中引入Swagger依赖</h2>\n<h3 id=\"swagger2\">Swagger2</h3>\n<pre><code class=\"language-xml\">&lt;dependency&gt;\n  &lt;groupId&gt;io.springfox&lt;/groupId&gt;\n  &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;\n  &lt;version&gt;2.7.0&lt;/version&gt;\n&lt;/dependency&gt;\n\n&lt;dependency&gt;\n  &lt;groupId&gt;io.springfox&lt;/groupId&gt;\n  &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;\n  &lt;version&gt;2.7.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<h3 id=\"swagger3\">Swagger3</h3>\n<pre><code class=\"language-xml\">&lt;dependency&gt;\n  &lt;groupId&gt;io.springfox&lt;/groupId&gt;\n  &lt;artifactId&gt;springfox-boot-starter&lt;/artifactId&gt;\n  &lt;version&gt;3.0.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<h2 id=\"二swagger配置\">二、Swagger配置</h2>\n<h3 id=\"swagger2-1\">Swagger2</h3>\n<pre><code class=\"language-java\">@Configuration\n@EnableSwagger2\npublic class SwaggerConfig {\n\n    @Bean\n    public Docket api() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .apiInfo(apiInfo())\n                .select()\n                // 自行修改为自己的包路径\n                .apis(RequestHandlerSelectors.basePackage(&quot;com.qinweizhao&quot;))\n                .paths(PathSelectors.any())\n                .build();\n    }\n\n    private ApiInfo apiInfo() {\n        return new ApiInfoBuilder()\n                .title(&quot;swagger-api文档&quot;)\n                .description(&quot;swagger接入教程&quot;)\n                .version(&quot;1.0&quot;)\n                .contact(new Contact(&quot;qinweizhao&quot;, &quot;https://www.qinweizhao.com&quot;, &quot;yvkg@foxmail.com&quot;))\n                .build();\n    }\n\n}\n</code></pre>\n<h3 id=\"swagger3-1\">Swagger3</h3>\n<pre><code class=\"language-java\">\n@Configuration\npublic class SwaggerConfig {\n\n    @Bean\n    public Docket createRestApi() {\n        return new Docket(DocumentationType.OAS_30)\n                .apiInfo(apiInfo())\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(&quot;com.qinweizhao&quot;))\n                .paths(PathSelectors.any())\n                .build();\n    }\n\n    private ApiInfo apiInfo() {\n        return new ApiInfoBuilder()\n                .title(&quot;Api Documentation&quot;)\n                .contact(new Contact(&quot;qinweizhao&quot;, &quot;http://www.baidu.com&quot;, &quot;yvkg@foxmail.com&quot;))\n                .version(&quot;1.0&quot;)\n                .build();\n    }\n\n}\n</code></pre>\n<h2 id=\"三若配置有拦截器应对swagger做如下配置\">三、若配置有拦截器，应对Swagger做如下配置</h2>\n<h3 id=\"swagger2-2\">Swagger2</h3>\n<pre><code class=\"language-java\">@Configuration\npublic class WebMvcConfig implements WebMvcConfigurer {\n\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        // 配置swagger拦截器\n        registry.addInterceptor(new MyInterceptor())// 这里加入自己写的拦截器\n                .addPathPatterns(&quot;/**&quot;).\n                excludePathPatterns(&quot;/swagger-resources/**&quot;, &quot;/webjars/**&quot;, &quot;/swagger-ui.html/**&quot;, &quot;/v2/**&quot;);\n    }\n\n    @Override\n    public void addResourceHandlers(ResourceHandlerRegistry registry) {\n        // 配置swagger静态资源映射\n        registry.addResourceHandler(&quot;swagger-ui.html&quot;)\n                .addResourceLocations(&quot;classpath:/META-INF/resources/&quot;);\n        registry.addResourceHandler(&quot;/webjars/**&quot;)\n                .addResourceLocations(&quot;classpath:/META-INF/resources/webjars/&quot;);\n    }\n\n    @Override\n    public void addCorsMappings(CorsRegistry registry) {\n        // 跨域支持\n        registry.addMapping(&quot;/**&quot;).allowedOriginPatterns(&quot;*&quot;).allowedMethods(&quot;*&quot;).allowCredentials(true);\n    }\n\n}\n</code></pre>\n<h3 id=\"swagger3-2\">Swagger3</h3>\n<pre><code class=\"language-java\">@Configuration\npublic class WebMvcConfig implements WebMvcConfigurer {\n\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        // 配置swagger拦截器\n        registry.addInterceptor(new MyInterceptor())\n                .addPathPatterns(&quot;/**&quot;).\n                excludePathPatterns(&quot;/swagger-resources/**&quot;, &quot;/webjars/**&quot;, &quot;/swagger-ui/**&quot;, &quot;/v3/**&quot;);\n    }\n\n    @Override\n    public void addResourceHandlers(ResourceHandlerRegistry registry) {\n        // 配置swagger静态资源映射\n        registry.addResourceHandler(&quot;/swagger-ui/**&quot;)\n                .addResourceLocations(&quot;classpath:/META-INF/resources/webjars/springfox-swagger-ui/&quot;);\n        registry.addResourceHandler(&quot;/webjars/**&quot;)\n                .addResourceLocations(&quot;classpath:/META-INF/resources/webjars/&quot;);\n    }\n\n    @Override\n    public void addCorsMappings(CorsRegistry registry) {\n        // 跨域支持\n        registry.addMapping(&quot;/**&quot;).allowedOriginPatterns(&quot;*&quot;).allowedMethods(&quot;*&quot;).allowCredentials(true);\n    }\n\n}\n</code></pre>\n<h2 id=\"四若项目中还有token验证则对应swagger配置文件做如下修改\">四、若项目中还有Token验证，则对应Swagger配置文件做如下修改</h2>\n<h3 id=\"swagger2-3\">Swagger2</h3>\n<pre><code class=\"language-java\">@Configuration\n@EnableSwagger2\npublic class SwaggerConfig {\n\n    @Bean\n    public Docket api() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .apiInfo(apiInfo())\n                .select()\n                // 自行修改为自己的包路径\n                .apis(RequestHandlerSelectors.basePackage(&quot;com.qinweizhao&quot;))\n                .paths(PathSelectors.any())\n                .build()\n                .securitySchemes(securitySchemes())\n                .securityContexts(securityContexts());\n    }\n\n    private ApiInfo apiInfo() {\n        return new ApiInfoBuilder()\n                .title(&quot;swagger-api文档&quot;)\n                .description(&quot;swagger接入教程&quot;)\n                .version(&quot;1.0&quot;)\n                .contact(new Contact(&quot;qinweizhao&quot;, &quot;https://www.qinweizhao.com&quot;, &quot;yvkg@foxmail.com&quot;))\n                .build();\n    }\n\n    private List&lt;ApiKey&gt; securitySchemes() {\n        List&lt;ApiKey&gt; apiKeyList = new ArrayList();\n        apiKeyList.add(new ApiKey(&quot;tokenName&quot;, &quot;token&quot;, &quot;header&quot;));\n        return apiKeyList;\n    }\n\n    private List&lt;SecurityContext&gt; securityContexts() {\n        List&lt;SecurityContext&gt; securityContexts = new ArrayList&lt;&gt;();\n        securityContexts.add(SecurityContext.builder()\n                .securityReferences(defaultAuth())\n                .forPaths(PathSelectors.regex(&quot;^(?!auth).*$&quot;))\n                .build());\n        return securityContexts;\n    }\n\n    List&lt;SecurityReference&gt; defaultAuth() {\n        AuthorizationScope authorizationScope = new AuthorizationScope(&quot;global&quot;, &quot;accessEverything&quot;);\n        AuthorizationScope[] authorizationScopes = new AuthorizationScope[1];\n        authorizationScopes[0] = authorizationScope;\n        List&lt;SecurityReference&gt; securityReferences = new ArrayList&lt;&gt;();\n        securityReferences.add(new SecurityReference(&quot;token&quot;, authorizationScopes));\n        return securityReferences;\n    }\n\n}\n</code></pre>\n<h3 id=\"swagger3-3\">Swagger3</h3>\n<pre><code class=\"language-java\">@Configuration\npublic class SwaggerConfig {\n\n    @Bean\n    public Docket createRestApi() {\n        return new Docket(DocumentationType.OAS_30)\n                .apiInfo(apiInfo())\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(&quot;com.qinweizhao&quot;))\n                .paths(PathSelectors.any())\n                .build()\n                .protocols(newHashSet(&quot;https&quot;, &quot;http&quot;))\n                .securitySchemes(securitySchemes())\n                .securityContexts(securityContexts());\n    }\n\n    private ApiInfo apiInfo() {\n        return new ApiInfoBuilder()\n                .title(&quot;Api Documentation&quot;)\n                .contact(new Contact(&quot;qinweizhao&quot;, &quot;http://www.baidu.com&quot;, &quot;yvkg@foxmail.com&quot;))\n                .version(&quot;1.0&quot;)\n                .build();\n    }\n\n    /**\n     * 设置授权信息\n     */\n    private List&lt;SecurityScheme&gt; securitySchemes() {\n        ApiKey apiKey = new ApiKey(&quot;token&quot;, &quot;token&quot;, In.HEADER.toValue());\n        return Collections.singletonList(apiKey);\n    }\n\n    /**\n     * 授权信息全局应用\n     */\n    private List&lt;SecurityContext&gt; securityContexts() {\n        return Collections.singletonList(\n                SecurityContext.builder()\n                        .securityReferences(Collections.singletonList(new SecurityReference(&quot;token&quot;, new AuthorizationScope[]{new AuthorizationScope(&quot;global&quot;, &quot;accessEverything&quot;)})))\n                        .build()\n        );\n    }\n\n    @SafeVarargs\n    private final &lt;T&gt; Set&lt;T&gt; newHashSet(T... ts) {\n        if (ts.length &gt; 0) {\n            return new LinkedHashSet&lt;&gt;(Arrays.asList(ts));\n        }\n        return new HashSet&lt;&gt;();\n    }\n\n}\n</code></pre>\n<h2 id=\"五访问路径\">五、访问路径</h2>\n<h3 id=\"swagger2和swagger3的访问路径也有所不同\">Swagger2和Swagger3的访问路径也有所不同</h3>\n<p>Swagger2：<a href=\"http://localhost:port/swagger-ui.html\">http://localhost:port/swagger-ui.html</a><br />\nSwagger3：<a href=\"http://localhost:port/swagger-ui/index.html\">http://localhost:port/swagger-ui/index.html</a></p>\n', 0, NULL, NULL, '# SpringBoot 集成 Swagger2 与 Swagger3 的区别\n\n## 一、pom文件中引入Swagger依赖\n\n### Swagger2\n\n```xml\n<dependency>\n  <groupId>io.springfox</groupId>\n  <artifactId>springfox-swagger2</artifactId>\n  <version>2.7.0</version>\n</dependency>\n\n<dependency>\n  <groupId>io.springfox</groupId>\n  <artifactId>springfox-swagger-ui</artifactId>\n  <version>2.7.0</version>\n</dependency>\n```\n\n### Swagger3\n\n```xml\n<dependency>\n  <groupId>io.springfox</groupId>\n  <artifactId>springfox-boot-starter</artifactId>\n  <version>3.0.0</version>\n</dependency>\n```\n\n## 二、Swagger配置\n\n### Swagger2\n\n```java\n@Configuration\n@EnableSwagger2\npublic class SwaggerConfig {\n\n    @Bean\n    public Docket api() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .apiInfo(apiInfo())\n                .select()\n                // 自行修改为自己的包路径\n                .apis(RequestHandlerSelectors.basePackage(\"com.qinweizhao\"))\n                .paths(PathSelectors.any())\n                .build();\n    }\n\n    private ApiInfo apiInfo() {\n        return new ApiInfoBuilder()\n                .title(\"swagger-api文档\")\n                .description(\"swagger接入教程\")\n                .version(\"1.0\")\n                .contact(new Contact(\"qinweizhao\", \"https://www.qinweizhao.com\", \"yvkg@foxmail.com\"))\n                .build();\n    }\n\n}\n```\n\n### Swagger3\n\n```java\n\n@Configuration\npublic class SwaggerConfig {\n\n    @Bean\n    public Docket createRestApi() {\n        return new Docket(DocumentationType.OAS_30)\n                .apiInfo(apiInfo())\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\"com.qinweizhao\"))\n                .paths(PathSelectors.any())\n                .build();\n    }\n\n    private ApiInfo apiInfo() {\n        return new ApiInfoBuilder()\n                .title(\"Api Documentation\")\n                .contact(new Contact(\"qinweizhao\", \"http://www.baidu.com\", \"yvkg@foxmail.com\"))\n                .version(\"1.0\")\n                .build();\n    }\n\n}\n```\n\n## 三、若配置有拦截器，应对Swagger做如下配置\n\n### Swagger2\n\n```java\n@Configuration\npublic class WebMvcConfig implements WebMvcConfigurer {\n\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        // 配置swagger拦截器\n        registry.addInterceptor(new MyInterceptor())// 这里加入自己写的拦截器\n                .addPathPatterns(\"/**\").\n                excludePathPatterns(\"/swagger-resources/**\", \"/webjars/**\", \"/swagger-ui.html/**\", \"/v2/**\");\n    }\n\n    @Override\n    public void addResourceHandlers(ResourceHandlerRegistry registry) {\n        // 配置swagger静态资源映射\n        registry.addResourceHandler(\"swagger-ui.html\")\n                .addResourceLocations(\"classpath:/META-INF/resources/\");\n        registry.addResourceHandler(\"/webjars/**\")\n                .addResourceLocations(\"classpath:/META-INF/resources/webjars/\");\n    }\n\n    @Override\n    public void addCorsMappings(CorsRegistry registry) {\n        // 跨域支持\n        registry.addMapping(\"/**\").allowedOriginPatterns(\"*\").allowedMethods(\"*\").allowCredentials(true);\n    }\n\n}\n```\n\n### Swagger3\n\n```java\n@Configuration\npublic class WebMvcConfig implements WebMvcConfigurer {\n\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        // 配置swagger拦截器\n        registry.addInterceptor(new MyInterceptor())\n                .addPathPatterns(\"/**\").\n                excludePathPatterns(\"/swagger-resources/**\", \"/webjars/**\", \"/swagger-ui/**\", \"/v3/**\");\n    }\n\n    @Override\n    public void addResourceHandlers(ResourceHandlerRegistry registry) {\n        // 配置swagger静态资源映射\n        registry.addResourceHandler(\"/swagger-ui/**\")\n                .addResourceLocations(\"classpath:/META-INF/resources/webjars/springfox-swagger-ui/\");\n        registry.addResourceHandler(\"/webjars/**\")\n                .addResourceLocations(\"classpath:/META-INF/resources/webjars/\");\n    }\n\n    @Override\n    public void addCorsMappings(CorsRegistry registry) {\n        // 跨域支持\n        registry.addMapping(\"/**\").allowedOriginPatterns(\"*\").allowedMethods(\"*\").allowCredentials(true);\n    }\n\n}\n```\n\n## 四、若项目中还有Token验证，则对应Swagger配置文件做如下修改\n\n### Swagger2\n\n ```java\n @Configuration\n @EnableSwagger2\n public class SwaggerConfig {\n \n     @Bean\n     public Docket api() {\n         return new Docket(DocumentationType.SWAGGER_2)\n                 .apiInfo(apiInfo())\n                 .select()\n                 // 自行修改为自己的包路径\n                 .apis(RequestHandlerSelectors.basePackage(\"com.qinweizhao\"))\n                 .paths(PathSelectors.any())\n                 .build()\n                 .securitySchemes(securitySchemes())\n                 .securityContexts(securityContexts());\n     }\n \n     private ApiInfo apiInfo() {\n         return new ApiInfoBuilder()\n                 .title(\"swagger-api文档\")\n                 .description(\"swagger接入教程\")\n                 .version(\"1.0\")\n                 .contact(new Contact(\"qinweizhao\", \"https://www.qinweizhao.com\", \"yvkg@foxmail.com\"))\n                 .build();\n     }\n \n     private List<ApiKey> securitySchemes() {\n         List<ApiKey> apiKeyList = new ArrayList();\n         apiKeyList.add(new ApiKey(\"tokenName\", \"token\", \"header\"));\n         return apiKeyList;\n     }\n \n     private List<SecurityContext> securityContexts() {\n         List<SecurityContext> securityContexts = new ArrayList<>();\n         securityContexts.add(SecurityContext.builder()\n                 .securityReferences(defaultAuth())\n                 .forPaths(PathSelectors.regex(\"^(?!auth).*$\"))\n                 .build());\n         return securityContexts;\n     }\n \n     List<SecurityReference> defaultAuth() {\n         AuthorizationScope authorizationScope = new AuthorizationScope(\"global\", \"accessEverything\");\n         AuthorizationScope[] authorizationScopes = new AuthorizationScope[1];\n         authorizationScopes[0] = authorizationScope;\n         List<SecurityReference> securityReferences = new ArrayList<>();\n         securityReferences.add(new SecurityReference(\"token\", authorizationScopes));\n         return securityReferences;\n     }\n \n }\n ```\n\n### Swagger3\n\n```java\n@Configuration\npublic class SwaggerConfig {\n\n    @Bean\n    public Docket createRestApi() {\n        return new Docket(DocumentationType.OAS_30)\n                .apiInfo(apiInfo())\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\"com.qinweizhao\"))\n                .paths(PathSelectors.any())\n                .build()\n                .protocols(newHashSet(\"https\", \"http\"))\n                .securitySchemes(securitySchemes())\n                .securityContexts(securityContexts());\n    }\n\n    private ApiInfo apiInfo() {\n        return new ApiInfoBuilder()\n                .title(\"Api Documentation\")\n                .contact(new Contact(\"qinweizhao\", \"http://www.baidu.com\", \"yvkg@foxmail.com\"))\n                .version(\"1.0\")\n                .build();\n    }\n\n    /**\n     * 设置授权信息\n     */\n    private List<SecurityScheme> securitySchemes() {\n        ApiKey apiKey = new ApiKey(\"token\", \"token\", In.HEADER.toValue());\n        return Collections.singletonList(apiKey);\n    }\n\n    /**\n     * 授权信息全局应用\n     */\n    private List<SecurityContext> securityContexts() {\n        return Collections.singletonList(\n                SecurityContext.builder()\n                        .securityReferences(Collections.singletonList(new SecurityReference(\"token\", new AuthorizationScope[]{new AuthorizationScope(\"global\", \"accessEverything\")})))\n                        .build()\n        );\n    }\n\n    @SafeVarargs\n    private final <T> Set<T> newHashSet(T... ts) {\n        if (ts.length > 0) {\n            return new LinkedHashSet<>(Arrays.asList(ts));\n        }\n        return new HashSet<>();\n    }\n\n}\n```\n\n## 五、访问路径\n\n### Swagger2和Swagger3的访问路径也有所不同\n\nSwagger2：<http://localhost:port/swagger-ui.html>\nSwagger3：<http://localhost:port/swagger-ui/index.html>\n', '', 'springbootji-cheng-swagger2yu-swagger3de-qu-bie', 0, 'SpringBoot 集成 Swagger2 与 Swagger3 的区别一、pom文件中引入Swagger依赖Swagger2&lt;dependency&gt;  &lt;groupId&gt;io.springfox&lt;/groupId&gt;  &lt;artifactId&gt;spr', '', '', 'SpringBoot 集成 Swagger2 与 Swagger3 的区别', 0, NULL, 80, 6439);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 45, '2021-10-17 19:00:49.162000', '2021-11-25 15:30:14.605000', b'0', '2021-11-25 15:30:14.598000', 0, '<h1 id=\"spring-boot-解决跨域\">Spring Boot 解决跨域</h1>\n<h2 id=\"一实现-webmvcconfigurer-接口\">一、实现 WebMvcConfigurer 接口</h2>\n<pre><code class=\"language-java\">import org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.CorsRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n@Configuration\npublic class CorsConfig implements WebMvcConfigurer {\n    @Override\n    public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(&quot;/**&quot;)\n                .allowedOrigins(&quot;*&quot;)\n                .allowedMethods(&quot;GET&quot;, &quot;HEAD&quot;, &quot;POST&quot;, &quot;PUT&quot;, &quot;DELETE&quot;, &quot;OPTIONS&quot;)\n                // .allowCredentials(true)\n                .maxAge(3600)\n                .allowedHeaders(&quot;*&quot;);\n    }\n}\n</code></pre>\n<blockquote>\n<p>当 allowCredentials 为 true 时，allowingOrigins 不能包含特殊值 “ *” ，因为无法在 “Access-Control-Allow-Origin” 响应标头上设置。要允许凭据具有一组来源，请明确列出它们或考虑改用“ allowedOriginPatterns”。</p>\n</blockquote>\n<h2 id=\"二过滤器\">二、过滤器</h2>\n<pre><code class=\"language-java\">@Configuration\npublic class GlobalCorsConfiguration {\n    private CorsConfiguration buildConfig() {\n		CorsConfiguration corsConfiguration = new CorsConfiguration();\n		corsConfiguration.addAllowedOrigin(&quot;*&quot;);\n		corsConfiguration.addAllowedHeader(&quot;*&quot;);\n		corsConfiguration.addAllowedMethod(&quot;*&quot;);\n		corsConfiguration.addExposedHeader(&quot;Authorization&quot;);\n		return corsConfiguration;\n	}\n\n	@Bean\n	public CorsFilter corsFilter() {\n		UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n		source.registerCorsConfiguration(&quot;/**&quot;, buildConfig());\n		return new CorsFilter(source);\n	}\n\n}\n</code></pre>\n<h2 id=\"三crossorigin-注解\">三、@CrossOrigin 注解</h2>\n<pre><code class=\"language-java\">public class GoodsController {\n@CrossOrigin(origins = &quot;http://localhost:8080&quot;)\n@GetMapping(&quot;goods-url&quot;)\npublic Response queryGoodsWithGoodsUrl(@RequestParam String goodsUrl) throws Exception {}\n}  \n</code></pre>\n<h2 id=\"补充\">补充：</h2>\n<p>注：当项目整合了 Spring Security 后，配置就会失效，因为请求会被 Spring Security 拦截。</p>\n<p>解决方案：</p>\n<p>在这种配置的基础上添加 Spring Security 对 CORS 的支持。</p>\n<pre><code class=\"language-java\">@Configuration\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http\n                、、、\n                .and()\n                .cors()\n                、、、\n    }\n}\n</code></pre>\n<p>一个 <code>.cors</code> 就开启了 Spring Security 对 CORS 的支持。</p>\n', 0, NULL, NULL, '# Spring Boot 解决跨域\n\n## 一、实现 WebMvcConfigurer 接口\n\n```java\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.CorsRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n@Configuration\npublic class CorsConfig implements WebMvcConfigurer {\n    @Override\n    public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/**\")\n                .allowedOrigins(\"*\")\n                .allowedMethods(\"GET\", \"HEAD\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\")\n                // .allowCredentials(true)\n                .maxAge(3600)\n                .allowedHeaders(\"*\");\n    }\n}\n```\n\n>当 allowCredentials 为 true 时，allowingOrigins 不能包含特殊值 “ *” ，因为无法在 “Access-Control-Allow-Origin” 响应标头上设置。要允许凭据具有一组来源，请明确列出它们或考虑改用“ allowedOriginPatterns”。\n\n\n## 二、过滤器\n\n```java\n@Configuration\npublic class GlobalCorsConfiguration {\n    private CorsConfiguration buildConfig() {\n		CorsConfiguration corsConfiguration = new CorsConfiguration();\n		corsConfiguration.addAllowedOrigin(\"*\");\n		corsConfiguration.addAllowedHeader(\"*\");\n		corsConfiguration.addAllowedMethod(\"*\");\n		corsConfiguration.addExposedHeader(\"Authorization\");\n		return corsConfiguration;\n	}\n\n	@Bean\n	public CorsFilter corsFilter() {\n		UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n		source.registerCorsConfiguration(\"/**\", buildConfig());\n		return new CorsFilter(source);\n	}\n\n}\n```\n\n## 三、@CrossOrigin 注解\n\n```java\npublic class GoodsController {\n@CrossOrigin(origins = \"http://localhost:8080\")\n@GetMapping(\"goods-url\")\npublic Response queryGoodsWithGoodsUrl(@RequestParam String goodsUrl) throws Exception {}\n}  \n```\n\n## 补充：\n\n注：当项目整合了 Spring Security 后，配置就会失效，因为请求会被 Spring Security 拦截。\n\n解决方案：\n\n在这种配置的基础上添加 Spring Security 对 CORS 的支持。\n\n```java\n@Configuration\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http\n                、、、\n                .and()\n                .cors()\n                、、、\n    }\n}\n```\n\n一个 `.cors` 就开启了 Spring Security 对 CORS 的支持。\n\n\n\n', '', 'springbootjie-jue-kua-yu', 0, 'Spring Boot 解决跨域一、实现 WebMvcConfigurer 接口import org.springframework.context.annotation.Configuration;import org.springframework.web.servlet.config.anno', '', '', 'Spring Boot 解决跨域', 0, NULL, 92, 1854);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 46, '2021-10-18 15:15:21.003000', '2021-11-25 15:30:26.720000', b'0', '2021-11-25 15:30:26.713000', 0, '<h1 id=\"centos-7-安装-redis-626\">CentOS 7 安装 Redis 6.2.6</h1>\n<h2 id=\"一获取压缩包\">一、获取压缩包</h2>\n<p><img src=\"https://img.qinweizhao.com/2021/10/2021-10-18_131030.png\" alt=\"2021-10-18_131030\" /></p>\n<pre><code class=\"language-bash\">wget https://download.redis.io/releases/redis-6.2.6.tar.gz\n</code></pre>\n<p>解压到指定目录</p>\n<pre><code class=\"language-bash\">tar -zxvf redis-6.2.6.tar.gz -C /usr/local/redis/\n</code></pre>\n<h2 id=\"二安装-gcc-和-make\">二、安装 gcc 和 make</h2>\n<p>检查是否安装有 gcc 和 make</p>\n<pre><code class=\"language-bash\">whereis gcc make\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/10/2021-10-18_131515.png\" alt=\"2021-10-18_131515\" /></p>\n<p>如果未安装，执行安装</p>\n<pre><code class=\"language-bash\">yum install -y gcc make\n</code></pre>\n<h2 id=\"三编译并安装\">三、编译并安装</h2>\n<pre><code class=\"language-bash\"># 编译\nmake\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/10/2021-10-18_132240.png\" alt=\"2021-10-18_132240\" /></p>\n<pre><code class=\"language-bash\"># 安装，将 redis 的命令安装到 /usr/local/bin/ 目录\nmake install\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/10/2021-10-18_132425.png\" alt=\"2021-10-18_132425\" /></p>\n<h2 id=\"四修改配置\">四、修改配置</h2>\n<pre><code class=\"language-bash\"># 进入 redis 安装目录\ncd xxx\n# 编辑 redis.conf 配置文件\nvim redis.conf\n</code></pre>\n<p>修改内容：</p>\n<pre><code class=\"language-conf\"># 绑定ip：如果需要远程访问，可将此行注释，或绑定一个真实ip\nbind 127.0.0.1\n# 端口号\nport 6379\n# 关闭保护模式，不然远程还是连接不了\nprotected-mode no\n# 密码\n#requirepass 123456\n# 进程文件保存位置，redis运行后会在此位置自动生成\npidfile /var/run/redis_6379.pid\n# redis位置\ndir /usr/local/redis/redis-6.2.6\n</code></pre>\n<h2 id=\"五防火墙开放-6379-端口\">五、防火墙开放 6379 端口</h2>\n<pre><code class=\"language-bash\"># 添加6379端口\nfirewall-cmd --zone=public --add-port=6379/tcp --permanent\n# 重启防火墙\nfirewall-cmd --reload\n# 查看所有开放端口号\nfirewall-cmd --list-port\n# 查看指定端口是否开放\nfirewall-cmd --query-port=6379/tcp\n</code></pre>\n<h2 id=\"六启动\">六、启动</h2>\n<pre><code class=\"language-bash\"># 使用指定配置启动\nredis-server /usr/local/redis/redis-single/redis.conf\n</code></pre>\n<p>设置开机启动：</p>\n<pre><code class=\"language-bash\">vim /etc/systemd/system/redis.service\n</code></pre>\n<p>添加内容</p>\n<pre><code class=\"language-service\">[Unit]\nDescription=redis-server\nAfter=network.target\n\n[Service]\nType=forking\nExecStart=/usr/local/redis/redis-single/src/redis-server /usr/local/redis/redis-single/redis.conf\nPrivateTmp=true\n\n[Install]\nWantedBy=multi-user.target\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/10/2021-10-18_150144.png\" alt=\"2021-10-18_150144\" /></p>\n<blockquote>\n<p>Description:描述服务<br />\nAfter:描述服务类别<br />\n　　 [Service]服务运行参数的设置<br />\n　　 Type=forking是后台运行的形式<br />\n　　 ExecStart为服务的具体运行命令<br />\n　　 ExecReload为重启命令<br />\n　　 ExecStop为停止命令<br />\n　　 PrivateTmp=True表示给服务分配独立的临时空间<br />\n　　 注意：[Service]的启动、重启、停止命令全部要求使用绝对路径<br />\n　　 [Install]运行级别下服务安装的相关设置，可设置为多用户，即系统运行级别为3</p>\n</blockquote>\n<pre><code class=\"language-bash\"># 设置开机自启动\nsystemctl enable redis.service\n</code></pre>\n<h2 id=\"七常用命令\">七、常用命令</h2>\n<p>调试相关命令</p>\n<pre><code class=\"language-bash\"># 此命令用于重新加载修改后的启动脚本\nsystemctl daemon-reload\n# 显示概要\nsystemctl status redis.service\n# 查看启动详情\njournalctl -xe\n# 显示实时日志\njournalctl -f\n# 查看本机监听端口\nnetstat -tunlp|grep redis\n</code></pre>\n<p>systemctl 常用命令</p>\n<pre><code class=\"language-bash\"># 启动redis服务\nsystemctl start redis.service\n# 设置开机自启动\nsystemctl enable redis.service\n# 停止开机自启动\nsystemctl disable redis.service\n# 查看服务当前状态\nsystemctl status redis.service\n# 重新启动服务\nsystemctl restart redis.service\n# 查看所有已启动的服务\nsystemctl list-units --type=service\n</code></pre>\n', 0, NULL, NULL, '# CentOS 7 安装 Redis 6.2.6\n\n## 一、获取压缩包\n\n![2021-10-18_131030](https://img.qinweizhao.com/2021/10/2021-10-18_131030.png)\n\n```bash\nwget https://download.redis.io/releases/redis-6.2.6.tar.gz\n```\n\n解压到指定目录\n\n```bash\ntar -zxvf redis-6.2.6.tar.gz -C /usr/local/redis/\n```\n\n## 二、安装 gcc 和 make\n\n检查是否安装有 gcc 和 make\n\n```bash\nwhereis gcc make\n```\n\n![2021-10-18_131515](https://img.qinweizhao.com/2021/10/2021-10-18_131515.png)\n\n如果未安装，执行安装\n\n```bash\nyum install -y gcc make\n```\n\n## 三、编译并安装\n\n```bash\n# 编译\nmake\n```\n\n![2021-10-18_132240](https://img.qinweizhao.com/2021/10/2021-10-18_132240.png)\n\n```bash\n# 安装，将 redis 的命令安装到 /usr/local/bin/ 目录\nmake install\n```\n\n![2021-10-18_132425](https://img.qinweizhao.com/2021/10/2021-10-18_132425.png)\n\n## 四、修改配置\n\n```bash\n# 进入 redis 安装目录\ncd xxx\n# 编辑 redis.conf 配置文件\nvim redis.conf\n```\n\n修改内容：\n\n```conf\n# 绑定ip：如果需要远程访问，可将此行注释，或绑定一个真实ip\nbind 127.0.0.1\n# 端口号\nport 6379\n# 关闭保护模式，不然远程还是连接不了\nprotected-mode no\n# 密码\n#requirepass 123456\n# 进程文件保存位置，redis运行后会在此位置自动生成\npidfile /var/run/redis_6379.pid\n# redis位置\ndir /usr/local/redis/redis-6.2.6\n```\n\n##  五、防火墙开放 6379 端口\n\n```bash\n# 添加6379端口\nfirewall-cmd --zone=public --add-port=6379/tcp --permanent\n# 重启防火墙\nfirewall-cmd --reload\n# 查看所有开放端口号\nfirewall-cmd --list-port\n# 查看指定端口是否开放\nfirewall-cmd --query-port=6379/tcp\n```\n\n## 六、启动\n\n```bash\n# 使用指定配置启动\nredis-server /usr/local/redis/redis-single/redis.conf\n```\n\n设置开机启动：\n\n```bash\nvim /etc/systemd/system/redis.service\n```\n\n添加内容\n\n```service\n[Unit]\nDescription=redis-server\nAfter=network.target\n\n[Service]\nType=forking\nExecStart=/usr/local/redis/redis-single/src/redis-server /usr/local/redis/redis-single/redis.conf\nPrivateTmp=true\n\n[Install]\nWantedBy=multi-user.target\n```\n\n![2021-10-18_150144](https://img.qinweizhao.com/2021/10/2021-10-18_150144.png)\n\n>Description:描述服务\n>After:描述服务类别\n>　　 [Service]服务运行参数的设置\n>　　 Type=forking是后台运行的形式\n>　　 ExecStart为服务的具体运行命令\n>　　 ExecReload为重启命令\n>　　 ExecStop为停止命令\n>　　 PrivateTmp=True表示给服务分配独立的临时空间\n>　　 注意：[Service]的启动、重启、停止命令全部要求使用绝对路径\n>　　 [Install]运行级别下服务安装的相关设置，可设置为多用户，即系统运行级别为3\n\n```bash\n# 设置开机自启动\nsystemctl enable redis.service\n```\n\n## 七、常用命令\n\n调试相关命令\n\n```bash\n# 此命令用于重新加载修改后的启动脚本\nsystemctl daemon-reload\n# 显示概要\nsystemctl status redis.service\n# 查看启动详情\njournalctl -xe\n# 显示实时日志\njournalctl -f\n# 查看本机监听端口\nnetstat -tunlp|grep redis\n```\n\nsystemctl 常用命令\n\n```bash\n# 启动redis服务\nsystemctl start redis.service\n# 设置开机自启动\nsystemctl enable redis.service\n# 停止开机自启动\nsystemctl disable redis.service\n# 查看服务当前状态\nsystemctl status redis.service\n# 重新启动服务\nsystemctl restart redis.service\n# 查看所有已启动的服务\nsystemctl list-units --type=service\n```\n\n', '', 'centos7an-zhuang-redis626', 0, 'CentOS 7 安装 Redis 6.2.6一、获取压缩包wget https://download.redis.io/releases/redis-6.2.6.tar.gz解压到指定目录tar -zxvf redis-6.2.6.tar.gz -C /usr/local/redis/二、安装 g', '', '', 'CentOS 7 安装 Redis 6.2.6', 0, NULL, 122, 1701);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 47, '2021-10-19 17:32:38.769000', '2021-11-25 15:29:55.193000', b'0', '2021-11-25 15:29:55.186000', 0, '<h1 id=\"docker-安装-rabbitmq\">Docker 安装 RabbitMQ</h1>\n<h2 id=\"一查询镜像\">一、查询镜像</h2>\n<p><strong>查询获取 management 版本的，不要获取 last 版本的，management版本的才带有管理界面。</strong></p>\n<pre><code class=\"language-bash\"> docker search rabbitmq:management\n</code></pre>\n<h2 id=\"二拉取镜像\">二、拉取镜像</h2>\n<pre><code class=\"language-bash\">docker pull rabbitmq:management\n</code></pre>\n<h2 id=\"三运行\">三、运行</h2>\n<pre><code class=\"language-bash\"># 默认 guest 用户，密码也是 guest\n# 管理页面地址为：http://[IP]:15672\ndocker run -d -p 5672:5672 -p 15672:15672 --name rabbitmq rabbitmq:management\n</code></pre>\n<blockquote>\n<p>参数说明：</p>\n<p>-d 后台运行</p>\n<p>-p 端口映射，</p>\n<p>--name 别名</p>\n<p>可加参数：</p>\n<p>-v 映射目录或文件；</p>\n<p>--hostname  主机名（RabbitMQ的一个重要注意事项是它根据所谓的 “节点名称” 存储数据，默认为主机名）；</p>\n<p>-e 指定环境变量；（RABBITMQ_DEFAULT_VHOST：默认虚拟机名；RABBITMQ_DEFAULT_USER：默认的用户名；RABBITMQ_DEFAULT_PASS：默认用户名的密码）</p>\n</blockquote>\n', 0, NULL, NULL, '# Docker 安装 RabbitMQ\n\n## 一、查询镜像\n\n**查询获取 management 版本的，不要获取 last 版本的，management版本的才带有管理界面。**\n\n```bash\n docker search rabbitmq:management\n```\n\n## 二、拉取镜像\n\n```bash\ndocker pull rabbitmq:management\n```\n\n## 三、运行\n\n```bash\n# 默认 guest 用户，密码也是 guest\n# 管理页面地址为：http://[IP]:15672\ndocker run -d -p 5672:5672 -p 15672:15672 --name rabbitmq rabbitmq:management\n```\n\n>参数说明：\n>\n>-d 后台运行\n>\n>-p 端口映射，\n>\n>--name 别名\n>\n>可加参数：\n>\n>-v 映射目录或文件；\n>\n>--hostname  主机名（RabbitMQ的一个重要注意事项是它根据所谓的 “节点名称” 存储数据，默认为主机名）；\n>\n>-e 指定环境变量；（RABBITMQ_DEFAULT_VHOST：默认虚拟机名；RABBITMQ_DEFAULT_USER：默认的用户名；RABBITMQ_DEFAULT_PASS：默认用户名的密码）\n\n', '', 'dockeran-zhuang-rabbitmq', 0, 'Docker 安装 RabbitMQ一、查询镜像查询获取 management 版本的，不要获取 last 版本的，management版本的才带有管理界面。 docker search rabbitmq:management二、拉取镜像docker pull rabbitmq:management', '', '', 'Docker 安装 RabbitMQ', 0, NULL, 69, 455);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 48, '2021-10-19 22:02:13.422000', '2021-11-23 18:28:49.856000', b'0', '2021-11-23 18:28:49.846000', 0, '<h1 id=\"centos-7-安装-rabbitmq-398\">CentOS 7 安装 RabbitMQ 3.9.8</h1>\n<h2 id=\"一安装依赖\">一、安装依赖</h2>\n<pre><code class=\"language-bash\">yum -y install gcc glibc-devel make ncurses-devel openssl-devel xmlto perl wget gtk2-devel binutils-devel\n</code></pre>\n<h2 id=\"二下载并解压-erlang\">二、下载并解压 erlang</h2>\n<pre><code class=\"language-bash\"># 下载\nwget https://erlang.org/download/otp_src_24.0.tar.gz\n# 解压\ntar -zxvf otp_src_24.0.tar.gz\n</code></pre>\n<p>下载地址：</p>\n<p><img src=\"https://img.qinweizhao.com/2021/10/2021-10-19_182219.png\" alt=\"2021-10-19_182219\" /></p>\n<h2 id=\"三编译并安装\">三、编译并安装</h2>\n<pre><code class=\"language-bash\"># 安装位置分别为 /usr/local/erlang\n# 配置安装路径\n./configure --prefix=/usr/local/erlang\n# 编译\nmake\n# 安装\nmake install\n</code></pre>\n<p>编译时出现的错误，可以忽略。</p>\n<p><img src=\"https://img.qinweizhao.com/2021/10/2021-10-19_180453.png\" alt=\"2021-10-19_180453\" /></p>\n<h2 id=\"四配置环境变量并检验\">四、配置环境变量并检验</h2>\n<pre><code class=\"language-bash\"># 添加 erlang 环境变量\necho \'export PATH=$PATH:/usr/local/erlang/bin\' &gt;&gt; /etc/profile\n# 刷新环境变量\nsource /etc/profile\n# 检验 erlang\nerl\n# 退出\nhalt().\n</code></pre>\n<h2 id=\"五下载并解压-rabbitmq\">五、下载并解压 RabbitMQ</h2>\n<pre><code class=\"language-bash\"># 下载\nwget https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.9.8/rabbitmq-server-generic-unix-3.9.8.tar.xz\n# 解压 RabbitMQ \n# 安装位置 /usr/local/rabbitmq\n# 需要 xz ,如果没有先安装 xz\nyum install -y xz\n# 1.\n/bin/xz -d rabbitmq-server-generic-unix-3.9.8.tar.xz\n# 2.\ntar -xvf rabbitmq-server-generic-unix-3.9.8.tar -C /usr/local/rabbitmq/\n</code></pre>\n<p>下载地址：</p>\n<p><img src=\"https://img.qinweizhao.com/2021/10/2021-10-19_214856.png\" alt=\"2021-10-19_214856\" /></p>\n<h2 id=\"六配置-rabbitmq-环境变量\">六、配置 RabbitMQ 环境变量</h2>\n<pre><code class=\"language-bash\"># 添加 rabbitmq 环境变量\necho \'export PATH=$PATH:/usr/local/rabbitmq/rabbitmq_server-3.9.8/sbin\' &gt;&gt; /etc/profile\n# 刷新环境变量\nsource /etc/profile\n</code></pre>\n<h2 id=\"七开启-web-插件\">七、开启 web 插件</h2>\n<pre><code class=\"language-bash\">rabbitmq-plugins enable rabbitmq_management\n</code></pre>\n<h2 id=\"八防火墙放行端口\">八、防火墙放行端口</h2>\n<p>省略</p>\n<h2 id=\"九问题\">九、问题</h2>\n<p>默认用户无法在远程机器上登录</p>\n<p><img src=\"https://img.qinweizhao.com/2021/10/2021-10-20_112226.png\" alt=\"2021-10-20_112226\" /></p>\n<p>解决方案：创建一个新的用户。</p>\n<pre><code class=\"language-bash\"># 查看所有用户\nrabbitmqctl list_users\n# 添加一个用户\nrabbitmqctl add_user yvkg 112121\n# 配置权限\nrabbitmqctl set_permissions -p &quot;/&quot; yvkg &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;\n# 查看用户权限\nrabbitmqctl list_user_permissions yvkg\n# 设置tag\nrabbitmqctl set_user_tags yvkg administrator\n# 删除用户（安全起见，删除默认用户）\nrabbitmqctl delete_user guest\n</code></pre>\n<h2 id=\"十常用命令\">十、常用命令</h2>\n<pre><code class=\"language-bash\"># 启动\nrabbitmq-server -detached\n# 停止\nrabbitmqctl stop\n# 状态\nrabbitmqctl status\n</code></pre>\n', 1, NULL, NULL, '# CentOS 7 安装 RabbitMQ 3.9.8\n\n## 一、安装依赖\n\n```bash\nyum -y install gcc glibc-devel make ncurses-devel openssl-devel xmlto perl wget gtk2-devel binutils-devel\n```\n\n## 二、下载并解压 erlang\n\n```bash\n# 下载\nwget https://erlang.org/download/otp_src_24.0.tar.gz\n# 解压\ntar -zxvf otp_src_24.0.tar.gz\n```\n\n下载地址：\n\n![2021-10-19_182219](https://img.qinweizhao.com/2021/10/2021-10-19_182219.png)\n\n## 三、编译并安装\n\n```bash\n# 安装位置分别为 /usr/local/erlang\n# 配置安装路径\n./configure --prefix=/usr/local/erlang\n# 编译\nmake\n# 安装\nmake install\n```\n\n编译时出现的错误，可以忽略。\n\n![2021-10-19_180453](https://img.qinweizhao.com/2021/10/2021-10-19_180453.png)\n\n## 四、配置环境变量并检验\n\n```bash\n# 添加 erlang 环境变量\necho \'export PATH=$PATH:/usr/local/erlang/bin\' >> /etc/profile\n# 刷新环境变量\nsource /etc/profile\n# 检验 erlang\nerl\n# 退出\nhalt().\n```\n\n## 五、下载并解压 RabbitMQ\n\n```bash\n# 下载\nwget https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.9.8/rabbitmq-server-generic-unix-3.9.8.tar.xz\n# 解压 RabbitMQ \n# 安装位置 /usr/local/rabbitmq\n# 需要 xz ,如果没有先安装 xz\nyum install -y xz\n# 1.\n/bin/xz -d rabbitmq-server-generic-unix-3.9.8.tar.xz\n# 2.\ntar -xvf rabbitmq-server-generic-unix-3.9.8.tar -C /usr/local/rabbitmq/\n```\n\n下载地址：\n\n![2021-10-19_214856](https://img.qinweizhao.com/2021/10/2021-10-19_214856.png)\n\n## 六、配置 RabbitMQ 环境变量\n\n```bash\n# 添加 rabbitmq 环境变量\necho \'export PATH=$PATH:/usr/local/rabbitmq/rabbitmq_server-3.9.8/sbin\' >> /etc/profile\n# 刷新环境变量\nsource /etc/profile\n```\n\n## 七、开启 web 插件\n\n```bash\nrabbitmq-plugins enable rabbitmq_management\n```\n\n## 八、防火墙放行端口\n\n省略\n\n## 九、问题\n\n默认用户无法在远程机器上登录\n\n![2021-10-20_112226](https://img.qinweizhao.com/2021/10/2021-10-20_112226.png)\n\n解决方案：创建一个新的用户。\n\n```bash\n# 查看所有用户\nrabbitmqctl list_users\n# 添加一个用户\nrabbitmqctl add_user yvkg 112121\n# 配置权限\nrabbitmqctl set_permissions -p \"/\" yvkg \".*\" \".*\" \".*\"\n# 查看用户权限\nrabbitmqctl list_user_permissions yvkg\n# 设置tag\nrabbitmqctl set_user_tags yvkg administrator\n# 删除用户（安全起见，删除默认用户）\nrabbitmqctl delete_user guest\n```\n\n## 十、常用命令\n\n```bash\n# 启动\nrabbitmq-server -detached\n# 停止\nrabbitmqctl stop\n# 状态\nrabbitmqctl status\n```\n', '', 'centos7an-zhuang-rabbitmq398', 0, 'CentOS 7 安装 RabbitMQ 3.9.8一、安装依赖yum -y install gcc glibc-devel make ncurses-devel openssl-devel xmlto perl wget gtk2-devel binutils-devel二、下载并解压 erlan', '', '', 'CentOS 7 安装 RabbitMQ 3.9.8', 0, NULL, 165, 1393);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 49, '2021-10-24 21:56:56.720000', '2021-11-23 18:28:54.635000', b'0', '2021-11-23 18:28:54.627000', 0, '<h1 id=\"git-修改历史提交的用户名和邮箱\">Git 修改历史提交的用户名和邮箱</h1>\n<h2 id=\"一裸需要修改的仓库\">一、裸需要修改的仓库</h2>\n<pre><code class=\"language-bash\"># 仓库地址 .git 可以不要\n# git clone --bare https://github.com/qinweizhao/仓库地址.git\ngit clone --bare https://github.com/qinweizhao/qwz-spring-boot-sample.git \n# 进入该目录， 注意有 .git \ncd qwz-spring-boot-sample.git \n</code></pre>\n<h2 id=\"二修改本地项目的邮箱和用户名\">二、修改本地项目的邮箱和用户名</h2>\n<pre><code class=\"language-bash\"># !/bin/sh\ngit filter-branch --env-filter \'\nOLD_EMAIL=&quot;老的邮箱&quot;\nCORRECT_NAME=&quot;新用户名&quot;\nCORRECT_EMAIL=&quot;新邮箱&quot;\nif [ &quot;$GIT_COMMITTER_EMAIL&quot; = &quot;$OLD_EMAIL&quot; ]\nthen\n    export GIT_COMMITTER_NAME=&quot;$CORRECT_NAME&quot;\n    export GIT_COMMITTER_EMAIL=&quot;$CORRECT_EMAIL&quot;\nfi\nif [ &quot;$GIT_AUTHOR_EMAIL&quot; = &quot;$OLD_EMAIL&quot; ]\nthen\n    export GIT_AUTHOR_NAME=&quot;$CORRECT_NAME&quot;\n    export GIT_AUTHOR_EMAIL=&quot;$CORRECT_EMAIL&quot;\nfi\n\' --tag-name-filter cat -- --branches --tags\n</code></pre>\n<p>例子</p>\n<pre><code class=\"language-bash\">git filter-branch --env-filter \'\n  OLD_EMAILA=&quot;qinweizhao1997@126.com&quot;\n  OLD_EMAILB=&quot;qinweizhao1997@163.com&quot;\n  CORRECT_NAME=&quot;YVKG&quot;\n  CORRECT_EMAIL=&quot;yvkg@qq.com&quot;\n  if [ &quot;$GIT_COMMITTER_EMAIL&quot; = &quot;$OLD_EMAILA&quot; ]\n  then\n      export GIT_COMMITTER_NAME=&quot;$CORRECT_NAME&quot;\n      export GIT_COMMITTER_EMAIL=&quot;$CORRECT_EMAIL&quot;\n  fi\n  if [ &quot;$GIT_AUTHOR_EMAIL&quot; = &quot;$OLD_EMAILA&quot; ]\n  then\n      export GIT_AUTHOR_NAME=&quot;$CORRECT_NAME&quot;\n      export GIT_AUTHOR_EMAIL=&quot;$CORRECT_EMAIL&quot;\n  fi \n  if [ &quot;$GIT_COMMITTER_EMAIL&quot; = &quot;$OLD_EMAILB&quot; ]\n  then\n      export GIT_COMMITTER_NAME=&quot;$CORRECT_NAME&quot;\n      export GIT_COMMITTER_EMAIL=&quot;$CORRECT_EMAIL&quot;\n  fi\n  if [ &quot;$GIT_AUTHOR_EMAIL&quot; = &quot;$OLD_EMAILB&quot; ]\n  then\n      export GIT_AUTHOR_NAME=&quot;$CORRECT_NAME&quot;\n      export GIT_AUTHOR_EMAIL=&quot;$CORRECT_EMAIL&quot;\n  fi\n  \' --tag-name-filter cat -- --branches --tags\n</code></pre>\n<h2 id=\"三提交修改\">三、提交修改</h2>\n<pre><code class=\"language-bash\">git push --force --tags origin \'refs/heads/*\'\n</code></pre>\n<p>如果再次执行脚本，则会抛出异常</p>\n<blockquote>\n<p>Cannot create a new backup.<br />\nA previous backup already exists in refs/original/<br />\nForce overwriting the backup with -f</p>\n</blockquote>\n<p>因为执行过一次 <strong>git filter-branch</strong>，所以在 <strong>refs/original/</strong> 有一个备份，只要删掉那个备份即可。</p>\n<pre><code class=\"language-bash\">git update-ref -d refs/original/refs/heads/master\n</code></pre>\n', 0, NULL, NULL, '# Git 修改历史提交的用户名和邮箱\n\n## 一、裸需要修改的仓库\n\n```bash\n# 仓库地址 .git 可以不要\n# git clone --bare https://github.com/qinweizhao/仓库地址.git\ngit clone --bare https://github.com/qinweizhao/qwz-spring-boot-sample.git \n# 进入该目录， 注意有 .git \ncd qwz-spring-boot-sample.git \n```\n\n## 二、修改本地项目的邮箱和用户名\n\n```bash\n# !/bin/sh\ngit filter-branch --env-filter \'\nOLD_EMAIL=\"老的邮箱\"\nCORRECT_NAME=\"新用户名\"\nCORRECT_EMAIL=\"新邮箱\"\nif [ \"$GIT_COMMITTER_EMAIL\" = \"$OLD_EMAIL\" ]\nthen\n    export GIT_COMMITTER_NAME=\"$CORRECT_NAME\"\n    export GIT_COMMITTER_EMAIL=\"$CORRECT_EMAIL\"\nfi\nif [ \"$GIT_AUTHOR_EMAIL\" = \"$OLD_EMAIL\" ]\nthen\n    export GIT_AUTHOR_NAME=\"$CORRECT_NAME\"\n    export GIT_AUTHOR_EMAIL=\"$CORRECT_EMAIL\"\nfi\n\' --tag-name-filter cat -- --branches --tags\n```\n\n例子\n\n```bash\ngit filter-branch --env-filter \'\n  OLD_EMAILA=\"qinweizhao1997@126.com\"\n  OLD_EMAILB=\"qinweizhao1997@163.com\"\n  CORRECT_NAME=\"YVKG\"\n  CORRECT_EMAIL=\"yvkg@qq.com\"\n  if [ \"$GIT_COMMITTER_EMAIL\" = \"$OLD_EMAILA\" ]\n  then\n      export GIT_COMMITTER_NAME=\"$CORRECT_NAME\"\n      export GIT_COMMITTER_EMAIL=\"$CORRECT_EMAIL\"\n  fi\n  if [ \"$GIT_AUTHOR_EMAIL\" = \"$OLD_EMAILA\" ]\n  then\n      export GIT_AUTHOR_NAME=\"$CORRECT_NAME\"\n      export GIT_AUTHOR_EMAIL=\"$CORRECT_EMAIL\"\n  fi \n  if [ \"$GIT_COMMITTER_EMAIL\" = \"$OLD_EMAILB\" ]\n  then\n      export GIT_COMMITTER_NAME=\"$CORRECT_NAME\"\n      export GIT_COMMITTER_EMAIL=\"$CORRECT_EMAIL\"\n  fi\n  if [ \"$GIT_AUTHOR_EMAIL\" = \"$OLD_EMAILB\" ]\n  then\n      export GIT_AUTHOR_NAME=\"$CORRECT_NAME\"\n      export GIT_AUTHOR_EMAIL=\"$CORRECT_EMAIL\"\n  fi\n  \' --tag-name-filter cat -- --branches --tags\n```\n\n## 三、提交修改\n\n```bash\ngit push --force --tags origin \'refs/heads/*\'\n```\n\n如果再次执行脚本，则会抛出异常\n\n>Cannot create a new backup.\n>A previous backup already exists in refs/original/\n>Force overwriting the backup with -f\n\n因为执行过一次 **git filter-branch**，所以在 **refs/original/** 有一个备份，只要删掉那个备份即可。\n\n```bash\ngit update-ref -d refs/original/refs/heads/master\n```\n\n', '', 'gitxiu-gai-li-shi-ti-jiao-de-yong-hu-ming-he-you-xiang', 0, 'Git 修改历史提交的用户名和邮箱一、裸需要修改的仓库# 仓库地址 .git 可以不要# git clone --bare https://github.com/qinweizhao/仓库地址.gitgit clone --bare https://github.com/qinweizhao/qwz', '', '', 'Git 修改历史提交的用户名和邮箱', 0, NULL, 129, 1848);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 50, '2021-11-02 22:05:47.466000', '2021-11-23 18:28:59.843000', b'0', '2021-11-23 18:28:59.835000', 0, '<h1 id=\"nginx-配置\">Nginx 配置</h1>\n<ol>\n<li>\n<p><strong>侦听端口</strong></p>\n<pre><code class=\"language-conf\">server {  \n# Standard HTTP Protocol  \nlisten 80;  \n# Standard HTTPS Protocol  \nlisten 443 ssl;  \n# For http2  \nlisten 443 ssl http2;  \n# Listen on 80 using IPv6  \nlisten [::]:80;  \n# Listen only on using IPv6  \nlisten [::]:80 ipv6only=on;  \n}  \n</code></pre>\n</li>\n<li>\n<p><strong>访问日志</strong></p>\n<pre><code>server {  \n# Relative or full path to log file  \naccess_log /path/to/file.log;  \n# Turn \'on\' or \'off\'    \naccess_log on;  \n}  \n</code></pre>\n</li>\n<li>\n<p><strong>域名</strong></p>\n<pre><code>server {  \n# Listen to yourdomain.com  \nserver_name yourdomain.com;  \n# Listen to multiple domains server_name yourdomain.com www.yourdomain.com;  \n# Listen to all domains  \nserver_name *.yourdomain.com;  \n# Listen to all top-level domains  \nserver_name yourdomain.*;  \n# Listen to unspecified Hostnames (Listens to IP address itself)  \nserver_name &quot;&quot;;  \n}  \n</code></pre>\n</li>\n<li>\n<p><strong>静态资产</strong></p>\n<pre><code>server {  \nlisten 80;  \nserver_name yourdomain.com;  \nlocation / {  \nroot /path/to/website;  \n}  \n}  \n</code></pre>\n</li>\n<li>\n<p><strong>重定向</strong></p>\n<pre><code>server {  \nlisten 80;  \nserver_name www.yourdomain.com;  \nreturn 301 http://yourdomain.com$request_uri;  \n}  \nserver {  \nlisten 80;  \nserver_name www.yourdomain.com;  \nlocation /redirect-url {  \nreturn 301 http://otherdomain.com;  \n}  \n}  \n</code></pre>\n</li>\n<li>\n<p><strong>反向代理</strong></p>\n<pre><code>server {  \nlisten 80;  \nserver_name yourdomain.com;  \nlocation / {  \nproxy_pass http://0.0.0.0:3000;  \n# where 0.0.0.0:3000 is your application server (Ex: node.js) bound on 0.0.0.0 listening on port 3000  \n}  \n}  \n</code></pre>\n</li>\n<li>\n<p><strong>负载均衡</strong></p>\n<pre><code>upstream node_js {  \nserver 0.0.0.0:3000;  \nserver 0.0.0.0:4000;  \nserver 123.131.121.122;  \n}  \nserver {  \nlisten 80;  \nserver_name yourdomain.com;  \nlocation / {  \nproxy_pass http://node_js;  \n}  \n}  \n</code></pre>\n</li>\n<li>\n<p><strong>SSL 协议</strong></p>\n<pre><code>server {  \nlisten 443 ssl;  \nserver_name yourdomain.com;  \nssl on;  \nssl_certificate /path/to/cert.pem;  \nssl_certificate_key /path/to/privatekey.pem;  \nssl_stapling on;  \nssl_stapling_verify on;  \nssl_trusted_certificate /path/to/fullchain.pem;  \nssl_protocols TLSv1 TLSv1.1 TLSv1.2;  \nssl_session_timeout 1h;  \nssl_session_cache shared:SSL:50m;  \nadd_header Strict-Transport-Security max-age=15768000;  \n}  \n# Permanent Redirect for HTTP to HTTPS  \nserver   \n{  \nlisten 80;  \nserver_name yourdomain.com;  \nreturn 301 https://$host$request_uri;  \n}  \n</code></pre>\n</li>\n<li>\n<p>补充：在线配置网站：<a href=\"https://nginxconfig.io/\">https://nginxconfig.io/</a></p>\n</li>\n</ol>\n', 0, NULL, NULL, '# Nginx 配置\n\n1. **侦听端口**\n\n   ```conf\n   server {  \n   # Standard HTTP Protocol  \n   listen 80;  \n   # Standard HTTPS Protocol  \n   listen 443 ssl;  \n   # For http2  \n   listen 443 ssl http2;  \n   # Listen on 80 using IPv6  \n   listen [::]:80;  \n   # Listen only on using IPv6  \n   listen [::]:80 ipv6only=on;  \n   }  \n   ```\n\n2. **访问日志**\n\n    ```\n    server {  \n    # Relative or full path to log file  \n    access_log /path/to/file.log;  \n    # Turn \'on\' or \'off\'    \n    access_log on;  \n    }  \n    ```\n\n3. **域名**\n\n    ```\n    server {  \n    # Listen to yourdomain.com  \n    server_name yourdomain.com;  \n    # Listen to multiple domains server_name yourdomain.com www.yourdomain.com;  \n    # Listen to all domains  \n    server_name *.yourdomain.com;  \n    # Listen to all top-level domains  \n    server_name yourdomain.*;  \n    # Listen to unspecified Hostnames (Listens to IP address itself)  \n    server_name \"\";  \n    }  \n    ```\n\n4. **静态资产**\n\n    ```\n    server {  \n    listen 80;  \n    server_name yourdomain.com;  \n    location / {  \n    root /path/to/website;  \n    }  \n    }  \n    ```\n\n5. **重定向**\n\n    ```\n    server {  \n    listen 80;  \n    server_name www.yourdomain.com;  \n    return 301 http://yourdomain.com$request_uri;  \n    }  \n    server {  \n    listen 80;  \n    server_name www.yourdomain.com;  \n    location /redirect-url {  \n    return 301 http://otherdomain.com;  \n    }  \n    }  \n    ```\n\n6. **反向代理**\n\n    ```\n    server {  \n    listen 80;  \n    server_name yourdomain.com;  \n    location / {  \n    proxy_pass http://0.0.0.0:3000;  \n    # where 0.0.0.0:3000 is your application server (Ex: node.js) bound on 0.0.0.0 listening on port 3000  \n    }  \n    }  \n    ```\n\n7. **负载均衡**\n\n    ```\n    upstream node_js {  \n    server 0.0.0.0:3000;  \n    server 0.0.0.0:4000;  \n    server 123.131.121.122;  \n    }  \n    server {  \n    listen 80;  \n    server_name yourdomain.com;  \n    location / {  \n    proxy_pass http://node_js;  \n    }  \n    }  \n    ```\n\n8. **SSL 协议**\n\n    ```\n    server {  \n    listen 443 ssl;  \n    server_name yourdomain.com;  \n    ssl on;  \n    ssl_certificate /path/to/cert.pem;  \n    ssl_certificate_key /path/to/privatekey.pem;  \n    ssl_stapling on;  \n    ssl_stapling_verify on;  \n    ssl_trusted_certificate /path/to/fullchain.pem;  \n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;  \n    ssl_session_timeout 1h;  \n    ssl_session_cache shared:SSL:50m;  \n    add_header Strict-Transport-Security max-age=15768000;  \n    }  \n    # Permanent Redirect for HTTP to HTTPS  \n    server   \n    {  \n    listen 80;  \n    server_name yourdomain.com;  \n    return 301 https://$host$request_uri;  \n    }  \n    ```\n\n9. 补充：在线配置网站：https://nginxconfig.io/\n\n', '', 'nginxpei-zhi', 0, 'Nginx 配置侦听端口server {  # Standard HTTP Protocol  listen 80;  # Standard HTTPS Protocol  listen 443 ssl;  # For http2  listen 443 ssl http2;  # Listen o', '', '', 'Nginx 配置', 0, NULL, 65, 1701);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 51, '2021-11-04 17:26:09.379000', '2021-11-23 18:28:27.764000', b'0', '2021-11-23 18:28:27.755000', 0, '<h1 id=\"github-搜索技巧\">GitHub 搜索技巧</h1>\n<h2 id=\"一常用\">一、常用</h2>\n<ol>\n<li>\n<p>指定搜索仓库标题、描述或README内容</p>\n<blockquote>\n<p>in:name 关键字</p>\n<p>in:descripton 关键字</p>\n<p>in:readme 关键词</p>\n</blockquote>\n<p><img src=\"https://img.qinweizhao.com/2021/11/2021-11-04_164356.png\" alt=\"2021-11-04_164356\" /></p>\n<p><img src=\"https://img.qinweizhao.com/2021/11/2021-11-04_164615.png\" alt=\"2021-11-04_164615\" /></p>\n<p><img src=\"https://img.qinweizhao.com/2021/11/2021-11-04_164644.png\" alt=\"2021-11-04_164644\" /></p>\n</li>\n<li>\n<p>明确搜索 star ，fork 数大于多少</p>\n<blockquote>\n<p>stars: &gt;数字 关键字</p>\n<p>stars: 10..20 关键词</p>\n<p>fork: &gt; 数字 关键字</p>\n<p>fork: 10..20 关键词</p>\n</blockquote>\n<p><img src=\"https://img.qinweizhao.com/2021/11/2021-11-04_170645.png\" alt=\"2021-11-04_170645\" /><img src=\"https://img.qinweizhao.com/2021/11/2021-11-04_171048.png\" alt=\"2021-11-04_171048\" /></p>\n</li>\n<li>\n<p>明确仓库是否还在更新维护</p>\n<blockquote>\n<p>pushed:&gt;2020-02-20 关键字</p>\n<p>created:&gt;2020-02-20 关键字</p>\n</blockquote>\n<p><img src=\"https://img.qinweizhao.com/2021/11/2021-11-04_171330.png\" alt=\"2021-11-04_171330\" /></p>\n</li>\n<li>\n<p>明确搜索仓库的语言</p>\n<blockquote>\n<p>language:java 关键词</p>\n</blockquote>\n<p><img src=\"https://img.qinweizhao.com/2021/11/2021-11-04_171402.png\" alt=\"2021-11-04_171402\" /></p>\n</li>\n</ol>\n<h2 id=\"二更多\">二、更多</h2>\n<ol>\n<li>\n<p>明确搜索仓库大小的</p>\n<blockquote>\n<p>size:&gt;=5000 关键词</p>\n</blockquote>\n<p><img src=\"https://img.qinweizhao.com/2021/11/2021-11-04_171448.png\" alt=\"2021-11-04_171448\" /></p>\n</li>\n<li>\n<p>明确搜索仓库的LICENSE</p>\n<blockquote>\n<p>license:apache-2.0 关键字</p>\n</blockquote>\n<p><img src=\"https://img.qinweizhao.com/2021/11/2021-11-04_171509.png\" alt=\"2021-11-04_171509\" /></p>\n</li>\n<li>\n<p>明确搜索某个人或组织的合库</p>\n<blockquote>\n<p>user:alibaba</p>\n<p>user:alibaba language:java</p>\n</blockquote>\n<p><img src=\"https://img.qinweizhao.com/2021/11/2021-11-04_171611.png\" alt=\"2021-11-04_171611\" /></p>\n</li>\n<li>\n<p><a href=\"https://github.com/search/advanced\">高级搜索</a></p>\n<p><img src=\"https://img.qinweizhao.com/2021/11/2021-11-04_171716.png\" alt=\"2021-11-04_171716\" /></p>\n</li>\n<li>\n<p><a href=\"https://github.com/trending\">总结了每天/每周/每月周期的热门</a></p>\n<p><img src=\"https://img.qinweizhao.com/2021/11/2021-11-04_172009.png\" alt=\"2021-11-04_172009\" /></p>\n</li>\n</ol>\n', 0, NULL, NULL, '# GitHub 搜索技巧\n\n## 一、常用\n\n1. 指定搜索仓库标题、描述或README内容\n\n   >in:name 关键字\n   >\n   >in:descripton 关键字\n   >\n   >in:readme 关键词\n\n   ![2021-11-04_164356](https://img.qinweizhao.com/2021/11/2021-11-04_164356.png)\n\n   ![2021-11-04_164615](https://img.qinweizhao.com/2021/11/2021-11-04_164615.png)\n\n   ![2021-11-04_164644](https://img.qinweizhao.com/2021/11/2021-11-04_164644.png)\n\n2. 明确搜索 star ，fork 数大于多少\n\n    >stars: >数字 关键字\n    >\n    >stars: 10..20 关键词\n    >\n    >fork: > 数字 关键字\n    >\n    >fork: 10..20 关键词\n\n    ![2021-11-04_170645](https://img.qinweizhao.com/2021/11/2021-11-04_170645.png)![2021-11-04_171048](https://img.qinweizhao.com/2021/11/2021-11-04_171048.png)\n\n3. 明确仓库是否还在更新维护\n\n    > pushed:>2020-02-20 关键字\n    >\n    > created:>2020-02-20 关键字\n\n    ![2021-11-04_171330](https://img.qinweizhao.com/2021/11/2021-11-04_171330.png)\n\n4. 明确搜索仓库的语言\n\n   > language:java 关键词\n\n   ![2021-11-04_171402](https://img.qinweizhao.com/2021/11/2021-11-04_171402.png)\n\n## 二、更多\n\n1. 明确搜索仓库大小的\n\n   > size:>=5000 关键词\n\n   ![2021-11-04_171448](https://img.qinweizhao.com/2021/11/2021-11-04_171448.png)\n\n2. 明确搜索仓库的LICENSE\n\n   > license:apache-2.0 关键字\n\n   ![2021-11-04_171509](https://img.qinweizhao.com/2021/11/2021-11-04_171509.png)\n\n3. 明确搜索某个人或组织的合库\n\n   > user:alibaba\n   >\n   > user:alibaba language:java\n\n   ![2021-11-04_171611](https://img.qinweizhao.com/2021/11/2021-11-04_171611.png)\n\n4. [高级搜索](https://github.com/search/advanced)\n\n   ![2021-11-04_171716](https://img.qinweizhao.com/2021/11/2021-11-04_171716.png)\n\n5. [总结了每天/每周/每月周期的热门](https://github.com/trending)\n\n   ![2021-11-04_172009](https://img.qinweizhao.com/2021/11/2021-11-04_172009.png)\n', '', 'githubsou-suo-ji-qiao', 0, 'GitHub 搜索技巧一、常用指定搜索仓库标题、描述或README内容in:name 关键字in:descripton 关键字in:readme 关键词明确搜索 star ，fork 数大于多少stars: &gt;数字 关键字stars: 10..20 关键词fork: &gt; 数字 关键字fo', '', '', 'GitHub 搜索技巧', 0, NULL, 149, 369);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 52, '2021-11-05 16:10:56.795000', '2021-11-23 18:28:17.806000', b'0', '2021-11-23 18:28:17.795000', 0, '<h1 id=\"docker-命令集合\">Docker 命令集合</h1>\n<h2 id=\"一基本命令\">一、基本命令</h2>\n<pre><code class=\"language-bash\"># Docker 安装\nyum -y install docker-io\ndocker --version\n# 启动 Docker 进程\nsystemctl start docker\nsystemctl status docker\n# 设置开机自启动 docker 服务\nsystemctl enable docker\n</code></pre>\n<h2 id=\"二-镜像操作\">二、 镜像操作</h2>\n<pre><code class=\"language-bash\"># 查看镜像并下载\ndocker search hello-world\ndocker pull hello-world\n# 查看已下载的镜像\ndocker images\n# 运行镜像\ndocker run hello-world\n# 查看所有容器（容器来自于镜像）\ndocker ps -a\n# 使用 docker logs 查看容器控制台输出获取容器的日志\ndocker logs hello-world\n# 从一个 tar 包创建一个镜像，往往和 export 结合使用\ndocker import\n# 使用 Dockerfile 创建镜像（推荐）\ndocker build\n# 从容器创建镜像\ndocker commit\n# 删除一个镜像\ndocker rmi\n# 从一个tar包创建一个镜像，和 save 配合使用\ndocker load\n# 将一个镜像保存为一个tar包，带 layers 和 tag 信息\ndocker save\n# 显示生成一个镜像的历史命令\ndocker history\n# 为镜像起一个别名\ndocker tag\n</code></pre>\n<h2 id=\"三容器操作\">三、容器操作</h2>\n<pre><code class=\"language-bash\"># 创建一个容器但是不启动它\ndocker create\n# 创建并启动一个容器\ndocker run\n# 停止容器运行，发送信号 SIGTERM\ndocker stop\n# 启动一个停止状态的容器\ndocker start\n# 重启一个容器\ndocker restart\n# 删除一个容器\ndocker rm\n# 发送信号给容器，默认 SIGKILL\ndocker kill\n# 连接（进入）到一个正在运行的容器\ndocker attach\n# 阻塞一个容器，直到容器停止运行\ndocker wait\n# 执行 在容器里执行一个命令，可以执行bash进入交互式\ndocker exec\n# 显示状态为运行 (Up) 的容器\ndocker ps\n# 显示所有容器,包括运行中 (Up) 的和退出的 (Exited)\ndocker ps -a\n# 深入容器内部获取容器所有信息\ndocker inspect\n# 查看容器的日志 (stdout/stderr)\ndocker logs\n# 得到docker服务器的实时的事件\ndocker events\n# 显示容器的端口映射\ndocker port\n# 显示容器的进程信息\ndocker top\n# 显示容器文件系统的前后变化\ndocker diff\n# 从容器里向外拷贝文件或目录\ndocker cp\n# 将容器整个文件系统导出为一个tar包，不带 layers、tag 等信息\ndocker export\n</code></pre>\n<h2 id=\"四镜像仓库-registry-操作\">四、镜像仓库 (registry) 操作</h2>\n<pre><code class=\"language-bash\"># 登录到一个 registry\ndocker login\n# 从 registry 仓库搜索镜像\ndocker search\n# 从仓库下载镜像到本地\ndocker pull\n# 将一个镜像 push 到 registry 仓库中\ndocker push\n</code></pre>\n', 0, NULL, NULL, '# Docker 命令集合\n\n## 一、基本命令\n\n ```bash\n # Docker 安装\n yum -y install docker-io\n docker --version\n # 启动 Docker 进程\n systemctl start docker\n systemctl status docker\n # 设置开机自启动 docker 服务\n systemctl enable docker\n ```\n\n## 二、 镜像操作\n\n```bash\n# 查看镜像并下载\ndocker search hello-world\ndocker pull hello-world\n# 查看已下载的镜像\ndocker images\n# 运行镜像\ndocker run hello-world\n# 查看所有容器（容器来自于镜像）\ndocker ps -a\n# 使用 docker logs 查看容器控制台输出获取容器的日志\ndocker logs hello-world\n# 从一个 tar 包创建一个镜像，往往和 export 结合使用\ndocker import\n# 使用 Dockerfile 创建镜像（推荐）\ndocker build\n# 从容器创建镜像\ndocker commit\n# 删除一个镜像\ndocker rmi\n# 从一个tar包创建一个镜像，和 save 配合使用\ndocker load\n# 将一个镜像保存为一个tar包，带 layers 和 tag 信息\ndocker save\n# 显示生成一个镜像的历史命令\ndocker history\n# 为镜像起一个别名\ndocker tag\n```\n\n## 三、容器操作\n\n```bash\n# 创建一个容器但是不启动它\ndocker create\n# 创建并启动一个容器\ndocker run\n# 停止容器运行，发送信号 SIGTERM\ndocker stop\n# 启动一个停止状态的容器\ndocker start\n# 重启一个容器\ndocker restart\n# 删除一个容器\ndocker rm\n# 发送信号给容器，默认 SIGKILL\ndocker kill\n# 连接（进入）到一个正在运行的容器\ndocker attach\n# 阻塞一个容器，直到容器停止运行\ndocker wait\n# 执行 在容器里执行一个命令，可以执行bash进入交互式\ndocker exec\n# 显示状态为运行 (Up) 的容器\ndocker ps\n# 显示所有容器,包括运行中 (Up) 的和退出的 (Exited)\ndocker ps -a\n# 深入容器内部获取容器所有信息\ndocker inspect\n# 查看容器的日志 (stdout/stderr)\ndocker logs\n# 得到docker服务器的实时的事件\ndocker events\n# 显示容器的端口映射\ndocker port\n# 显示容器的进程信息\ndocker top\n# 显示容器文件系统的前后变化\ndocker diff\n# 从容器里向外拷贝文件或目录\ndocker cp\n# 将容器整个文件系统导出为一个tar包，不带 layers、tag 等信息\ndocker export\n```\n\n## 四、镜像仓库 (registry) 操作\n\n```bash\n# 登录到一个 registry\ndocker login\n# 从 registry 仓库搜索镜像\ndocker search\n# 从仓库下载镜像到本地\ndocker pull\n# 将一个镜像 push 到 registry 仓库中\ndocker push\n```\n', '', 'docker命令集合', 0, 'Docker 命令集合一、Docker 安装yum -y install docker-iodocker --version二、启动 Docker 进程systemctl start dockersystemctl status docker# 设置开机自启动 docker 服务systemctl ', '', '', 'Docker 命令集合', 0, NULL, 88, 1223);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 53, '2021-11-06 18:47:04.174000', '2021-11-23 18:28:05.321000', b'0', '2021-11-23 18:28:05.306000', 0, '<h1 id=\"centos-7-防火墙-firewall-的使用\">CentOS 7 防火墙 Firewall 的使用</h1>\n<pre><code class=\"language-bash\"># 开启防火墙\nsystemctl start firewalld\n# 关闭防火墙\nsystemctl stop firewalld\n# 查看防火墙状态\nsystemctl status firewalld\n# 设置开机启动\nsystemctl enable firewalld\n# 禁用开机启动\nsystemctl disable firewalld\n# 重启防火墙\nfirewall-cmd --reload\n# 开放端口（修改后需要重启防火墙方可生效）\nfirewall-cmd --zone=public --add-port=8080/tcp --permanent\n# 查看开放的端口\nfirewall-cmd --list-ports\n# 关闭端口\nfirewall-cmd --zone=public --remove-port=8080/tcp --permanent\n</code></pre>\n<blockquote>\n<pre><code class=\"language-bash\"># 参数解释\n1、firwall-cmd：是Linux提供的操作 firewall 的一个工具；\n2、--permanent：表示设置为持久；\n3、--add-port：标识添加的端口；\n</code></pre>\n</blockquote>\n', 0, NULL, NULL, '# CentOS 7 防火墙 Firewall 的使用\n\n```bash\n# 开启防火墙\nsystemctl start firewalld\n# 关闭防火墙\nsystemctl stop firewalld\n# 查看防火墙状态\nsystemctl status firewalld\n# 设置开机启动\nsystemctl enable firewalld\n# 禁用开机启动\nsystemctl disable firewalld\n# 重启防火墙\nfirewall-cmd --reload\n# 开放端口（修改后需要重启防火墙方可生效）\nfirewall-cmd --zone=public --add-port=8080/tcp --permanent\n# 查看开放的端口\nfirewall-cmd --list-ports\n# 关闭端口\nfirewall-cmd --zone=public --remove-port=8080/tcp --permanent\n```\n\n>```bash\n># 参数解释\n>1、firwall-cmd：是Linux提供的操作 firewall 的一个工具；\n>2、--permanent：表示设置为持久；\n>3、--add-port：标识添加的端口；\n>```\n', '', 'centos7fang-huo-qiang-firewallde-shi-yong', 0, 'CentOS 7 防火墙 Firewall 的使用# 开启防火墙systemctl start firewalld# 关闭防火墙systemctl stop firewalld# 查看防火墙状态systemctl status firewalld# 设置开机启动systemctl enable fi', '', '', 'CentOS 7 防火墙 Firewall 的使用', 0, NULL, 107, 457);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 58, '2021-11-12 19:19:22.293000', '2022-03-12 23:02:20.141000', b'0', '2022-03-12 23:02:20.129000', 0, '<h1 id=\"centos-7-安装-nginx\">CentOS 7 安装 Nginx</h1>\n<h2 id=\"一准备\">一、准备</h2>\n<h2 id=\"1gcc\">1、gcc</h2>\n<blockquote>\n<p>gcc 是 Linux 的编译器，可以编译 C、C++、Ada、Object C 和 Java 等语言。</p>\n</blockquote>\n<p>查看gcc版本</p>\n<pre><code class=\"language-bash\">gcc -v\n</code></pre>\n<p>gcc 安装命令</p>\n<pre><code class=\"language-bash\">yum -y install gcc\n</code></pre>\n<h2 id=\"2pcre-和-pcre-devel\">2、pcre 和 pcre-devel</h2>\n<blockquote>\n<p>nginx 的 http 模块使用 pcre 来解析正则表达式。</p>\n</blockquote>\n<pre><code class=\"language-bash\">yum install -y pcre pcre-devel\n</code></pre>\n<h2 id=\"3zlib\">3、zlib</h2>\n<blockquote>\n<p>nginx使用zlib对http包的内容进行gzip。</p>\n</blockquote>\n<pre><code class=\"language-bash\">yum install -y zlib zlib-devel\n</code></pre>\n<h2 id=\"4openssl\">4、openssl</h2>\n<blockquote>\n<p>openssl用于数据链路通信安全加密。</p>\n</blockquote>\n<pre><code class=\"language-bash\">yum install -y openssl openssl-devel\n</code></pre>\n<h2 id=\"5nginx-压缩包\">5、nginx 压缩包</h2>\n<ol>\n<li>\n<p>获取稳定版本下载链接。官网地址：<a href=\"http://nginx.org/en/download.html\">http://nginx.org/en/download.html</a></p>\n</li>\n<li>\n<p>下载 nginx</p>\n<pre><code class=\"language-bash\">wget http://nginx.org/download/nginx-1.20.1.tar.gz  \n</code></pre>\n</li>\n</ol>\n<h2 id=\"二安装\">二、安装</h2>\n<h3 id=\"1解压\">1、解压</h3>\n<pre><code class=\"language-bash\">tar -zxvf  nginx-1.20.1.tar.gz\n</code></pre>\n<h2 id=\"2切换到解压目录编译并安装\">2、切换到解压目录，编译并安装。</h2>\n<pre><code class=\"language-bash\"># 不需要https模块的， 这里只输入./configure即可\n./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module\n\n# 编译\nmake\n\n# 安装\nmake install\n</code></pre>\n<h2 id=\"3启动\">3、启动</h2>\n<pre><code class=\"language-bash\"># 启动\n./nginx -s start\n\n# 刷新配置\n./nginx -s reload\n\n# 停止nginx\n./nginx -s stop\n\n# 查看nginx是否启动成功\nps -ef | grep nginx\n</code></pre>\n<h2 id=\"三配置开机自启\">三、配置开机自启</h2>\n<blockquote>\n<p>官方：<a href=\"https://www.nginx.com/resources/wiki/start/topics/examples/redhatnginxinit/\">https://www.nginx.com/resources/wiki/start/topics/examples/redhatnginxinit/</a></p>\n</blockquote>\n<h3 id=\"1在-etcinitd-下创建文件-nginx\">1、在 /etc/init.d 下创建文件 nginx</h3>\n<pre><code class=\"language-conf\">#!/bin/sh\n#\n# nginx - this script starts and stops the nginx daemon\n#\n# chkconfig:   - 85 15\n# description:  NGINX is an HTTP(S) server, HTTP(S) reverse \\\n#               proxy and IMAP/POP3 proxy server\n# processname: nginx\n# config:      /etc/nginx/nginx.conf\n# config:      /etc/sysconfig/nginx\n# pidfile:     /var/run/nginx.pid\n\n# Source function library.\n. /etc/rc.d/init.d/functions\n\n# Source networking configuration.\n. /etc/sysconfig/network\n\n# Check that networking is up.\n[ &quot;$NETWORKING&quot; = &quot;no&quot; ] &amp;&amp; exit 0\n\n# 特别注意，这里要调整你存放Nginx的目录\nnginx=&quot;/usr/local/nginx/sbin/nginx&quot;\nprog=$(basename $nginx)\n\n# 特别注意，这里要调整你存放Nginx的目录\nNGINX_CONF_FILE=&quot;/usr/local/nginx/conf/nginx.conf&quot;\n\n[ -f /etc/sysconfig/nginx ] &amp;&amp; . /etc/sysconfig/nginx\n\nlockfile=/var/lock/subsys/nginx\n\nmake_dirs() {\n   # make required directories\n   user=`$nginx -V 2&gt;&amp;1 | grep &quot;configure arguments:.*--user=&quot; | sed \'s/[^*]*--user=\\([^ ]*\\).*/\\1/g\' -`\n   if [ -n &quot;$user&quot; ]; then\n      if [ -z &quot;`grep $user /etc/passwd`&quot; ]; then\n         useradd -M -s /bin/nologin $user\n      fi\n      options=`$nginx -V 2&gt;&amp;1 | grep \'configure arguments:\'`\n      for opt in $options; do\n          if [ `echo $opt | grep \'.*-temp-path\'` ]; then\n              value=`echo $opt | cut -d &quot;=&quot; -f 2`\n              if [ ! -d &quot;$value&quot; ]; then\n                  # echo &quot;creating&quot; $value\n                  mkdir -p $value &amp;&amp; chown -R $user $value\n              fi\n          fi\n       done\n    fi\n}\n\nstart() {\n    [ -x $nginx ] || exit 5\n    [ -f $NGINX_CONF_FILE ] || exit 6\n    make_dirs\n    echo -n $&quot;Starting $prog: &quot;\n    daemon $nginx -c $NGINX_CONF_FILE\n    retval=$?\n    echo\n    [ $retval -eq 0 ] &amp;&amp; touch $lockfile\n    return $retval\n}\n\nstop() {\n    echo -n $&quot;Stopping $prog: &quot;\n    killproc $prog -QUIT\n    retval=$?\n    echo\n    [ $retval -eq 0 ] &amp;&amp; rm -f $lockfile\n    return $retval\n}\n\nrestart() {\n    configtest || return $?\n    stop\n    sleep 1\n    start\n}\n\nreload() {\n    configtest || return $?\n    echo -n $&quot;Reloading $prog: &quot;\n    killproc $prog -HUP\n    retval=$?\n    echo\n}\n\nforce_reload() {\n    restart\n}\n\nconfigtest() {\n  $nginx -t -c $NGINX_CONF_FILE\n}\n\nrh_status() {\n    status $prog\n}\n\nrh_status_q() {\n    rh_status &gt;/dev/null 2&gt;&amp;1\n}\n\ncase &quot;$1&quot; in\n    start)\n        rh_status_q &amp;&amp; exit 0\n        $1\n        ;;\n    stop)\n        rh_status_q || exit 0\n        $1\n        ;;\n    restart|configtest)\n        $1\n        ;;\n    reload)\n        rh_status_q || exit 7\n        $1\n        ;;\n    force-reload)\n        force_reload\n        ;;\n    status)\n        rh_status\n        ;;\n    condrestart|try-restart)\n        rh_status_q || exit 0\n            ;;\n    *)\n        echo $&quot;Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest}&quot;\n        exit 2\nesac\n</code></pre>\n<h3 id=\"2赋值文件执行权限\">2、赋值文件执行权限</h3>\n<pre><code class=\"language-bash\">chmod a+x /etc/init.d/nginx\n</code></pre>\n<h3 id=\"3将nginx服务加入chkconfig管理列表\">3、将nginx服务加入chkconfig管理列表</h3>\n<pre><code class=\"language-bash\">chkconfig --add /etc/init.d/nginx\n</code></pre>\n<h3 id=\"4设置开机自启\">4、设置开机自启</h3>\n<pre><code class=\"language-bash\">chkconfig nginx on\n</code></pre>\n<h3 id=\"5其他操作命令\">5、其他操作命令</h3>\n<pre><code class=\"language-bash\"># 启动nginx\nservice nginx start\n\n# 停止nginx\nservice nginx stop\n\n# 重启nginx\nservice nginx restart\n</code></pre>\n', 0, NULL, NULL, '# CentOS 7 安装 Nginx\n\n## 一、准备\n\n##  1、gcc\n\n>gcc 是 Linux 的编译器，可以编译 C、C++、Ada、Object C 和 Java 等语言。\n\n查看gcc版本\n\n```bash\ngcc -v\n```\n\ngcc 安装命令\n\n```bash\nyum -y install gcc\n```\n\n## 2、pcre 和 pcre-devel\n\n> nginx 的 http 模块使用 pcre 来解析正则表达式。\n\n```bash\nyum install -y pcre pcre-devel\n```\n\n## 3、zlib\n\n>nginx使用zlib对http包的内容进行gzip。\n\n```bash\nyum install -y zlib zlib-devel\n```\n\n## 4、openssl\n\n> openssl用于数据链路通信安全加密。\n\n```bash\nyum install -y openssl openssl-devel\n```\n\n## 5、nginx 压缩包\n\n1. 获取稳定版本下载链接。官网地址：http://nginx.org/en/download.html\n\n2. 下载 nginx\n\n   ```bash\n   wget http://nginx.org/download/nginx-1.20.1.tar.gz  \n   ```\n   \n\n## 二、安装\n\n### 1、解压\n\n```bash\ntar -zxvf  nginx-1.20.1.tar.gz\n```\n\n## 2、切换到解压目录，编译并安装。\n\n```bash\n# 不需要https模块的， 这里只输入./configure即可\n./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module\n\n# 编译\nmake\n\n# 安装\nmake install\n```\n\n## 3、启动\n\n```bash\n# 启动\n./nginx -s start\n\n# 刷新配置\n./nginx -s reload\n\n# 停止nginx\n./nginx -s stop\n\n# 查看nginx是否启动成功\nps -ef | grep nginx\n```\n\n## 三、配置开机自启\n\n>官方：https://www.nginx.com/resources/wiki/start/topics/examples/redhatnginxinit/\n\n### 1、在 /etc/init.d 下创建文件 nginx\n\n```conf\n#!/bin/sh\n#\n# nginx - this script starts and stops the nginx daemon\n#\n# chkconfig:   - 85 15\n# description:  NGINX is an HTTP(S) server, HTTP(S) reverse \\\n#               proxy and IMAP/POP3 proxy server\n# processname: nginx\n# config:      /etc/nginx/nginx.conf\n# config:      /etc/sysconfig/nginx\n# pidfile:     /var/run/nginx.pid\n\n# Source function library.\n. /etc/rc.d/init.d/functions\n\n# Source networking configuration.\n. /etc/sysconfig/network\n\n# Check that networking is up.\n[ \"$NETWORKING\" = \"no\" ] && exit 0\n\n# 特别注意，这里要调整你存放Nginx的目录\nnginx=\"/usr/local/nginx/sbin/nginx\"\nprog=$(basename $nginx)\n\n# 特别注意，这里要调整你存放Nginx的目录\nNGINX_CONF_FILE=\"/usr/local/nginx/conf/nginx.conf\"\n\n[ -f /etc/sysconfig/nginx ] && . /etc/sysconfig/nginx\n\nlockfile=/var/lock/subsys/nginx\n\nmake_dirs() {\n   # make required directories\n   user=`$nginx -V 2>&1 | grep \"configure arguments:.*--user=\" | sed \'s/[^*]*--user=\\([^ ]*\\).*/\\1/g\' -`\n   if [ -n \"$user\" ]; then\n      if [ -z \"`grep $user /etc/passwd`\" ]; then\n         useradd -M -s /bin/nologin $user\n      fi\n      options=`$nginx -V 2>&1 | grep \'configure arguments:\'`\n      for opt in $options; do\n          if [ `echo $opt | grep \'.*-temp-path\'` ]; then\n              value=`echo $opt | cut -d \"=\" -f 2`\n              if [ ! -d \"$value\" ]; then\n                  # echo \"creating\" $value\n                  mkdir -p $value && chown -R $user $value\n              fi\n          fi\n       done\n    fi\n}\n\nstart() {\n    [ -x $nginx ] || exit 5\n    [ -f $NGINX_CONF_FILE ] || exit 6\n    make_dirs\n    echo -n $\"Starting $prog: \"\n    daemon $nginx -c $NGINX_CONF_FILE\n    retval=$?\n    echo\n    [ $retval -eq 0 ] && touch $lockfile\n    return $retval\n}\n\nstop() {\n    echo -n $\"Stopping $prog: \"\n    killproc $prog -QUIT\n    retval=$?\n    echo\n    [ $retval -eq 0 ] && rm -f $lockfile\n    return $retval\n}\n\nrestart() {\n    configtest || return $?\n    stop\n    sleep 1\n    start\n}\n\nreload() {\n    configtest || return $?\n    echo -n $\"Reloading $prog: \"\n    killproc $prog -HUP\n    retval=$?\n    echo\n}\n\nforce_reload() {\n    restart\n}\n\nconfigtest() {\n  $nginx -t -c $NGINX_CONF_FILE\n}\n\nrh_status() {\n    status $prog\n}\n\nrh_status_q() {\n    rh_status >/dev/null 2>&1\n}\n\ncase \"$1\" in\n    start)\n        rh_status_q && exit 0\n        $1\n        ;;\n    stop)\n        rh_status_q || exit 0\n        $1\n        ;;\n    restart|configtest)\n        $1\n        ;;\n    reload)\n        rh_status_q || exit 7\n        $1\n        ;;\n    force-reload)\n        force_reload\n        ;;\n    status)\n        rh_status\n        ;;\n    condrestart|try-restart)\n        rh_status_q || exit 0\n            ;;\n    *)\n        echo $\"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest}\"\n        exit 2\nesac\n```\n\n### 2、赋值文件执行权限\n\n```bash\nchmod a+x /etc/init.d/nginx\n```\n\n### 3、将nginx服务加入chkconfig管理列表\n\n```bash\nchkconfig --add /etc/init.d/nginx\n```\n\n### 4、设置开机自启\n```bash\nchkconfig nginx on\n```\n\n### 5、其他操作命令 \n\n```bash\n# 启动nginx\nservice nginx start\n\n# 停止nginx\nservice nginx stop\n\n# 重启nginx\nservice nginx restart\n```\n\n\n', '', 'centos7an-zhuang-nginx', 0, 'CentOS 7 安装 Nginx一、准备1、gccgcc 是 Linux 的编译器，可以编译 C、C++、Ada、Object C 和 Java 等语言。查看gcc版本gcc -vgcc 安装命令yum -y install gcc2、pcre 和 pcre-develnginx 的 http 模', '', '', 'CentOS 7 安装 Nginx', 0, NULL, 129, 3127);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 59, '2021-11-15 15:47:15.929000', '2022-03-06 21:20:57.533000', b'0', '2022-03-06 21:20:57.522000', 0, '<h1 id=\"spring-security-配置\">Spring Security 配置</h1>\n<h2 id=\"一流程\">一、流程</h2>\n<ul>\n<li>\n<p>客户端发起一个请求，进入 Security 过滤器链。</p>\n</li>\n<li>\n<p>当到 LogoutFilter 的时候判断是否是登出路径，如果是登出路径则到 logoutHandler ，如果登出成功则到 logoutSuccessHandler 登出成功处理，如果登出失败则由 ExceptionTranslationFilter ；如果不是登出路径则直接进入下一个过滤器。</p>\n</li>\n<li>\n<p>当到 UsernamePasswordAuthenticationFilter 的时候判断是否为登录路径，如果是，则进入该过滤器进行登录操作，如果登录失败则到 AuthenticationFailureHandler 登录失败处理器处理，如果登录成功则到 AuthenticationSuccessHandler 登录成功处理器处理，如果不是登录请求则不进入该过滤器。</p>\n</li>\n<li>\n<p>当到 FilterSecurityInterceptor 的时候会拿到 uri ，根据 uri 去找对应的鉴权管理器，鉴权管理器做鉴权工作，鉴权成功则到 Controller 层否则到 AccessDeniedHandler 鉴权失败处理器处理。</p>\n</li>\n</ul>\n<h2 id=\"二配置类代码\">二、配置类代码</h2>\n<pre><code class=\"language-java\">/**\n * @author qinweizhao\n * @since 2021/11/10\n */\n@Configuration\n@EnableGlobalMethodSecurity(prePostEnabled = true)\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n\n    /**\n     * 放行的资源\n     */\n    private static final String[] URL_WHITELIST = {\n            &quot;/css/**&quot;,\n            &quot;/js/**&quot;,\n            &quot;/favicon.ico&quot;\n    };\n\n\n    @Autowired\n    private UserDetailsService userDetailsService;\n\n    @Autowired\n    private MyAccessDeniedHandler myAccessDeniedHandler;\n\n    @Autowired\n    private MyAuthenticationEntryPoint myAuthenticationEntryPoint;\n\n    @Autowired\n    private MyLogoutSuccessHandler myLogoutSuccessHandler;\n\n    /**\n     * 密码编码器\n     *\n     * @return BCryptPasswordEncoder\n     */\n    @Bean\n    BCryptPasswordEncoder bCryptPasswordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n\n    /**\n     * 认证管理器\n     *\n     * @return AuthenticationManager\n     */\n    @Override\n    public AuthenticationManager authenticationManagerBean() {\n        return new ProviderManager(Arrays.asList(daoAuthenticationProvider()\n                , myAuthenticationProvider()\n        ));\n    }\n\n    /**\n     * 认证提供者\n     *\n     * @return AuthenticationProvider\n     */\n    private AuthenticationProvider daoAuthenticationProvider() {\n        return new DaoAuthenticationProvider();\n    }\n\n    /**\n     * 自定义认证提供者\n     *\n     * @return AuthenticationProvider\n     */\n    private AuthenticationProvider myAuthenticationProvider() {\n        return new MyAuthenticationProvider();\n    }\n\n    /**\n     * (授权)\n     *\n     * @return 投票管理器\n     */\n    private AccessDecisionManager accessDecisionManager() {\n        List&lt;AccessDecisionVoter&lt;?&gt;&gt; decisionVoters\n                = Arrays.asList(\n                new MyExpressionVoter(),\n                new WebExpressionVoter(),\n                new RoleVoter(),\n                new AuthenticatedVoter());\n        return new UnanimousBased(decisionVoters);\n    }\n\n    /**\n     * 配置 AuthenticationManagerBuilder 会让 Security 自动构建一个 AuthenticationManager；\n     * 如果想要使用该功能你需要配置一个 UserDetailService 和 PasswordEncoder。UserDetailsService 用于在认证器中根据用户传过来的用户名查找一个用户\n     * PasswordEncoder 用于密码的加密与比对，我们存储用户密码的时候用PasswordEncoder.encode() 加密存储，在认证器里会调用 PasswordEncoder.matches() 方法进行密码比对。\n     * 如果重写了该方法，Security 会启用 DaoAuthenticationProvider 这个认证器，该认证就是先调用 UserDetailsService.loadUserByUsername\n     * 然后使用 PasswordEncoder.matches() 进行密码比对，如果认证成功成功则返回一个 Authentication 对象\n     *\n     * @param auth auth\n     * @throws Exception exception\n     */\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n        auth.userDetailsService(userDetailsService).passwordEncoder(bCryptPasswordEncoder());\n    }\n\n    /**\n     * 配置静态资源的处理方式，可使用 Ant 匹配规则\n     *\n     * @param web web\n     */\n    @Override\n    public void configure(WebSecurity web) throws Exception {\n        web.ignoring().antMatchers(URL_WHITELIST);\n    }\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http\n\n                .csrf().disable()\n\n\n                // 登录\n                .formLogin()\n                .loginPage(&quot;/login&quot;)\n                .loginProcessingUrl(&quot;/login&quot;)\n                .usernameParameter(&quot;username&quot;)\n                .passwordParameter(&quot;password&quot;)\n                // 如果不放行则会出现无限重定向\n                .permitAll()\n\n\n                // 注销\n                .and()\n                .logout()\n                .logoutSuccessUrl(&quot;/&quot;)\n                .logoutSuccessHandler(myLogoutSuccessHandler)\n\n\n                // 记住我\n                .and()\n                .rememberMe()\n                .rememberMeParameter(&quot;remember&quot;)\n\n\n                .and()\n                .authorizeRequests()\n                .antMatchers(&quot;/&quot;)\n                .permitAll()\n                .anyRequest()\n                .authenticated()\n                // 指定投票器\n                .accessDecisionManager(accessDecisionManager())\n\n\n                .and()\n                .exceptionHandling()\n                .authenticationEntryPoint(myAuthenticationEntryPoint)\n                .accessDeniedHandler(myAccessDeniedHandler)\n\n                .and()\n                .addFilterAfter(new MyFilter(), LogoutFilter.class);\n    }\n}\n</code></pre>\n<h2 id=\"三配置简介\">三、配置简介</h2>\n<h3 id=\"1configureauthenticationmanagerbuilder-auth\">1、configure(AuthenticationManagerBuilder auth)</h3>\n<p>AuthenticationManager 的建造器，配置 AuthenticationManagerBuilder 会让Security 自动构建一个 AuthenticationManager（该类的功能参考流程图）；如果想要使用该功能你需要配置一个 UserDetailService 和 PasswordEncoder。UserDetailsService 用于在认证器中根据用户传过来的用户名查找一个用户， PasswordEncoder 用于密码的加密与比对，我们存储用户密码的时候用PasswordEncoder.encode() 加密存储，在认证器里会调用 PasswordEncoder.matches() 方法进行密码比对。如果重写了该方法，Security 会启用 DaoAuthenticationProvider 这个认证器，该认证就是先调用 UserDetailsService.loadUserByUsername 然后使用 PasswordEncoder.matches() 进行密码比对，如果认证成功成功则返回一个 Authentication 对象。</p>\n<h3 id=\"2configurewebsecurity-web\">2、configure(WebSecurity web)</h3>\n<p>这个配置方法用于配置静态资源的处理方式，可使用 Ant 匹配规则。</p>\n<h3 id=\"3configurehttpsecurity-http\">3、configure(HttpSecurity http)</h3>\n<p>关键的方法</p>\n<ol>\n<li>\n<p>登录</p>\n<pre><code class=\"language-java\">                .formLogin()\n                .loginPage(&quot;/login&quot;)\n                .loginProcessingUrl(&quot;/login&quot;)\n                .usernameParameter(&quot;username&quot;)\n                .passwordParameter(&quot;password&quot;)\n                // 如果不放行则会出现无限重定向\n                .permitAll()\n</code></pre>\n<p>这是配置登录相关的操作从方法名可知，配置了登录页请求路径，密码属性名，用户名属性名，和登录请求路径，permitAll()代表任意用户可访问。</p>\n</li>\n<li>\n<p>权限</p>\n<pre><code class=\"language-java\">				.and()\n                .authorizeRequests()\n                .antMatchers(&quot;/&quot;)\n                .permitAll()\n                .anyRequest()\n                .authenticated()\n                // 指定投票器\n                .accessDecisionManager(accessDecisionManager())\n</code></pre>\n<p>以上配置是权限相关的配置，配置了一个 <code>/</code> url 放行， anyRequest() 表示所有请求，authenticated() 表示已登录用户才能访问， accessDecisionManager() 表示绑定在 url 上的鉴权管理器。</p>\n</li>\n<li>\n<p>注销</p>\n<pre><code class=\"language-java\">				.and()\n                .logout()\n                .logoutSuccessUrl(&quot;/&quot;)\n                .logoutSuccessHandler(myLogoutSuccessHandler)\n</code></pre>\n<p>登出相关配置，这里配置了登出 url 和登出成功处理器:</p>\n</li>\n<li>\n<p>记住我</p>\n<pre><code class=\"language-java\">                .and()\n                .rememberMe()\n                .rememberMeParameter(&quot;remember&quot;)\n</code></pre>\n<p>配置记住我功能，并指定参数名。</p>\n</li>\n<li>\n<p>异常</p>\n<pre><code class=\"language-java\">				.and()\n                .exceptionHandling()\n                .authenticationEntryPoint(myAuthenticationEntryPoint)\n                .accessDeniedHandler(myAccessDeniedHandler)\n</code></pre>\n<p>配置认证失败和鉴权失败的处理器</p>\n</li>\n<li>\n<p>配置自定义过滤器</p>\n<pre><code class=\"language-java\">                .and()\n                .addFilterAfter(new MyFilter(), LogoutFilter.class);\n</code></pre>\n<p>在过滤器链中插入自己的过滤器，addFilterBefore 加在对应的过滤器之前，addFilterAfter 加在对应的过滤器之后，addFilterAt 加在过滤器同一位置，事实上框架原有的 Filter 在启动 HttpSecurity 配置的过程中，都由框架完成了其一定程度上固定的配置，是不允许更改替换的。根据测试结果来看，调用 addFilterAt 方法插入的 Filter ，会在这个位置上的原有 Filter 之前执行。</p>\n</li>\n</ol>\n<h2 id=\"四拓展\">四、拓展</h2>\n<p>Security 可扩展的有</p>\n<ol>\n<li>鉴权失败处理器</li>\n<li>验证器</li>\n<li>登录成功处理器</li>\n<li>投票器</li>\n<li>自定义token处理过滤器</li>\n<li>登出成功处理器</li>\n<li>登录失败处理器</li>\n<li>自定义 UsernamePasswordAuthenticationFilter</li>\n</ol>\n<ul>\n<li>\n<p>鉴权失败处理器</p>\n<p>Security 鉴权失败默认跳转登录页面，我们可以实现 AccessDeniedHandler 接口，重写 handle() 方法来自定义处理逻辑；然后参考配置类说明将处理器加入到配置当中。</p>\n</li>\n<li>\n<p>验证器</p>\n<p>实现 AuthenticationProvider 接口来实现自己验证逻辑。需要注意的是在这个类里面就算你抛出异常，也不会中断验证流程，而是算你验证失败，我们由流程图知道，只要有一个验证器验证成功，就算验证成功，所以你需要留意这一点。</p>\n</li>\n<li>\n<p>登录成功处理器</p>\n<p>在 Security 中验证成功默认跳转到上一次请求页面或者路径为 &quot;/&quot; 的页面，我们同样可以自定义：继承 SimpleUrlAuthenticationSuccessHandler 这个类或者实现 AuthenticationSuccessHandler 接口。我这里建议采用继承的方式,SimpleUrlAuthenticationSuccessHandler 是默认的处理器，采用继承可以契合里氏替换原则，提高代码的复用性和避免不必要的错误。</p>\n</li>\n<li>\n<p>投票器</p>\n<p>投票器可继承 WebExpressionVoter 或者实现 AccessDecisionVoter接口；WebExpressionVoter 是 Security 默认的投票器；我这里同样建议采用继承的方式；添加到配置的方式参考 上文；</p>\n<p><strong>注意：投票器 vote 方法返回一个int值；-1代表反对，0代表弃权，1代表赞成；投票管理器收集投票结果，如果最终结果大于等于0则放行该请求。</strong></p>\n</li>\n<li>\n<p>自定义token处理过滤器</p>\n<p>自定义 token 处理器继承自 OncePerRequestFilter 或者 GenericFilterBean 或者 Filter 都可以，在这个处理器里面需要完成的逻辑是：获取请求里的 token，验证 token 是否合法然后填充 SecurityContextHolder ，虽然说过滤器只要添加在投票器之前就可以，但我这里还是建议添加在 http.addFilterAfter(new MyFittler(), LogoutFilter.class);</p>\n</li>\n<li>\n<p>登出成功处理器</p>\n<p>实现LogoutSuccessHandler接口，添加到配置的方式参考上文。</p>\n</li>\n<li>\n<p>登录失败处理器</p>\n<p>登录失败默认跳转到登录页，我们同样可以自定义。继承 SimpleUrlAuthenticationFailureHandler 或者实现 AuthenticationFailureHandler，建议采用继承。</p>\n</li>\n<li>\n<p>自定义UsernamePasswordAuthenticationFilter</p>\n<p>继承 UsernamePasswordAuthenticationFilter ，然后在配置类中初始化这个过滤器，给这个过滤器添加登录失败处理器，登录成功处理器，登录管理器，登录请求 url 。</p>\n</li>\n</ul>\n<h2 id=\"五补充\">五、补充</h2>\n<p><strong>SecurityContextHolder</strong></p>\n<blockquote>\n<p>用户在完成登录后 Security 会将用户信息存储到这个类中，之后其他流程需要得到用户信息时都是从这个类中获得，用户信息被封装成 SecurityContext ，而实际存储的类是 SecurityContextHolderStrategy ，默认的SecurityContextHolderStrategy 实现类是 ThreadLocalSecurityContextHolderStrategy 它使用了ThreadLocal来存储了用户信息。</p>\n</blockquote>\n<p>手动填充 SecurityContextHolder 示例：</p>\n<pre><code class=\"language-java\">UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(&quot;test&quot;,&quot;test&quot;,list);	\nSecurityContextHolder.getContext().setAuthentication(token);\n</code></pre>\n<p>对于使用 token 鉴权的系统，我们就可以验证token后手动填充SecurityContextHolder，填充时机只要在执行投票器之前即可，或者干脆可以在投票器中填充，然后在登出操作中清空SecurityContextHolder。</p>\n', 0, NULL, NULL, '# Spring Security 配置\n\n## 一、流程\n\n- 客户端发起一个请求，进入 Security 过滤器链。\n\n- 当到 LogoutFilter 的时候判断是否是登出路径，如果是登出路径则到 logoutHandler ，如果登出成功则到 logoutSuccessHandler 登出成功处理，如果登出失败则由 ExceptionTranslationFilter ；如果不是登出路径则直接进入下一个过滤器。\n\n- 当到 UsernamePasswordAuthenticationFilter 的时候判断是否为登录路径，如果是，则进入该过滤器进行登录操作，如果登录失败则到 AuthenticationFailureHandler 登录失败处理器处理，如果登录成功则到 AuthenticationSuccessHandler 登录成功处理器处理，如果不是登录请求则不进入该过滤器。\n\n- 当到 FilterSecurityInterceptor 的时候会拿到 uri ，根据 uri 去找对应的鉴权管理器，鉴权管理器做鉴权工作，鉴权成功则到 Controller 层否则到 AccessDeniedHandler 鉴权失败处理器处理。\n\n## 二、配置类代码\n\n```java\n/**\n * @author qinweizhao\n * @since 2021/11/10\n */\n@Configuration\n@EnableGlobalMethodSecurity(prePostEnabled = true)\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n\n    /**\n     * 放行的资源\n     */\n    private static final String[] URL_WHITELIST = {\n            \"/css/**\",\n            \"/js/**\",\n            \"/favicon.ico\"\n    };\n\n\n    @Autowired\n    private UserDetailsService userDetailsService;\n\n    @Autowired\n    private MyAccessDeniedHandler myAccessDeniedHandler;\n\n    @Autowired\n    private MyAuthenticationEntryPoint myAuthenticationEntryPoint;\n\n    @Autowired\n    private MyLogoutSuccessHandler myLogoutSuccessHandler;\n\n    /**\n     * 密码编码器\n     *\n     * @return BCryptPasswordEncoder\n     */\n    @Bean\n    BCryptPasswordEncoder bCryptPasswordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n\n    /**\n     * 认证管理器\n     *\n     * @return AuthenticationManager\n     */\n    @Override\n    public AuthenticationManager authenticationManagerBean() {\n        return new ProviderManager(Arrays.asList(daoAuthenticationProvider()\n                , myAuthenticationProvider()\n        ));\n    }\n\n    /**\n     * 认证提供者\n     *\n     * @return AuthenticationProvider\n     */\n    private AuthenticationProvider daoAuthenticationProvider() {\n        return new DaoAuthenticationProvider();\n    }\n\n    /**\n     * 自定义认证提供者\n     *\n     * @return AuthenticationProvider\n     */\n    private AuthenticationProvider myAuthenticationProvider() {\n        return new MyAuthenticationProvider();\n    }\n\n    /**\n     * (授权)\n     *\n     * @return 投票管理器\n     */\n    private AccessDecisionManager accessDecisionManager() {\n        List<AccessDecisionVoter<?>> decisionVoters\n                = Arrays.asList(\n                new MyExpressionVoter(),\n                new WebExpressionVoter(),\n                new RoleVoter(),\n                new AuthenticatedVoter());\n        return new UnanimousBased(decisionVoters);\n    }\n\n    /**\n     * 配置 AuthenticationManagerBuilder 会让 Security 自动构建一个 AuthenticationManager；\n     * 如果想要使用该功能你需要配置一个 UserDetailService 和 PasswordEncoder。UserDetailsService 用于在认证器中根据用户传过来的用户名查找一个用户\n     * PasswordEncoder 用于密码的加密与比对，我们存储用户密码的时候用PasswordEncoder.encode() 加密存储，在认证器里会调用 PasswordEncoder.matches() 方法进行密码比对。\n     * 如果重写了该方法，Security 会启用 DaoAuthenticationProvider 这个认证器，该认证就是先调用 UserDetailsService.loadUserByUsername\n     * 然后使用 PasswordEncoder.matches() 进行密码比对，如果认证成功成功则返回一个 Authentication 对象\n     *\n     * @param auth auth\n     * @throws Exception exception\n     */\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n        auth.userDetailsService(userDetailsService).passwordEncoder(bCryptPasswordEncoder());\n    }\n\n    /**\n     * 配置静态资源的处理方式，可使用 Ant 匹配规则\n     *\n     * @param web web\n     */\n    @Override\n    public void configure(WebSecurity web) throws Exception {\n        web.ignoring().antMatchers(URL_WHITELIST);\n    }\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http\n\n                .csrf().disable()\n\n\n                // 登录\n                .formLogin()\n                .loginPage(\"/login\")\n                .loginProcessingUrl(\"/login\")\n                .usernameParameter(\"username\")\n                .passwordParameter(\"password\")\n                // 如果不放行则会出现无限重定向\n                .permitAll()\n\n\n                // 注销\n                .and()\n                .logout()\n                .logoutSuccessUrl(\"/\")\n                .logoutSuccessHandler(myLogoutSuccessHandler)\n\n\n                // 记住我\n                .and()\n                .rememberMe()\n                .rememberMeParameter(\"remember\")\n\n\n                .and()\n                .authorizeRequests()\n                .antMatchers(\"/\")\n                .permitAll()\n                .anyRequest()\n                .authenticated()\n                // 指定投票器\n                .accessDecisionManager(accessDecisionManager())\n\n\n                .and()\n                .exceptionHandling()\n                .authenticationEntryPoint(myAuthenticationEntryPoint)\n                .accessDeniedHandler(myAccessDeniedHandler)\n\n                .and()\n                .addFilterAfter(new MyFilter(), LogoutFilter.class);\n    }\n}\n```\n\n## 三、配置简介\n\n### 1、configure(AuthenticationManagerBuilder auth)\n\nAuthenticationManager 的建造器，配置 AuthenticationManagerBuilder 会让Security 自动构建一个 AuthenticationManager（该类的功能参考流程图）；如果想要使用该功能你需要配置一个 UserDetailService 和 PasswordEncoder。UserDetailsService 用于在认证器中根据用户传过来的用户名查找一个用户， PasswordEncoder 用于密码的加密与比对，我们存储用户密码的时候用PasswordEncoder.encode() 加密存储，在认证器里会调用 PasswordEncoder.matches() 方法进行密码比对。如果重写了该方法，Security 会启用 DaoAuthenticationProvider 这个认证器，该认证就是先调用 UserDetailsService.loadUserByUsername 然后使用 PasswordEncoder.matches() 进行密码比对，如果认证成功成功则返回一个 Authentication 对象。\n\n### 2、configure(WebSecurity web)\n\n这个配置方法用于配置静态资源的处理方式，可使用 Ant 匹配规则。\n\n### 3、configure(HttpSecurity http)\n\n关键的方法\n\n1. 登录\n\n   ```java\n                   .formLogin()\n                   .loginPage(\"/login\")\n                   .loginProcessingUrl(\"/login\")\n                   .usernameParameter(\"username\")\n                   .passwordParameter(\"password\")\n                   // 如果不放行则会出现无限重定向\n                   .permitAll()\n   ```\n\n   这是配置登录相关的操作从方法名可知，配置了登录页请求路径，密码属性名，用户名属性名，和登录请求路径，permitAll()代表任意用户可访问。\n\n2. 权限\n\n   ```java\n   				.and()\n                   .authorizeRequests()\n                   .antMatchers(\"/\")\n                   .permitAll()\n                   .anyRequest()\n                   .authenticated()\n                   // 指定投票器\n                   .accessDecisionManager(accessDecisionManager())\n   ```\n\n   以上配置是权限相关的配置，配置了一个 `/` url 放行， anyRequest() 表示所有请求，authenticated() 表示已登录用户才能访问， accessDecisionManager() 表示绑定在 url 上的鉴权管理器。\n\n3. 注销\n\n   ```java\n   				.and()\n                   .logout()\n                   .logoutSuccessUrl(\"/\")\n                   .logoutSuccessHandler(myLogoutSuccessHandler)\n   ```\n\n   登出相关配置，这里配置了登出 url 和登出成功处理器:\n\n4. 记住我\n\n   ```java\n                   .and()\n                   .rememberMe()\n                   .rememberMeParameter(\"remember\")\n   ```\n\n   配置记住我功能，并指定参数名。\n\n5. 异常\n\n   ```java\n   				.and()\n                   .exceptionHandling()\n                   .authenticationEntryPoint(myAuthenticationEntryPoint)\n                   .accessDeniedHandler(myAccessDeniedHandler)\n   ```\n\n   配置认证失败和鉴权失败的处理器\n\n6. 配置自定义过滤器\n\n   ```java\n                   .and()\n                   .addFilterAfter(new MyFilter(), LogoutFilter.class);\n   ```\n\n   在过滤器链中插入自己的过滤器，addFilterBefore 加在对应的过滤器之前，addFilterAfter 加在对应的过滤器之后，addFilterAt 加在过滤器同一位置，事实上框架原有的 Filter 在启动 HttpSecurity 配置的过程中，都由框架完成了其一定程度上固定的配置，是不允许更改替换的。根据测试结果来看，调用 addFilterAt 方法插入的 Filter ，会在这个位置上的原有 Filter 之前执行。\n\n## 四、拓展\n\nSecurity 可扩展的有\n\n1. 鉴权失败处理器\n2. 验证器\n3. 登录成功处理器\n4. 投票器\n5. 自定义token处理过滤器\n6. 登出成功处理器\n7. 登录失败处理器\n8. 自定义 UsernamePasswordAuthenticationFilter\n\n- 鉴权失败处理器\n\n  Security 鉴权失败默认跳转登录页面，我们可以实现 AccessDeniedHandler 接口，重写 handle() 方法来自定义处理逻辑；然后参考配置类说明将处理器加入到配置当中。\n\n- 验证器\n\n  实现 AuthenticationProvider 接口来实现自己验证逻辑。需要注意的是在这个类里面就算你抛出异常，也不会中断验证流程，而是算你验证失败，我们由流程图知道，只要有一个验证器验证成功，就算验证成功，所以你需要留意这一点。\n\n- 登录成功处理器\n\n  在 Security 中验证成功默认跳转到上一次请求页面或者路径为 \"/\" 的页面，我们同样可以自定义：继承 SimpleUrlAuthenticationSuccessHandler 这个类或者实现 AuthenticationSuccessHandler 接口。我这里建议采用继承的方式,SimpleUrlAuthenticationSuccessHandler 是默认的处理器，采用继承可以契合里氏替换原则，提高代码的复用性和避免不必要的错误。\n\n- 投票器\n\n  投票器可继承 WebExpressionVoter 或者实现 AccessDecisionVoter接口；WebExpressionVoter 是 Security 默认的投票器；我这里同样建议采用继承的方式；添加到配置的方式参考 上文；\n\n  **注意：投票器 vote 方法返回一个int值；-1代表反对，0代表弃权，1代表赞成；投票管理器收集投票结果，如果最终结果大于等于0则放行该请求。**\n\n- 自定义token处理过滤器\n\n  自定义 token 处理器继承自 OncePerRequestFilter 或者 GenericFilterBean 或者 Filter 都可以，在这个处理器里面需要完成的逻辑是：获取请求里的 token，验证 token 是否合法然后填充 SecurityContextHolder ，虽然说过滤器只要添加在投票器之前就可以，但我这里还是建议添加在 http.addFilterAfter(new MyFittler(), LogoutFilter.class);\n\n- 登出成功处理器\n\n  实现LogoutSuccessHandler接口，添加到配置的方式参考上文。\n\n- 登录失败处理器\n\n  登录失败默认跳转到登录页，我们同样可以自定义。继承 SimpleUrlAuthenticationFailureHandler 或者实现 AuthenticationFailureHandler，建议采用继承。\n\n- 自定义UsernamePasswordAuthenticationFilter\n\n  继承 UsernamePasswordAuthenticationFilter ，然后在配置类中初始化这个过滤器，给这个过滤器添加登录失败处理器，登录成功处理器，登录管理器，登录请求 url 。\n\n## 五、补充\n\n**SecurityContextHolder**\n\n> 用户在完成登录后 Security 会将用户信息存储到这个类中，之后其他流程需要得到用户信息时都是从这个类中获得，用户信息被封装成 SecurityContext ，而实际存储的类是 SecurityContextHolderStrategy ，默认的SecurityContextHolderStrategy 实现类是 ThreadLocalSecurityContextHolderStrategy 它使用了ThreadLocal来存储了用户信息。\n\n手动填充 SecurityContextHolder 示例：\n\n```java\nUsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(\"test\",\"test\",list);	\nSecurityContextHolder.getContext().setAuthentication(token);\n```\n\n对于使用 token 鉴权的系统，我们就可以验证token后手动填充SecurityContextHolder，填充时机只要在执行投票器之前即可，或者干脆可以在投票器中填充，然后在登出操作中清空SecurityContextHolder。\n\n', '', 'springsecuritypei-zhi', 0, 'Spring Security 配置一、流程客户端发起一个请求，进入 Security 过滤器链。当到 LogoutFilter 的时候判断是否是登出路径，如果是登出路径则到 logoutHandler ，如果登出成功则到 logoutSuccessHandler 登出成功处理，如果登出失败则由 E', '', '', 'Spring Security 配置', 0, NULL, 89, 7011);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 60, '2021-11-21 19:34:09.265000', '2021-11-23 18:27:28.980000', b'0', '2021-11-23 18:27:28.943000', 0, '<h1 id=\"list-去除重复数据\">List 去除重复数据</h1>\n<p>去除 Java 中 ArrayList 中的重复数据</p>\n<h3 id=\"一使用-linkedhashset-删除-arraylist-中的重复数据\">一、使用 LinkedHashSet 删除 ArrayList 中的重复数据</h3>\n<p>LinkedHashSet 是在一个 ArrayList 删除重复数据的最佳方法。LinkedHashSet 在内部完成两件事：</p>\n<ul>\n<li>删除重复数据</li>\n<li>保持添加到其中的数据的顺序</li>\n</ul>\n<pre><code class=\"language-java\">    public static void removeDuplicateOne(List&lt;String&gt; list) {\n        LinkedHashSet&lt;String&gt; hashSet = new LinkedHashSet&lt;&gt;(list);\n        ArrayList&lt;String&gt; listWithoutDuplicates = new ArrayList&lt;&gt;(hashSet);\n        System.out.println(listWithoutDuplicates);\n    }\n</code></pre>\n<h3 id=\"二使用-java8-新特性-stream-进行-list-去重\">二、使用 java8 新特性 stream 进行 List 去重</h3>\n<p>要从 arraylist 中删除重复项，我们也可以使用 java 8 stream api。使用 steam 的 distinct() 方法返回一个由不同数据组成的流，通过对象的 equals（）方法进行比较。</p>\n<p>收集所有区域数据 List 使用 Collectors.toList()。</p>\n<p>Java 程序，用于在不使用 Set 的情况下从 java 中的 arraylist 中删除重复项。</p>\n<pre><code class=\"language-java\">    public static void removeDuplicateTwo(List&lt;String&gt; list) {\n        List&lt;String&gt; listWithoutDuplicates = list.stream().distinct().collect(Collectors.toList());\n        System.out.println(listWithoutDuplicates);\n    }\n</code></pre>\n<h3 id=\"三利用-hashset-不能添加重复数据的特性-由于-hashset-不能保证添加顺序所以只能作为判断条件保证顺序\">三、利用 HashSet 不能添加重复数据的特性 由于 HashSet 不能保证添加顺序，所以只能作为判断条件保证顺序：</h3>\n<pre><code class=\"language-java\">    public static void removeDuplicateThree(List&lt;String&gt; list) {\n        HashSet&lt;String&gt; set = new HashSet&lt;&gt;(list.size());\n        List&lt;String&gt; result = new ArrayList&lt;&gt;(list.size());\n        for (String str : list) {\n            if (set.add(str)) {\n                result.add(str);\n            }\n        }\n        list.clear();\n        list.addAll(result);\n    }\n</code></pre>\n<h3 id=\"四利用-list-的-contains-方法循环遍历-重新排序-只添加一次数据-避免重复\">四、利用 List 的 contains 方法循环遍历, 重新排序, 只添加一次数据, 避免重复：</h3>\n<pre><code class=\"language-java\">    public static void removeDuplicateFour(List&lt;String&gt; list) {\n        List&lt;String&gt; result = new ArrayList&lt;&gt;(list.size());\n        for (String str : list) {\n            if (!result.contains(str)) {\n                result.add(str);\n            }\n        }\n        list.clear();\n        list.addAll(result);\n    }\n</code></pre>\n<h3 id=\"五双重-for-循环去重\">五、双重 for 循环去重</h3>\n<pre><code class=\"language-java\">    public static void removeDuplicateFive(List&lt;String&gt; list) {\n        for (int i = 0; i &lt; list.size(); i++) {\n            for (int j = 0; j &lt; list.size(); j++) {\n                if (i != j &amp;&amp; Objects.equals(list.get(i), list.get(j))) {\n                    list.remove(list.get(j));\n                }\n            }\n        }\n    }\n</code></pre>\n', 0, NULL, NULL, '# List 去除重复数据\n\n去除 Java 中 ArrayList 中的重复数据\n\n### 一、使用 LinkedHashSet 删除 ArrayList 中的重复数据\n\nLinkedHashSet 是在一个 ArrayList 删除重复数据的最佳方法。LinkedHashSet 在内部完成两件事：\n\n- 删除重复数据\n- 保持添加到其中的数据的顺序\n\n```java\n    public static void removeDuplicateOne(List<String> list) {\n        LinkedHashSet<String> hashSet = new LinkedHashSet<>(list);\n        ArrayList<String> listWithoutDuplicates = new ArrayList<>(hashSet);\n        System.out.println(listWithoutDuplicates);\n    }\n```\n\n### 二、使用 java8 新特性 stream 进行 List 去重\n\n要从 arraylist 中删除重复项，我们也可以使用 java 8 stream api。使用 steam 的 distinct() 方法返回一个由不同数据组成的流，通过对象的 equals（）方法进行比较。\n\n收集所有区域数据 List 使用 Collectors.toList()。\n\nJava 程序，用于在不使用 Set 的情况下从 java 中的 arraylist 中删除重复项。\n\n```java\n    public static void removeDuplicateTwo(List<String> list) {\n        List<String> listWithoutDuplicates = list.stream().distinct().collect(Collectors.toList());\n        System.out.println(listWithoutDuplicates);\n    }\n```\n\n### 三、利用 HashSet 不能添加重复数据的特性 由于 HashSet 不能保证添加顺序，所以只能作为判断条件保证顺序：\n\n```java\n    public static void removeDuplicateThree(List<String> list) {\n        HashSet<String> set = new HashSet<>(list.size());\n        List<String> result = new ArrayList<>(list.size());\n        for (String str : list) {\n            if (set.add(str)) {\n                result.add(str);\n            }\n        }\n        list.clear();\n        list.addAll(result);\n    }\n```\n\n### 四、利用 List 的 contains 方法循环遍历, 重新排序, 只添加一次数据, 避免重复：\n\n```java\n    public static void removeDuplicateFour(List<String> list) {\n        List<String> result = new ArrayList<>(list.size());\n        for (String str : list) {\n            if (!result.contains(str)) {\n                result.add(str);\n            }\n        }\n        list.clear();\n        list.addAll(result);\n    }\n```\n\n### 五、双重 for 循环去重\n\n```java\n    public static void removeDuplicateFive(List<String> list) {\n        for (int i = 0; i < list.size(); i++) {\n            for (int j = 0; j < list.size(); j++) {\n                if (i != j && Objects.equals(list.get(i), list.get(j))) {\n                    list.remove(list.get(j));\n                }\n            }\n        }\n    }\n```\n\n', '', 'listqu-chu-zhong-fu-shu-ju', 0, 'List 去除重复数据去除 Java 中 ArrayList 中的重复数据一、使用 LinkedHashSet 删除 ArrayList 中的重复数据LinkedHashSet 是在一个 ArrayList 删除重复数据的最佳方法。LinkedHashSet 在内部完成两件事：删除重复数据保持添加到', '', '', ' List 去除重复数据', 0, NULL, 70, 1585);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 61, '2021-11-23 18:26:46.221000', '2021-11-23 18:26:46.221000', b'0', '2021-11-23 18:26:46.221000', 0, '<h1 id=\"docker-安装-jenkins\">Docker 安装 Jenkins</h1>\n<blockquote>\n<p>Jenkins 是一个是基于 Java 开发的一种持续集成工具。</p>\n</blockquote>\n<h2 id=\"一拉取镜像\">一、拉取镜像</h2>\n<pre><code class=\"language-bash\">docker pull jenkins/jenkins\n</code></pre>\n<h2 id=\"二创建挂载目录\">二、创建挂载目录</h2>\n<pre><code class=\"language-bash\"># 当前位置应该为 /usr/local\nmkdir -p mount/jenkins/jenkins_home\n# 授权\nchmod 777 mount/jenkins/jenkins_home\n</code></pre>\n<h2 id=\"三创建并启动容器\">三、创建并启动容器</h2>\n<pre><code class=\"language-bash\">docker run -d -p 8080:8080 -v /usr/local/mount/jenkins/jenkins_home:/var/jenkins_home -v /etc/localtime:/etc/localtime --name jenkins jenkins/jenkins\n</code></pre>\n<p>命令解释</p>\n<blockquote>\n<p><strong>-d</strong> 后台运行镜像</p>\n<p><strong>-p 8080:8080</strong> 将镜像的8080端口映射到服务器的10240端口。</p>\n<p><strong>/usr/local/mount/jenkins/jenkins_home:/var/jenkins_mount /var/jenkins_home</strong> 目录为容器jenkins工作目录，我们将硬盘上的一个目录挂载到这个位置，方便后续更新镜像后继续使用原来的工作目录。这里我们设置的就是上面我们创建的 /var/jenkins_mount目录。</p>\n<p><strong>-v /etc/localtime:/etc/localtime</strong> 让容器使用和服务器同样的时间设置。</p>\n<p><strong>--name jenkins</strong> 给容器起一个别名</p>\n</blockquote>\n<h2 id=\"四查看是否成功\">四、查看是否成功</h2>\n<pre><code class=\"language-bash\"># 查看运行中的容器\ndocker ps\n\n# 或\n\n# 查看日志\ndocker logs jenkins\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2021/11/2021-11-23_163858.png\" alt=\"2021-11-23_163858\" /></p>\n<h2 id=\"五配置镜像加速\">五、配置镜像加速</h2>\n<p>当前位置 /usr/local/mount/jenkins/jenkins_home，修改 hudson.model.UpdateCenter.xml 文件。</p>\n<p><img src=\"https://img.qinweizhao.com/2021/11/2021-11-23_164513.png\" alt=\"2021-11-23_164513\" /></p>\n<p>更换 url 为 清华大学官方镜像</p>\n<blockquote>\n<p><a href=\"https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json\">https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</a></p>\n</blockquote>\n<h2 id=\"六解锁-jenkins\">六、解锁 Jenkins</h2>\n<p><strong>访问 http:ip:8080</strong> ，出现如下界面。</p>\n<p><img src=\"https://img.qinweizhao.com/2021/11/2021-11-23_165124.png\" alt=\"2021-11-23_165124\" /></p>\n<p>因为容器的 <strong>/var/jenkins_home</strong> 挂载在本地的 <strong>/usr/local/mount/jenkins/jenkins_home</strong> ，所以直接去查看 <strong>/usr/local/mount/jenkins/jenkins_home/secrets/initialAdminPassword</strong> 文件获取密码。</p>\n<p><img src=\"https://img.qinweizhao.com/2021/11/2021-11-23_165555.png\" alt=\"2021-11-23_165555\" /></p>\n<h2 id=\"七安装插件\">七、安装插件</h2>\n<p>选择安装推荐的插件即可</p>\n<p><img src=\"https://img.qinweizhao.com/2021/11/2021-11-23_171023.png\" alt=\"2021-11-23_171023\" /></p>\n', 0, NULL, NULL, '# Docker 安装 Jenkins\n\n>Jenkins 是一个是基于 Java 开发的一种持续集成工具。\n\n## 一、拉取镜像\n\n```bash\ndocker pull jenkins/jenkins\n```\n\n## 二、创建挂载目录\n\n```bash\n# 当前位置应该为 /usr/local\nmkdir -p mount/jenkins/jenkins_home\n# 授权\nchmod 777 mount/jenkins/jenkins_home\n```\n\n## 三、创建并启动容器\n\n```bash\ndocker run -d -p 8080:8080 -v /usr/local/mount/jenkins/jenkins_home:/var/jenkins_home -v /etc/localtime:/etc/localtime --name jenkins jenkins/jenkins\n```\n\n命令解释\n\n>**-d** 后台运行镜像\n>\n>**-p 8080:8080** 将镜像的8080端口映射到服务器的10240端口。\n>\n>**/usr/local/mount/jenkins/jenkins_home:/var/jenkins_mount /var/jenkins_home** 目录为容器jenkins工作目录，我们将硬盘上的一个目录挂载到这个位置，方便后续更新镜像后继续使用原来的工作目录。这里我们设置的就是上面我们创建的 /var/jenkins_mount目录。\n>\n>**-v /etc/localtime:/etc/localtime** 让容器使用和服务器同样的时间设置。\n>\n>**--name jenkins** 给容器起一个别名\n\n## 四、查看是否成功\n\n```bash\n# 查看运行中的容器\ndocker ps\n\n# 或\n\n# 查看日志\ndocker logs jenkins\n```\n\n![2021-11-23_163858](https://img.qinweizhao.com/2021/11/2021-11-23_163858.png)\n\n## 五、配置镜像加速\n\n 当前位置 /usr/local/mount/jenkins/jenkins_home，修改 hudson.model.UpdateCenter.xml 文件。\n\n![2021-11-23_164513](https://img.qinweizhao.com/2021/11/2021-11-23_164513.png)\n\n更换 url 为 清华大学官方镜像\n\n> https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json\n\n## 六、解锁 Jenkins\n\n**访问 http:ip:8080** ，出现如下界面。\n\n![2021-11-23_165124](https://img.qinweizhao.com/2021/11/2021-11-23_165124.png)\n\n因为容器的 **/var/jenkins_home** 挂载在本地的 **/usr/local/mount/jenkins/jenkins_home** ，所以直接去查看 **/usr/local/mount/jenkins/jenkins_home/secrets/initialAdminPassword** 文件获取密码。\n\n![2021-11-23_165555](https://img.qinweizhao.com/2021/11/2021-11-23_165555.png)\n\n## 七、安装插件\n\n选择安装推荐的插件即可\n\n![2021-11-23_171023](https://img.qinweizhao.com/2021/11/2021-11-23_171023.png)\n\n', '', 'dockeran-zhuang-jenkins', 0, '', '', '', 'Docker 安装 Jenkins', 0, NULL, 62, 1016);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 63, '2021-12-29 14:53:21.422000', '2021-12-29 14:56:02.552000', b'0', '2021-12-29 14:56:02.528000', 0, '<h1 id=\"maven-自定义-archetype\">Maven 自定义 Archetype</h1>\n<h2 id=\"一目标项目结构用来做模板的项目\">一、目标项目结构（用来做模板的项目）</h2>\n<p><img src=\"https://img.qinweizhao.com/2021/12/2021-12-29_134513.png\" alt=\"2021-12-29_134513\" /></p>\n<h2 id=\"二创建-archetype\">二、创建 archetype</h2>\n<h3 id=\"1进入到项目根目录下执行-pomxml-同级目录\">1、进入到项目根目录下执行（ pom.xml 同级目录）</h3>\n<pre><code class=\"language-bash\">mvn archetype:create-from-project\n</code></pre>\n<p>ERROR:</p>\n<pre><code class=\"language-txt\">[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  2.431 s\n[INFO] Finished at: 2021-12-29T14:26:01+08:00\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-archetype-plugin:3.2.0:create-from-project (default-cli) on project qwz-mall: Invoker process ended with result different t\nhan 0! -&gt; [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException\n</code></pre>\n<p>SOLVE:将 Maven 安装目录的 conf 文件夹中的 setting.xml 复制一份到 用户目录的 .m2 文件夹中</p>\n<p><img src=\"https://img.qinweizhao.com/2021/12/2021-12-29_142657.png\" alt=\"2021-12-29_142657\" /></p>\n<p>此时会在项目 target 下生成文件：</p>\n<p><img src=\"https://img.qinweizhao.com/2021/12/2021-12-29_135650.png\" alt=\"2021-12-29_135650\" /></p>\n<h3 id=\"2如果是多模块需要进行修改\">2、如果是多模块需要进行修改</h3>\n<p><img src=\"https://img.qinweizhao.com/2021/12/2021-12-29_143101.png\" alt=\"2021-12-29_143101\" /></p>\n<p>如图所示，需要更改的地方有两处：</p>\n<ol>\n<li>将 mall 替换为 <code>__rootArtifactId__</code></li>\n<li>打开 archetype-metadata.xml 文件将 除了 dir 处的 mall 替换为 <code>${rootArtifactId}</code>，dir 除的 mall 替换为 <code>__rootArtifactId__</code></li>\n</ol>\n<p><img src=\"https://img.qinweizhao.com/2021/12/2021-12-29_143725.png\" alt=\"2021-12-29_143725\" /></p>\n<h3 id=\"3将-target-目录下的-archetype-安装到本地仓库\">3、将 target 目录下的 archetype 安装到本地仓库</h3>\n<pre><code class=\"language-bash\"> mvn install\n</code></pre>\n<h3 id=\"4生成骨架配置文件\">4、生成骨架配置文件</h3>\n<pre><code class=\"language-bash\">mvn archetype:crawl\n</code></pre>\n<p>执行成功后，在本地仓库的根目录生成<code>archetype-catalog.xml</code>骨架配置文件:</p>\n<p><img src=\"https://img.qinweizhao.com/2021/12/2021-12-29_140330.png\" alt=\"2021-12-29_140330\" /></p>\n<h2 id=\"三使用-archetype-模板\">三、使用 archetype 模板</h2>\n<pre><code class=\"language-bash\"> mvn archetype:generate -DarchetypeCatalog=local\n</code></pre>\n<blockquote>\n<p>执行<code>mvn archetype:generate -DarchetypeCatalog=local</code>从本地 archeType 模板中创建项目。</p>\n</blockquote>\n<p><img src=\"https://img.qinweizhao.com/2021/12/2021-12-29_144711.png\" alt=\"2021-12-29_144711\" /></p>\n<p>选择模板，指定 groupId、artifactId、version 和 package 信息。</p>\n<p><img src=\"https://img.qinweizhao.com/2021/12/2021-12-29_145030.png\" alt=\"2021-12-29_145030\" /></p>\n', 0, NULL, NULL, '# Maven 自定义 Archetype\n\n## 一、目标项目结构（用来做模板的项目）\n\n![2021-12-29_134513](https://img.qinweizhao.com/2021/12/2021-12-29_134513.png)\n\n## 二、创建 archetype\n\n### 1、进入到项目根目录下执行（ pom.xml 同级目录）\n\n```bash\nmvn archetype:create-from-project\n```\n\nERROR:\n\n```txt\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  2.431 s\n[INFO] Finished at: 2021-12-29T14:26:01+08:00\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-archetype-plugin:3.2.0:create-from-project (default-cli) on project qwz-mall: Invoker process ended with result different t\nhan 0! -> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException\n```\n\nSOLVE:将 Maven 安装目录的 conf 文件夹中的 setting.xml 复制一份到 用户目录的 .m2 文件夹中\n\n![2021-12-29_142657](https://img.qinweizhao.com/2021/12/2021-12-29_142657.png)\n\n此时会在项目 target 下生成文件：\n\n![2021-12-29_135650](https://img.qinweizhao.com/2021/12/2021-12-29_135650.png)\n\n### 2、如果是多模块需要进行修改\n\n![2021-12-29_143101](https://img.qinweizhao.com/2021/12/2021-12-29_143101.png)\n\n如图所示，需要更改的地方有两处：\n\n1. 将 mall 替换为 `__rootArtifactId__`\n2. 打开 archetype-metadata.xml 文件将 除了 dir 处的 mall 替换为 `${rootArtifactId}`，dir 除的 mall 替换为 `__rootArtifactId__`\n\n![2021-12-29_143725](https://img.qinweizhao.com/2021/12/2021-12-29_143725.png)\n\n### 3、将 target 目录下的 archetype 安装到本地仓库\n\n```bash\n mvn install\n```\n\n### 4、生成骨架配置文件\n\n```bash\nmvn archetype:crawl\n```\n\n执行成功后，在本地仓库的根目录生成`archetype-catalog.xml`骨架配置文件:\n\n![2021-12-29_140330](https://img.qinweizhao.com/2021/12/2021-12-29_140330.png)\n\n## 三、使用 archetype 模板\n\n```bash\n mvn archetype:generate -DarchetypeCatalog=local\n```\n\n> 执行`mvn archetype:generate -DarchetypeCatalog=local`从本地 archeType 模板中创建项目。\n\n![2021-12-29_144711](https://img.qinweizhao.com/2021/12/2021-12-29_144711.png)\n\n选择模板，指定 groupId、artifactId、version 和 package 信息。\n\n![2021-12-29_145030](https://img.qinweizhao.com/2021/12/2021-12-29_145030.png)\n', '', 'mavenzi-ding-yi-archetype', 0, 'Maven 自定义 Archetype一、目标项目结构（用来做模板的项目）二、创建 archetype1、进入到项目根目录下执行（ pom.xml 同级目录）mvn archetype:create-from-projectERROR:[INFO] BUILD FAILURE[INFO] -----', '', '', 'Maven 自定义 Archetype', 0, NULL, 55, 1351);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 64, '2021-12-29 17:42:06.581000', '2022-02-15 10:50:11.573000', b'0', '2022-02-15 10:50:11.565000', 0, '<h1 id=\"java-泛型\">Java 泛型</h1>\n<blockquote>\n<p>Java 泛型（generics）是 JDK 5 中引入的一个新特性, 泛型提供了编译时类型安全检测机制，该机制允许开发者在编译时检测到非法的类型。</p>\n<p>泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。</p>\n</blockquote>\n<h2 id=\"一泛型带来的好处\">一、泛型带来的好处</h2>\n<p>在没有泛型的情况的下，通过对类型 Object 的引用来实现参数的“任意化”，“任意化”带来的缺点是要做显式的强制类型转换，而这种转换是要求开发者对实际参数类型可以预知的情况下进行的。对于强制类型转换错误的情况，编译器可能不提示错误，在运行的时候才出现异常，这是本身就是一个安全隐患。那么泛型的好处就是在编译的时候能够检查类型安全，并且所有的强制转换都是自动和隐式的。</p>\n<pre><code class=\"language-java\">public class GlmapperGeneric&lt;T&gt; {\n  private T t;\n    public void set(T t) { this.t = t; }\n    public T get() { return t; }\n\n    public static void main(String[] args) {\n        // do nothing\n    }\n\n  /**\n    * 不指定类型\n    */\n  public void noSpecifyType(){\n    GlmapperGeneric glmapperGeneric = new GlmapperGeneric();\n    glmapperGeneric.set(&quot;test&quot;);\n    // 需要强制类型转换\n    String test = (String) glmapperGeneric.get();\n    System.out.println(test);\n  }\n\n  /**\n    * 指定类型\n    */\n  public void specifyType(){\n    GlmapperGeneric&lt;String&gt; glmapperGeneric = new GlmapperGeneric();\n    glmapperGeneric.set(&quot;test&quot;);\n    // 不需要强制类型转换\n    String test = glmapperGeneric.get();\n    System.out.println(test);\n  }\n}\n</code></pre>\n<p>上面这段代码中的 specifyType 方法中省去了强制转换，可以在编译时候检查类型安全，可以用在类，方法，接口上。</p>\n<h2 id=\"二泛型的原理\">二、泛型的原理</h2>\n<p>Java 语言的泛型采用的是<strong>擦除法</strong>实现的<strong>伪泛型</strong>，泛型信息（类型变量、参数化类型）编译之后通通被除掉了。</p>\n<p><strong>类型擦除</strong></p>\n<p>泛型信息只存在于编译前，编译后的字节码中是不包含泛型中的类型信息的。因此，编译器在编译时去掉类型参数，叫做类型擦除。</p>\n<p>例如 List<Integer> 和 List<String> 等类型在编译之后都会变成 List。JVM 看到的只是 List，而泛型信息对 JVM 来说是不可见的。</p>\n<pre><code>Class class1= new ArrayList&lt;String&gt;().getClass();\nClass class2= new ArrayList&lt;Integer&gt;().getClass();\nSystem.out.println(class1 == class2);  // true\n</code></pre>\n<p>两个 ArrayList 对象相等，既 JVM 认为这是同一类型。</p>\n<h2 id=\"三泛型类\">三、泛型类</h2>\n<blockquote>\n<p>泛型类的类型参数声明部分也包含一个或多个类型参数，参数间用逗号隔开。一个泛型参数，也被称为一个类型变量，是用于指定一个泛型类型名称的标识符。因为他们接受一个或多个参数，这些类被称为参数化的类或参数化的类型。</p>\n</blockquote>\n<pre><code class=\"language-java\">package com.qinweizhao.generics;\n\n/**\n * 泛型类\n * @author qinweizhao\n * @since 2021/12/29\n */\npublic class BoxGeneric&lt;T&gt; {\n\n    private T t;\n\n    public void add(T t) {\n        this.t = t;\n    }\n\n    public T get() {\n        return t;\n    }\n\n    public static void main(String[] args) {\n        BoxGeneric&lt;Integer&gt; integerBoxGeneric = new BoxGeneric&lt;Integer&gt;();\n        BoxGeneric&lt;String&gt; stringBoxGeneric = new BoxGeneric&lt;String&gt;();\n\n        integerBoxGeneric.add(10);\n        stringBoxGeneric.add(&quot;Java 泛型&quot;);\n\n        System.out.printf(&quot;整型值为 :%d/n/n&quot;, integerBoxGeneric.get());\n        System.out.printf(&quot;字符串为 :%s/n&quot;, stringBoxGeneric.get());\n    }\n}\n</code></pre>\n<p>运行结果：</p>\n<p><img src=\"https://img.qinweizhao.com/2021/12/2021-12-29_164719.png\" alt=\"2021-12-29_164719\" /></p>\n<h2 id=\"四泛型方法\">四、泛型方法</h2>\n<ul>\n<li>所有泛型方法声明都有一个类型参数声明部分（由尖括号分隔），该类型参数声明部分在方法返回类型之前（在下面例子中的 <strong><E></strong>）。</li>\n<li>每一个类型参数声明部分包含一个或多个类型参数，参数间用逗号隔开。一个泛型参数，也被称为一个类型变量，是用于指定一个泛型类型名称的标识符。</li>\n<li>类型参数能被用来声明返回值类型，并且能作为泛型方法得到的实际参数类型的占位符。</li>\n<li>泛型方法体的声明和其他方法一样。注意类型参数只能代表引用型类型，不能是原始类型（像 <strong>int、double、char</strong> 等）。</li>\n</ul>\n<pre><code class=\"language-java\">package com.qinweizhao.generics;\n\n/**\n * 泛型方法\n * @author qinweizhao\n * @since 2021/12/29\n */\npublic class MethodGeneric {\n\n    /**\n     * 泛型方法 printArray\n     *\n     * @param inputArray inputArray\n     * @param &lt;E&gt;        E\n     */\n    public static &lt;E&gt; void printArray(E[] inputArray) {\n        // 输出数组元素\n        for (E element : inputArray) {\n            System.out.printf(&quot;%s &quot;, element);\n        }\n        System.out.println();\n    }\n\n    public static void main(String[] args) {\n        // 创建不同类型数组： Integer, Double 和 Character\n        Integer[] intArray = {1, 2, 3, 4, 5};\n        Double[] doubleArray = {1.1, 2.2, 3.3, 4.4};\n        Character[] charArray = {\'H\', \'E\', \'L\', \'L\', \'O\'};\n\n        System.out.println(&quot;整型数组元素为:&quot;);\n        // 传递一个整型数组\n        printArray(intArray);\n\n        System.out.println(&quot;/n双精度型数组元素为:&quot;);\n        // 传递一个双精度型数组\n        printArray(doubleArray);\n\n        System.out.println(&quot;/n字符型数组元素为:&quot;);\n        // 传递一个字符型数组\n        printArray(charArray);\n    }\n}\n\n</code></pre>\n<p>运行结果：</p>\n<p><img src=\"https://img.qinweizhao.com/2021/12/2021-12-29_165147.png\" alt=\"2021-12-29_165147\" /></p>\n<h2 id=\"五泛型标识符\">五、泛型标识符</h2>\n<p>Java 中泛型标记符：</p>\n<ul>\n<li><strong>E</strong> - Element (在集合中使用，因为集合中存放的是元素)</li>\n<li><strong>T</strong> - Type（Java 类）</li>\n<li><strong>K</strong> - Key（键）</li>\n<li><strong>V</strong> - Value（值）</li>\n<li><strong>N</strong> - Number（数值类型）</li>\n<li><strong>？</strong> - 表示不确定的 Java 类型</li>\n</ul>\n<h3 id=\"1无界通配符\">1、？无界通配符</h3>\n<p>一个父类 Animal 和几个子类，如狗、猫等，现在我需要一个动物的列表：</p>\n<pre><code class=\"language-java\">List&lt;? extends Animal&gt; listAnimals\n</code></pre>\n<p>通配符其实在声明局部变量时是没有什么意义的，但是当为一个方法声明一个参数时，是非常重要的。</p>\n<pre><code class=\"language-java\">package com.qinweizhao.generics;\n\nimport com.qinweizhao.generics.base.Animal;\nimport com.qinweizhao.generics.base.Dog;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @author qinweizhao\n * @since 2021/12/29\n */\npublic class Wildcard {\n\n    static int countLegs(List&lt;? extends Animal&gt; animals) {\n        int retVal = 0;\n        for (Animal animal : animals) {\n            retVal += animal.countLegs();\n        }\n        return retVal;\n    }\n\n    static int countLegs1(List&lt;Animal&gt; animals) {\n        int retVal = 0;\n        for (Animal animal : animals) {\n            retVal += animal.countLegs();\n        }\n        return retVal;\n    }\n\n    public static void main(String[] args) {\n        List&lt;Dog&gt; dogs = new ArrayList&lt;&gt;();\n        // 不会报错\n        countLegs(dogs);\n        // 报错\n        // countLegs1(dogs);\n    }\n}\nhttps://img.qinweizhao.com/2021/12/\n</code></pre>\n<p>当调用 countLegs1 时，就会飘红，提示的错误信息如下：</p>\n<p><img src=\"https://img.qinweizhao.com/2021/12/2021-12-29_171743.png\" alt=\"2021-12-29_171743\" /></p>\n<p>所以，对于不确定或者不关心实际要操作的类型，可以使用无限制通配符（尖括号里一个问号，即 &lt;?&gt; ），表示可以持有任何类型。像 countLegs 方法中，限定了上界，但是不关心具体类型是什么，所以对于传入的 Animal 的所有子类都可以支持，并且不会报错。而 countLegs1 就不行。</p>\n<h3 id=\"2上界通配符---extends-e\">2、上界通配符 &lt; ? extends E&gt;</h3>\n<blockquote>\n<p>上界：用 extends 关键字声明，表示参数化的类型可能是所指定的类型，或者是此类型的子类。</p>\n</blockquote>\n<p>在类型参数中使用 extends 表示这个泛型中的参数必须是 E 或者 E 的子类，这样有两个好处：</p>\n<ul>\n<li>如果传入的类型不是 E 或者 E 的子类，编译不成功</li>\n<li>泛型中可以使用 E 的方法，要不然还得强转成 E 才能使用</li>\n</ul>\n<pre><code class=\"language-java\">private &lt;K extends A, E extends B&gt; E test(K arg1, E arg2){\n    E result = arg2;\n    arg2.compareTo(arg1);\n    //.....\n    return result;\n}\n</code></pre>\n<blockquote>\n<p>类型参数列表中如果有多个类型参数上限，用逗号分开</p>\n</blockquote>\n<h3 id=\"3下界通配符---super-e\">3、下界通配符 &lt; ? super E&gt;</h3>\n<blockquote>\n<p>下界: 用 super 进行声明，表示参数化的类型可能是所指定的类型，或者是此类型的父类型，直至 Object</p>\n</blockquote>\n<p>在类型参数中使用 super 表示这个泛型中的参数必须是 E 或者 E 的父类。</p>\n<pre><code class=\"language-java\">private &lt;T&gt; void test(List&lt;? super T&gt; dst, List&lt;T&gt; src){\n    for (T t : src) {\n        dst.add(t);\n    }\n}\n\npublic static void main(String[] args) {\n    List&lt;Dog&gt; dogs = new ArrayList&lt;&gt;();\n    List&lt;Animal&gt; animals = new ArrayList&lt;&gt;();\n    new Test3().test(animals,dogs);\n}\n// Dog 是 Animal 的子类\nclass Dog extends Animal {\n\n}\n</code></pre>\n<p>dst 类型 “大于等于” src 的类型，这里的“大于等于”是指 dst 表示的范围比 src 要大，因此装得下 dst 的容器也就能装 src 。</p>\n<h3 id=\"4和-t-的区别\">4、？和 T 的区别</h3>\n<pre><code class=\"language-java\">// 指定集合元素只能是 T 类型\nList&lt;T&gt; list = new ArrayList&lt;&gt;();\n// 集合元素可以是任意类型，这种没有意义，一般是方法中，只是为了说明用法\nList&lt;?&gt; list = new ArrayList&lt;&gt;();\n</code></pre>\n<p>？和 T 都表示不确定的类型，区别在于我们可以对 T 进行操作，但是对 ？不行，比如如下这种 ：</p>\n<pre><code>// 可以\nT t = operate();\n\n// 不可以\n？car = operate();\n</code></pre>\n<p>简单总结下：</p>\n<p>T 是一个确定的类型，通常用于泛型类和泛型方法的定义，？是一个 不确定 的类型，通常用于泛型方法的调用代码和形参，不能用于定义类和泛型方法。</p>\n<h4 id=\"区别1通过-t-来确保泛型参数的一致性\">区别1：通过 T 来确保泛型参数的一致性</h4>\n<pre><code>// 通过 T 来确保泛型参数的一致性\npublic &lt;T extends Number&gt; void test(List&lt;T&gt; dest, List&lt;T&gt; src)\n\n// 通配符是不确定的，所以这个方法不能保证两个 List 具有相同的元素类型\npublic void test(List&lt;? extends Number&gt; dest, List&lt;? extends Number&gt; src)\n</code></pre>\n<h4 id=\"区别2类型参数可以多重限定而通配符不行\">区别2：类型参数可以多重限定而通配符不行</h4>\n<pre><code class=\"language-java\">package com.qinweizhao.generics;\n\n/**\n * @author qinweizhao\n * @since 2021/12/29\n */\npublic class MultiLimit implements MultiLimitInterfaceA, MultiLimitInterfaceB {\n\n    /**\n     * 符号设定多重边界\n     *\n     * @param t   t\n     * @param &lt;T&gt; T\n     */\n    public static &lt;T extends MultiLimitInterfaceA &amp; MultiLimitInterfaceB&gt; void test(T t) {\n\n    }\n\n}\n\n/***接口A*/\ninterface MultiLimitInterfaceA {\n}\n\n/*** i口в*/\ninterface MultiLimitInterfaceB {\n}\n</code></pre>\n<p>使用 &amp; 符号设定多重边界（Multi Bounds)，指定泛型类型 T 必须是 MultiLimitInterfaceA 和 MultiLimitInterfaceB 的共有子类型，此时变量 t 就具有了所有限定的方法和属性。对于通配符来说，因为它不是一个确定的类型，所以不能进行多重限定。</p>\n<h4 id=\"区别3通配符可以使用超类限定而类型参数不行\">区别3：通配符可以使用超类限定而类型参数不行</h4>\n<p>类型参数 T 只具有 一种 类型限定方式：</p>\n<pre><code>T extends A\n</code></pre>\n<p>但是通配符 ? 可以进行 两种限定：</p>\n<pre><code>? extends A\n? super A\n</code></pre>\n<h3 id=\"5classt-和-class-区别\">5、<code>Class&lt;T&gt;</code> 和 <code>Class&lt;?&gt;</code> 区别</h3>\n<p>前面介绍了 ？和 T 的区别，那么对于，<code>Class&lt;T&gt;</code>和 <code>&lt;Class&lt;?&gt;</code>又有什么区别呢？<code>Class&lt;T&gt;</code>和 <code>Class&lt;?&gt;</code></p>\n<p>最常见的是在反射场景下的使用，这里以用一段发射的代码来说明下。</p>\n<pre><code>// 通过反射的方式生成  multiLimit\n// 对象，这里比较明显的是，我们需要使用强制类型转换\nMultiLimit multiLimit = (MultiLimit) Class.forName(&quot;com.glmapper.bridge.boot.generic.MultiLimit&quot;).newInstance();\n</code></pre>\n<p>对于上述代码，在运行期，如果反射的类型不是 MultiLimit 类，那么一定会报 java.lang.ClassCastException 错误。</p>\n<p>对于这种情况，则可以使用下面的代码来代替，使得在在编译期就能直接检查到类型的问题：</p>\n<pre><code class=\"language-java\">package com.qinweizhao.generics;\n\n/**\n * @author qinweizhao\n * @since 2021/12/29\n */\npublic class Test {\n\n    public static &lt;T&gt; T createInstance(Class&lt;T&gt; clazz) throws IllegalAccessException, InstantiationException {\n        return clazz.newInstance();\n    }\n\n    public static void main(String[] args) throws\n            InstantiationException, IllegalAccessException {\n        A a = createInstance(A.class);\n        B b = createInstance(B.class);\n    }\n\n}\n\nclass A {\n}\n\nclass B {\n}\n</code></pre>\n<p><code>Class&lt;T&gt;</code>在实例化的时候，T 要替换成具体类。<code>Class&lt;?&gt;</code>它是个通配泛型，? 可以代表任何类型，所以主要用于声明时的限制情况。比如，我们可以这样做申明：</p>\n<pre><code class=\"language-java\">// 可以\npublic Class&lt;?&gt; clazz;\n// 不可以，因为 T 需要指定类型\npublic Class&lt;T&gt; clazzT;\n</code></pre>\n<p>所以当不知道定声明什么类型的 Class 的时候可以定义一 个Class&lt;?&gt;。</p>\n<p>那如果也想 <code>public Class&lt;T&gt; clazzT;</code>这样的话，就必须让当前的类也指定 T ，</p>\n<pre><code class=\"language-java\">public class Test3&lt;T&gt; {\n    public Class&lt;?&gt; clazz;\n    // 不会报错\n    public Class&lt;T&gt; clazzT;\n</code></pre>\n<h2></h2>\n<blockquote>\n<p>代码地址：</p>\n<p><a href=\"https://github.com/qinweizhao/qwz-sample/tree/master/basic/b-generics\">https://github.com/qinweizhao/qwz-sample/tree/master/basic/b-generics</a></p>\n</blockquote>\n', 0, NULL, NULL, '\n\n# Java 泛型\n\n>Java 泛型（generics）是 JDK 5 中引入的一个新特性, 泛型提供了编译时类型安全检测机制，该机制允许开发者在编译时检测到非法的类型。\n>\n>泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。\n\n## 一、泛型带来的好处\n\n在没有泛型的情况的下，通过对类型 Object 的引用来实现参数的“任意化”，“任意化”带来的缺点是要做显式的强制类型转换，而这种转换是要求开发者对实际参数类型可以预知的情况下进行的。对于强制类型转换错误的情况，编译器可能不提示错误，在运行的时候才出现异常，这是本身就是一个安全隐患。那么泛型的好处就是在编译的时候能够检查类型安全，并且所有的强制转换都是自动和隐式的。\n\n```java\npublic class GlmapperGeneric<T> {\n  private T t;\n    public void set(T t) { this.t = t; }\n    public T get() { return t; }\n\n    public static void main(String[] args) {\n        // do nothing\n    }\n\n  /**\n    * 不指定类型\n    */\n  public void noSpecifyType(){\n    GlmapperGeneric glmapperGeneric = new GlmapperGeneric();\n    glmapperGeneric.set(\"test\");\n    // 需要强制类型转换\n    String test = (String) glmapperGeneric.get();\n    System.out.println(test);\n  }\n\n  /**\n    * 指定类型\n    */\n  public void specifyType(){\n    GlmapperGeneric<String> glmapperGeneric = new GlmapperGeneric();\n    glmapperGeneric.set(\"test\");\n    // 不需要强制类型转换\n    String test = glmapperGeneric.get();\n    System.out.println(test);\n  }\n}\n```\n\n上面这段代码中的 specifyType 方法中省去了强制转换，可以在编译时候检查类型安全，可以用在类，方法，接口上。\n\n## 二、泛型的原理\n\nJava 语言的泛型采用的是**擦除法**实现的**伪泛型**，泛型信息（类型变量、参数化类型）编译之后通通被除掉了。\n\n**类型擦除**\n\n泛型信息只存在于编译前，编译后的字节码中是不包含泛型中的类型信息的。因此，编译器在编译时去掉类型参数，叫做类型擦除。\n\n例如 List<Integer> 和 List<String> 等类型在编译之后都会变成 List。JVM 看到的只是 List，而泛型信息对 JVM 来说是不可见的。\n\n```\nClass class1= new ArrayList<String>().getClass();\nClass class2= new ArrayList<Integer>().getClass();\nSystem.out.println(class1 == class2);  // true\n```\n\n两个 ArrayList 对象相等，既 JVM 认为这是同一类型。\n\n## 三、泛型类\n\n>泛型类的类型参数声明部分也包含一个或多个类型参数，参数间用逗号隔开。一个泛型参数，也被称为一个类型变量，是用于指定一个泛型类型名称的标识符。因为他们接受一个或多个参数，这些类被称为参数化的类或参数化的类型。\n\n```java\npackage com.qinweizhao.generics;\n\n/**\n * 泛型类\n * @author qinweizhao\n * @since 2021/12/29\n */\npublic class BoxGeneric<T> {\n\n    private T t;\n\n    public void add(T t) {\n        this.t = t;\n    }\n\n    public T get() {\n        return t;\n    }\n\n    public static void main(String[] args) {\n        BoxGeneric<Integer> integerBoxGeneric = new BoxGeneric<Integer>();\n        BoxGeneric<String> stringBoxGeneric = new BoxGeneric<String>();\n\n        integerBoxGeneric.add(10);\n        stringBoxGeneric.add(\"Java 泛型\");\n\n        System.out.printf(\"整型值为 :%d/n/n\", integerBoxGeneric.get());\n        System.out.printf(\"字符串为 :%s/n\", stringBoxGeneric.get());\n    }\n}\n```\n\n运行结果：\n\n![2021-12-29_164719](https://img.qinweizhao.com/2021/12/2021-12-29_164719.png)\n\n## 四、泛型方法\n\n- 所有泛型方法声明都有一个类型参数声明部分（由尖括号分隔），该类型参数声明部分在方法返回类型之前（在下面例子中的 **<E>**）。\n- 每一个类型参数声明部分包含一个或多个类型参数，参数间用逗号隔开。一个泛型参数，也被称为一个类型变量，是用于指定一个泛型类型名称的标识符。\n- 类型参数能被用来声明返回值类型，并且能作为泛型方法得到的实际参数类型的占位符。\n- 泛型方法体的声明和其他方法一样。注意类型参数只能代表引用型类型，不能是原始类型（像 **int、double、char** 等）。\n\n```java\npackage com.qinweizhao.generics;\n\n/**\n * 泛型方法\n * @author qinweizhao\n * @since 2021/12/29\n */\npublic class MethodGeneric {\n\n    /**\n     * 泛型方法 printArray\n     *\n     * @param inputArray inputArray\n     * @param <E>        E\n     */\n    public static <E> void printArray(E[] inputArray) {\n        // 输出数组元素\n        for (E element : inputArray) {\n            System.out.printf(\"%s \", element);\n        }\n        System.out.println();\n    }\n\n    public static void main(String[] args) {\n        // 创建不同类型数组： Integer, Double 和 Character\n        Integer[] intArray = {1, 2, 3, 4, 5};\n        Double[] doubleArray = {1.1, 2.2, 3.3, 4.4};\n        Character[] charArray = {\'H\', \'E\', \'L\', \'L\', \'O\'};\n\n        System.out.println(\"整型数组元素为:\");\n        // 传递一个整型数组\n        printArray(intArray);\n\n        System.out.println(\"/n双精度型数组元素为:\");\n        // 传递一个双精度型数组\n        printArray(doubleArray);\n\n        System.out.println(\"/n字符型数组元素为:\");\n        // 传递一个字符型数组\n        printArray(charArray);\n    }\n}\n\n```\n\n运行结果：\n\n![2021-12-29_165147](https://img.qinweizhao.com/2021/12/2021-12-29_165147.png)\n\n## 五、泛型标识符\n\nJava 中泛型标记符：\n\n- **E** - Element (在集合中使用，因为集合中存放的是元素)\n- **T** - Type（Java 类）\n- **K** - Key（键）\n- **V** - Value（值）\n- **N** - Number（数值类型）\n- **？** - 表示不确定的 Java 类型\n\n### 1、？无界通配符\n\n一个父类 Animal 和几个子类，如狗、猫等，现在我需要一个动物的列表：\n\n```java\nList<? extends Animal> listAnimals\n```\n\n通配符其实在声明局部变量时是没有什么意义的，但是当为一个方法声明一个参数时，是非常重要的。\n\n```java\npackage com.qinweizhao.generics;\n\nimport com.qinweizhao.generics.base.Animal;\nimport com.qinweizhao.generics.base.Dog;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @author qinweizhao\n * @since 2021/12/29\n */\npublic class Wildcard {\n\n    static int countLegs(List<? extends Animal> animals) {\n        int retVal = 0;\n        for (Animal animal : animals) {\n            retVal += animal.countLegs();\n        }\n        return retVal;\n    }\n\n    static int countLegs1(List<Animal> animals) {\n        int retVal = 0;\n        for (Animal animal : animals) {\n            retVal += animal.countLegs();\n        }\n        return retVal;\n    }\n\n    public static void main(String[] args) {\n        List<Dog> dogs = new ArrayList<>();\n        // 不会报错\n        countLegs(dogs);\n        // 报错\n        // countLegs1(dogs);\n    }\n}\nhttps://img.qinweizhao.com/2021/12/\n```\n\n当调用 countLegs1 时，就会飘红，提示的错误信息如下：\n\n![2021-12-29_171743](https://img.qinweizhao.com/2021/12/2021-12-29_171743.png)\n\n所以，对于不确定或者不关心实际要操作的类型，可以使用无限制通配符（尖括号里一个问号，即 <?> ），表示可以持有任何类型。像 countLegs 方法中，限定了上界，但是不关心具体类型是什么，所以对于传入的 Animal 的所有子类都可以支持，并且不会报错。而 countLegs1 就不行。\n\n### 2、上界通配符 < ? extends E>\n\n> 上界：用 extends 关键字声明，表示参数化的类型可能是所指定的类型，或者是此类型的子类。\n\n在类型参数中使用 extends 表示这个泛型中的参数必须是 E 或者 E 的子类，这样有两个好处：\n\n- 如果传入的类型不是 E 或者 E 的子类，编译不成功\n- 泛型中可以使用 E 的方法，要不然还得强转成 E 才能使用\n\n```java\nprivate <K extends A, E extends B> E test(K arg1, E arg2){\n    E result = arg2;\n    arg2.compareTo(arg1);\n    //.....\n    return result;\n}\n```\n\n> 类型参数列表中如果有多个类型参数上限，用逗号分开\n\n### 3、下界通配符 < ? super E>\n\n> 下界: 用 super 进行声明，表示参数化的类型可能是所指定的类型，或者是此类型的父类型，直至 Object\n\n在类型参数中使用 super 表示这个泛型中的参数必须是 E 或者 E 的父类。\n\n```java\nprivate <T> void test(List<? super T> dst, List<T> src){\n    for (T t : src) {\n        dst.add(t);\n    }\n}\n\npublic static void main(String[] args) {\n    List<Dog> dogs = new ArrayList<>();\n    List<Animal> animals = new ArrayList<>();\n    new Test3().test(animals,dogs);\n}\n// Dog 是 Animal 的子类\nclass Dog extends Animal {\n\n}\n```\n\ndst 类型 “大于等于” src 的类型，这里的“大于等于”是指 dst 表示的范围比 src 要大，因此装得下 dst 的容器也就能装 src 。\n\n### 4、？和 T 的区别\n\n```java\n// 指定集合元素只能是 T 类型\nList<T> list = new ArrayList<>();\n// 集合元素可以是任意类型，这种没有意义，一般是方法中，只是为了说明用法\nList<?> list = new ArrayList<>();\n```\n\n？和 T 都表示不确定的类型，区别在于我们可以对 T 进行操作，但是对 ？不行，比如如下这种 ：\n\n```\n// 可以\nT t = operate();\n\n// 不可以\n？car = operate();\n```\n\n简单总结下：\n\nT 是一个确定的类型，通常用于泛型类和泛型方法的定义，？是一个 不确定 的类型，通常用于泛型方法的调用代码和形参，不能用于定义类和泛型方法。\n\n#### 区别1：通过 T 来确保泛型参数的一致性\n\n```\n// 通过 T 来确保泛型参数的一致性\npublic <T extends Number> void test(List<T> dest, List<T> src)\n\n// 通配符是不确定的，所以这个方法不能保证两个 List 具有相同的元素类型\npublic void test(List<? extends Number> dest, List<? extends Number> src)\n```\n\n#### 区别2：类型参数可以多重限定而通配符不行\n\n```java\npackage com.qinweizhao.generics;\n\n/**\n * @author qinweizhao\n * @since 2021/12/29\n */\npublic class MultiLimit implements MultiLimitInterfaceA, MultiLimitInterfaceB {\n\n    /**\n     * 符号设定多重边界\n     *\n     * @param t   t\n     * @param <T> T\n     */\n    public static <T extends MultiLimitInterfaceA & MultiLimitInterfaceB> void test(T t) {\n\n    }\n\n}\n\n/***接口A*/\ninterface MultiLimitInterfaceA {\n}\n\n/*** i口в*/\ninterface MultiLimitInterfaceB {\n}\n```\n\n使用 & 符号设定多重边界（Multi Bounds)，指定泛型类型 T 必须是 MultiLimitInterfaceA 和 MultiLimitInterfaceB 的共有子类型，此时变量 t 就具有了所有限定的方法和属性。对于通配符来说，因为它不是一个确定的类型，所以不能进行多重限定。\n\n#### 区别3：通配符可以使用超类限定而类型参数不行\n\n类型参数 T 只具有 一种 类型限定方式：\n\n```\nT extends A\n```\n\n但是通配符 ? 可以进行 两种限定：\n\n```\n? extends A\n? super A\n```\n\n### 5、`Class<T>` 和 `Class<?>` 区别\n\n前面介绍了 ？和 T 的区别，那么对于，`Class<T>`和 `<Class<?>`又有什么区别呢？`Class<T>`和 `Class<?>`\n\n最常见的是在反射场景下的使用，这里以用一段发射的代码来说明下。\n\n```\n// 通过反射的方式生成  multiLimit\n// 对象，这里比较明显的是，我们需要使用强制类型转换\nMultiLimit multiLimit = (MultiLimit) Class.forName(\"com.glmapper.bridge.boot.generic.MultiLimit\").newInstance();\n```\n\n对于上述代码，在运行期，如果反射的类型不是 MultiLimit 类，那么一定会报 java.lang.ClassCastException 错误。\n\n对于这种情况，则可以使用下面的代码来代替，使得在在编译期就能直接检查到类型的问题：\n\n```java\npackage com.qinweizhao.generics;\n\n/**\n * @author qinweizhao\n * @since 2021/12/29\n */\npublic class Test {\n\n    public static <T> T createInstance(Class<T> clazz) throws IllegalAccessException, InstantiationException {\n        return clazz.newInstance();\n    }\n\n    public static void main(String[] args) throws\n            InstantiationException, IllegalAccessException {\n        A a = createInstance(A.class);\n        B b = createInstance(B.class);\n    }\n\n}\n\nclass A {\n}\n\nclass B {\n}\n```\n\n`Class<T>`在实例化的时候，T 要替换成具体类。`Class<?>`它是个通配泛型，? 可以代表任何类型，所以主要用于声明时的限制情况。比如，我们可以这样做申明：\n\n```java\n// 可以\npublic Class<?> clazz;\n// 不可以，因为 T 需要指定类型\npublic Class<T> clazzT;\n```\n\n所以当不知道定声明什么类型的 Class 的时候可以定义一 个Class<?>。\n\n那如果也想 `public Class<T> clazzT;`这样的话，就必须让当前的类也指定 T ，\n\n```java\npublic class Test3<T> {\n    public Class<?> clazz;\n    // 不会报错\n    public Class<T> clazzT;\n```\n\n##  \n\n>代码地址：\n>\n>https://github.com/qinweizhao/qwz-sample/tree/master/basic/b-generics\n\n', '', 'javafan-xing', 0, 'Java 泛型Java 泛型（generics）是 JDK 5 中引入的一个新特性, 泛型提供了编译时类型安全检测机制，该机制允许开发者在编译时检测到非法的类型。泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。一、泛型带来的好处在没有泛型的情况的下，通过对类型 Object 的引用', '', '', 'Java 泛型', 0, NULL, 71, 7003);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 65, '2022-01-06 16:53:00.442000', '2022-03-06 18:24:23.585000', b'0', '2022-03-06 18:24:23.578000', 0, '<h1 id=\"spring-boot-整合-mybatisplus\">Spring Boot 整合 MybatisPlus</h1>\n<blockquote>\n<p>官方地址：<a href=\"https://baomidou.com/\">https://baomidou.com/</a></p>\n</blockquote>\n<h2 id=\"一导入依赖\">一、导入依赖</h2>\n<h3 id=\"1mybatisplus\">1、MybatisPlus</h3>\n<pre><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;\n    &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;\n    &lt;version&gt;3.5.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<h3 id=\"2mysql-驱动\">2、MySQL 驱动</h3>\n<pre><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;mysql&lt;/groupId&gt;\n    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n    &lt;scope&gt;runtime&lt;/scope&gt;\n&lt;/dependency&gt;\n</code></pre>\n<p>兼容性说明：<a href=\"https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-versions.html\">https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-versions.html</a></p>\n<h3 id=\"3测试\">3、测试</h3>\n<pre><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;\n    &lt;artifactId&gt;mybatis-plus-boot-starter-test&lt;/artifactId&gt;\n    &lt;version&gt;3.5.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<h2 id=\"二配置\">二、配置</h2>\n<p>1、配置数据源；</p>\n<p>在 application.properties 配置数据源相关信息</p>\n<pre><code class=\"language-properties\"># 应用名称\nspring.application.name=spring-boot-mybatis-plus\n#************H2  Begin****************\n#创建表的MySql语句位置\nspring.datasource.schema=classpath:schema.sql\n#插入数据的MySql语句的位置\nspring.datasource.data=classpath:data.sql\n#remote visit\nspring.h2.console.settings.web-allow-others=true\n#console url。Spring启动后，可以访问 http://127.0.0.1:8080/h2-console 查看数据库\nspring.h2.console.path=/h2-console\n#default true。咱也可以用命令行访问好数据库，感兴趣的同学点这个链接 http://www.h2database.com/html/tutorial.html?highlight=Mac&amp;search=mac#firstFound\nspring.h2.console.enabled=true\nspring.h2.console.settings.trace=true\n#指定数据库的种类，这里 file意思是文件型数据库\nspring.datasource.url=jdbc:h2:file:~/test\n#用户名密码不需要改，都是临时值\nspring.datasource.username=san\nspring.datasource.password=\n#指定Driver，有了Driver才能访问数据库\nspring.datasource.driver-class-name=org.h2.Driver\n</code></pre>\n<p>2、配置MyBatis-Plus</p>\n<pre><code class=\"language-java\">@SpringBootApplication\n@MapperScan(&quot;com.qinweizhao.mybatis.plus.mapper&quot;)\npublic class Application {\n\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n    \n}\n</code></pre>\n<h2 id=\"三准备数据\">三、准备数据</h2>\n<p>entity:</p>\n<pre><code class=\"language-java\">package com.qinweizhao.mybatis.plus.entity;\n\nimport com.baomidou.mybatisplus.annotation.TableId;\nimport com.baomidou.mybatisplus.annotation.TableName;\n\n/**\n * @author qinweizhao\n * @since 2022/1/6\n */\n@TableName(&quot;USERINFO&quot;)\npublic class UserInfo {\n\n    /**\n     * 姓名\n     */\n    private String id;\n\n    /**\n     * 年龄\n     */\n    private String age;\n\n    /**\n     * 身高\n     */\n    private String height;\n\n    /**\n     * 体重\n     */\n    private String weight;\n\n\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public String getAge() {\n        return age;\n    }\n\n    public void setAge(String age) {\n        this.age = age;\n    }\n\n    public String getHeight() {\n        return height;\n    }\n\n    public void setHeight(String height) {\n        this.height = height;\n    }\n\n    public String getWeight() {\n        return weight;\n    }\n\n    public void setWeight(String weight) {\n        this.weight = weight;\n    }\n\n\n    @Override\n    public String toString() {\n        return &quot;UserInfo{&quot; +\n                &quot;id=\'&quot; + id + \'\\\'\' +\n                &quot;, age=\'&quot; + age + \'\\\'\' +\n                &quot;, height=\'&quot; + height + \'\\\'\' +\n                &quot;, weight=\'&quot; + weight + \'\\\'\' +\n                \'}\';\n    }\n}\n</code></pre>\n<p>mapper:</p>\n<pre><code class=\"language-java\">package com.qinweizhao.mybatis.plus.mapper;\n\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport com.qinweizhao.mybatis.plus.entity.UserInfo;\n\n/**\n * @author qinweizhao\n * @since 2022/1/6\n */\npublic interface UserInfoMapper extends BaseMapper&lt;UserInfo&gt; {\n}\n\n</code></pre>\n<pre><code class=\"language-xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;\n&lt;mapper namespace=&quot;com.qinweizhao.mybatis.plus.mapper.UserInfoMapper&quot;&gt;\n\n&lt;/mapper&gt;\n</code></pre>\n<p>service:</p>\n<pre><code class=\"language-java\">package com.qinweizhao.mybatis.plus.service;\n\nimport com.baomidou.mybatisplus.extension.service.IService;\nimport com.qinweizhao.mybatis.plus.entity.UserInfo;\n\n/**\n * @author qinweizhao\n * @since 2022/1/6\n */\npublic interface UserInfoService extends IService&lt;UserInfo&gt; {\n    \n}\n</code></pre>\n<pre><code class=\"language-java\">package com.qinweizhao.mybatis.plus.service;\n\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\nimport com.qinweizhao.mybatis.plus.entity.UserInfo;\nimport com.qinweizhao.mybatis.plus.mapper.UserInfoMapper;\n\n/**\n * @author qinweizhao\n * @since 2022/1/6\n */\npublic class UserInfoServiceImpl extends ServiceImpl&lt;UserInfoMapper, UserInfo&gt; implements UserInfoService{\n    \n}\n</code></pre>\n<p>项目整体结构：</p>\n<p><img src=\"https://img.qinweizhao.com/2022/01/2022-01-06_164929.png\" alt=\"2022-01-06_164929\" /></p>\n<h2 id=\"四测试\">四、测试</h2>\n<pre><code class=\"language-java\">package com.qinweizhao.mybatis.plus;\n\nimport com.baomidou.mybatisplus.test.autoconfigure.MybatisPlusTest;\nimport com.qinweizhao.mybatis.plus.entity.UserInfo;\nimport com.qinweizhao.mybatis.plus.mapper.UserInfoMapper;\nimport org.junit.jupiter.api.Test;\n\nimport javax.annotation.Resource;\nimport java.util.List;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * @author qinweizhao\n * @since 2022/1/6\n */\n@MybatisPlusTest\nclass MybatisPlusApplicationTests {\n\n    @Resource\n    private UserInfoMapper userInfoMapper;\n\n    @Test\n    void testList() {\n        List&lt;UserInfo&gt; userInfos = userInfoMapper.selectList(null);\n        assertThat(userInfos).isNotNull();\n        System.out.println(userInfos);\n    }\n}\n</code></pre>\n<p>输出：</p>\n<p><img src=\"https://img.qinweizhao.com/2022/01/2022-01-06_164425.png\" alt=\"2022-01-06_164425\" /></p>\n', 0, NULL, NULL, '# Spring Boot 整合 MybatisPlus\n\n> 官方地址：https://baomidou.com/\n\n## 一、导入依赖\n\n### 1、MybatisPlus\n\n```xml\n<dependency>\n    <groupId>com.baomidou</groupId>\n    <artifactId>mybatis-plus-boot-starter</artifactId>\n    <version>3.5.0</version>\n</dependency>\n```\n\n### 2、MySQL 驱动\n\n```xml\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n    <scope>runtime</scope>\n</dependency>\n```\n\n兼容性说明：https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-versions.html\n\n### 3、测试\n\n```xml\n<dependency>\n    <groupId>com.baomidou</groupId>\n    <artifactId>mybatis-plus-boot-starter-test</artifactId>\n    <version>3.5.0</version>\n</dependency>\n```\n\n## 二、配置\n\n1、配置数据源；\n\n在 application.properties 配置数据源相关信息\n\n```properties\n# 应用名称\nspring.application.name=spring-boot-mybatis-plus\n#************H2  Begin****************\n#创建表的MySql语句位置\nspring.datasource.schema=classpath:schema.sql\n#插入数据的MySql语句的位置\nspring.datasource.data=classpath:data.sql\n#remote visit\nspring.h2.console.settings.web-allow-others=true\n#console url。Spring启动后，可以访问 http://127.0.0.1:8080/h2-console 查看数据库\nspring.h2.console.path=/h2-console\n#default true。咱也可以用命令行访问好数据库，感兴趣的同学点这个链接 http://www.h2database.com/html/tutorial.html?highlight=Mac&search=mac#firstFound\nspring.h2.console.enabled=true\nspring.h2.console.settings.trace=true\n#指定数据库的种类，这里 file意思是文件型数据库\nspring.datasource.url=jdbc:h2:file:~/test\n#用户名密码不需要改，都是临时值\nspring.datasource.username=san\nspring.datasource.password=\n#指定Driver，有了Driver才能访问数据库\nspring.datasource.driver-class-name=org.h2.Driver\n```\n\n2、配置MyBatis-Plus\n\n```java\n@SpringBootApplication\n@MapperScan(\"com.qinweizhao.mybatis.plus.mapper\")\npublic class Application {\n\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n    \n}\n```\n\n## 三、准备数据\n\nentity:\n\n```java\npackage com.qinweizhao.mybatis.plus.entity;\n\nimport com.baomidou.mybatisplus.annotation.TableId;\nimport com.baomidou.mybatisplus.annotation.TableName;\n\n/**\n * @author qinweizhao\n * @since 2022/1/6\n */\n@TableName(\"USERINFO\")\npublic class UserInfo {\n\n    /**\n     * 姓名\n     */\n    private String id;\n\n    /**\n     * 年龄\n     */\n    private String age;\n\n    /**\n     * 身高\n     */\n    private String height;\n\n    /**\n     * 体重\n     */\n    private String weight;\n\n\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public String getAge() {\n        return age;\n    }\n\n    public void setAge(String age) {\n        this.age = age;\n    }\n\n    public String getHeight() {\n        return height;\n    }\n\n    public void setHeight(String height) {\n        this.height = height;\n    }\n\n    public String getWeight() {\n        return weight;\n    }\n\n    public void setWeight(String weight) {\n        this.weight = weight;\n    }\n\n\n    @Override\n    public String toString() {\n        return \"UserInfo{\" +\n                \"id=\'\" + id + \'\\\'\' +\n                \", age=\'\" + age + \'\\\'\' +\n                \", height=\'\" + height + \'\\\'\' +\n                \", weight=\'\" + weight + \'\\\'\' +\n                \'}\';\n    }\n}\n```\n\nmapper:\n\n```java\npackage com.qinweizhao.mybatis.plus.mapper;\n\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport com.qinweizhao.mybatis.plus.entity.UserInfo;\n\n/**\n * @author qinweizhao\n * @since 2022/1/6\n */\npublic interface UserInfoMapper extends BaseMapper<UserInfo> {\n}\n\n```\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"com.qinweizhao.mybatis.plus.mapper.UserInfoMapper\">\n\n</mapper>\n```\n\nservice:\n\n```java\npackage com.qinweizhao.mybatis.plus.service;\n\nimport com.baomidou.mybatisplus.extension.service.IService;\nimport com.qinweizhao.mybatis.plus.entity.UserInfo;\n\n/**\n * @author qinweizhao\n * @since 2022/1/6\n */\npublic interface UserInfoService extends IService<UserInfo> {\n    \n}\n```\n\n```java\npackage com.qinweizhao.mybatis.plus.service;\n\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\nimport com.qinweizhao.mybatis.plus.entity.UserInfo;\nimport com.qinweizhao.mybatis.plus.mapper.UserInfoMapper;\n\n/**\n * @author qinweizhao\n * @since 2022/1/6\n */\npublic class UserInfoServiceImpl extends ServiceImpl<UserInfoMapper, UserInfo> implements UserInfoService{\n    \n}\n```\n\n项目整体结构：\n\n![2022-01-06_164929](https://img.qinweizhao.com/2022/01/2022-01-06_164929.png)\n\n## 四、测试\n\n```java\npackage com.qinweizhao.mybatis.plus;\n\nimport com.baomidou.mybatisplus.test.autoconfigure.MybatisPlusTest;\nimport com.qinweizhao.mybatis.plus.entity.UserInfo;\nimport com.qinweizhao.mybatis.plus.mapper.UserInfoMapper;\nimport org.junit.jupiter.api.Test;\n\nimport javax.annotation.Resource;\nimport java.util.List;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * @author qinweizhao\n * @since 2022/1/6\n */\n@MybatisPlusTest\nclass MybatisPlusApplicationTests {\n\n    @Resource\n    private UserInfoMapper userInfoMapper;\n\n    @Test\n    void testList() {\n        List<UserInfo> userInfos = userInfoMapper.selectList(null);\n        assertThat(userInfos).isNotNull();\n        System.out.println(userInfos);\n    }\n}\n```\n\n输出：\n\n![2022-01-06_164425](https://img.qinweizhao.com/2022/01/2022-01-06_164425.png)\n\n', '', 'springbootzheng-he-mybatisplus', 0, 'Spring Boot 整合 MybatisPlus官方地址：https://baomidou.com/一、导入依赖1、MybatisPlus&lt;dependency&gt;    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;    &lt;artifa', '', '', 'Spring Boot 整合 MybatisPlus', 0, NULL, 61, 4364);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 66, '2022-01-07 16:19:18.433000', '2022-03-06 18:37:01.294000', b'0', '2022-03-06 18:37:01.287000', 0, '<h1 id=\"nacos-启动失败\">Nacos 启动失败</h1>\n<h2 id=\"一环境\">一、环境</h2>\n<ol>\n<li>CentOS 7</li>\n<li>JDK 11</li>\n</ol>\n<h2 id=\"二报错信息\">二、报错信息</h2>\n<p><img src=\"https://img.qinweizhao.com/2022/01/2022-01-07_163904.png\" alt=\"2022-01-07_163904\" /></p>\n<h2 id=\"三解决方案\">三、解决方案</h2>\n<p>修改 bin 目录下的 startup.sh 文件</p>\n<p>需要更改的配置</p>\n<ol>\n<li>\n<pre><code class=\"language-sh\">JAVA_OPT_EXT_FIX=&quot;-Djava.ext.dirs=${JAVA_HOME}/jre/lib/ext:${JAVA_HOME}/lib/ext&quot;\n</code></pre>\n</li>\n<li>\n<pre><code class=\"language-sh\">echo &quot;$JAVA $JAVA_OPT_EXT_FIX ${JAVA_OPT}&quot;\n</code></pre>\n</li>\n<li>\n<pre><code class=\"language-sh\">echo &quot;$JAVA $JAVA_OPT_EXT_FIX ${JAVA_OPT}&quot; &gt; ${BASE_DIR}/logs/start.out 2&gt;&amp;1 &amp;\n</code></pre>\n</li>\n<li>\n<pre><code class=\"language-sh\">nohup &quot;$JAVA&quot; &quot;$JAVA_OPT_EXT_FIX&quot; ${JAVA_OPT} nacos.nacos &gt;&gt; ${BASE_DIR}/logs/start.out 2&gt;&amp;1 &amp;\n</code></pre>\n</li>\n</ol>\n<p>更改为</p>\n<ol>\n<li>\n<pre><code class=\"language-sh\">JAVA_OPT=&quot;${JAVA_OPT} -Djava.ext.dirs=${JAVA_HOME}/jre/lib/ext:${JAVA_HOME}/lib/ext&quot;\n</code></pre>\n</li>\n<li>\n<pre><code class=\"language-sh\">echo &quot;$JAVA ${JAVA_OPT}&quot;\n</code></pre>\n</li>\n<li>\n<pre><code class=\"language-sh\"> echo &quot;$JAVA ${JAVA_OPT}&quot; &gt; ${BASE_DIR}/logs/start.out 2&gt;&amp;1 &amp;\n</code></pre>\n</li>\n<li>\n<pre><code class=\"language-sh\">nohup $JAVA ${JAVA_OPT} nacos.nacos &gt;&gt; ${BASE_DIR}/logs/start.out 2&gt;&amp;1 &amp;\n</code></pre>\n</li>\n</ol>\n', 0, NULL, NULL, '# Nacos 启动失败\n\n## 一、环境\n\n1. CentOS 7 \n2. JDK 11\n\n## 二、报错信息\n\n![2022-01-07_163904](https://img.qinweizhao.com/2022/01/2022-01-07_163904.png)\n\n## 三、解决方案\n\n修改 bin 目录下的 startup.sh 文件\n\n需要更改的配置\n\n1. ```sh\n   JAVA_OPT_EXT_FIX=\"-Djava.ext.dirs=${JAVA_HOME}/jre/lib/ext:${JAVA_HOME}/lib/ext\"\n   ```\n\n2. ```sh\n   echo \"$JAVA $JAVA_OPT_EXT_FIX ${JAVA_OPT}\"\n   ```\n\n3. ```sh\n   echo \"$JAVA $JAVA_OPT_EXT_FIX ${JAVA_OPT}\" > ${BASE_DIR}/logs/start.out 2>&1 &\n   ```\n\n4. ```sh\n   nohup \"$JAVA\" \"$JAVA_OPT_EXT_FIX\" ${JAVA_OPT} nacos.nacos >> ${BASE_DIR}/logs/start.out 2>&1 &\n   ```\n\n更改为\n\n1. ```sh\n   JAVA_OPT=\"${JAVA_OPT} -Djava.ext.dirs=${JAVA_HOME}/jre/lib/ext:${JAVA_HOME}/lib/ext\"\n   ```\n\n2. ```sh\n   echo \"$JAVA ${JAVA_OPT}\"\n   ```\n\n3. ```sh\n    echo \"$JAVA ${JAVA_OPT}\" > ${BASE_DIR}/logs/start.out 2>&1 &\n   ```\n\n4. ```sh\n   nohup $JAVA ${JAVA_OPT} nacos.nacos >> ${BASE_DIR}/logs/start.out 2>&1 &\n   ```\n', '', 'nacosqi-dong-shi-bai', 0, 'Nacos 启动失败一、环境CentOS 7JDK 11二、报错信息/usr/local/java/jdk-11.0.10/bin/java   -Xms512m -Xmx512m -Xmn256m -Dnacos.standalone=true -Dnacos.member.list= -Xlog', '', '', 'Nacos 启动失败', 0, NULL, 82, 710);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 67, '2022-02-08 17:40:45.496000', '2022-02-15 10:51:59.555000', b'0', '2022-02-15 10:51:59.548000', 0, '<h1 id=\"springboot-事件监听的4种实现方式\">SpringBoot 事件监听的4种实现方式</h1>\n<p>自定义事件和自定义监听器类的实现方式：</p>\n<ul>\n<li>自定义事件：继承自ApplicationEvent抽象类，然后定义自己的构造器</li>\n<li>自定义监听：实现<code>ApplicationListener&lt;T&gt;</code>接口，然后实现onApplicationEvent方法</li>\n</ul>\n<h2 id=\"一向-applicationcontext-中添加监听器\">一、向 ApplicationContext 中添加监听器</h2>\n<p>创建 MyListener1 类，在springboot应用启动类中获取ConfigurableApplicationContext上下文，装载监听</p>\n<h3 id=\"1代码\">1、代码</h3>\n<pre><code class=\"language-java\">public class MyEvent extends ApplicationEvent {\n\n    public MyEvent(Object source) {\n        super(source);\n    }\n}\n</code></pre>\n<pre><code class=\"language-java\">public class MyListener1 implements ApplicationListener&lt;MyEvent&gt; {\n\n    @Override\n    public void onApplicationEvent(MyEvent event) {\n        System.out.println(MyListener1.class.getName() + &quot;监听到事件源：&quot; + event.getSource());\n    }\n}\n</code></pre>\n<pre><code class=\"language-java\">@SpringBootApplication\npublic class FsbListenerApplication {\n\n    public static void main(String[] args) {\n        ConfigurableApplicationContext context = SpringApplication.run(FsbListenerApplication.class, args);\n\n        // 装载监听\n        context.addApplicationListener(new MyListener1());\n\n        // 发布事件\n        context.publishEvent(new MyEvent(&quot;测试&quot;));\n    }\n\n}\n</code></pre>\n<h3 id=\"2运行截图\">2、运行截图</h3>\n<p><img src=\"https://img.qinweizhao.com/2022/02/2022-02-08_173226.png\" alt=\"2022-02-08_173226\" /></p>\n<h2 id=\"二将监听器装载入-spring-容器\">二、将监听器装载入 Spring 容器</h2>\n<p>创建 MyListener2 类，并使用@Component注解将该类装载入spring容器中</p>\n<h3 id=\"1代码-1\">1、代码</h3>\n<pre><code class=\"language-java\">// 添加注解\n@Component\npublic class MyListener2 implements ApplicationListener&lt;MyEvent&gt;\n{\n	\n    @Override\n    public void onApplicationEvent(MyEvent event)\n    {\n        System.out.println(MyListener2.class.getName() + &quot;监听到事件源：&quot; + event.getSource());\n    }\n}\n</code></pre>\n<h3 id=\"2运行截图-1\">2、运行截图</h3>\n<p><img src=\"https://img.qinweizhao.com/2022/02/2022-02-08_173440.png\" alt=\"2022-02-08_173440\" /></p>\n<h2 id=\"三在-applicationproperties-中配置监听器\">三、在 application.properties 中配置监听器</h2>\n<h3 id=\"1代码-2\">1、代码</h3>\n<pre><code class=\"language-java\">public class MyListener3 implements ApplicationListener&lt;MyEvent&gt; {\n\n    @Override\n    public void onApplicationEvent(MyEvent event) {\n        System.out.println(MyListener3.class.getName()+&quot;监听到事件源：&quot;+event.getSource());\n    }\n}\n</code></pre>\n<pre><code class=\"language-properties\">context.listener.classes=com.qinweizhao.listener.MyListener3\n</code></pre>\n<h3 id=\"2运行截图-2\">2、运行截图</h3>\n<p><img src=\"https://img.qinweizhao.com/2022/02/2022-02-08_173614.png\" alt=\"2022-02-08_173614\" /></p>\n<h2 id=\"四通过eventlistener注解实现事件监听\">四、通过@EventListener注解实现事件监听</h2>\n<p>创建 MyListener4 类，该类无需实现 ApplicationListener 接口，使用 @EventListener 装饰具体方法</p>\n<h3 id=\"1代码-3\">1、代码</h3>\n<pre><code class=\"language-java\">@Component\npublic class MyListener4 {\n\n    @EventListener\n    public void onApplicationEvent(MyEvent event) {\n        System.out.println(MyListener4.class.getName() + &quot;监听到事件源：&quot; + event.getSource());\n    }\n}\n</code></pre>\n<h3 id=\"2运行截图-3\">2、运行截图</h3>\n<p><img src=\"https://img.qinweizhao.com/2022/02/2022-02-08_173750.png\" alt=\"2022-02-08_173750\" /></p>\n<h2></h2>\n<blockquote>\n<p>代码地址：</p>\n<p><a href=\"https://github.com/qinweizhao/qwz-sample/tree/master/framework/f-spring-boot/fsb-listener\">https://github.com/qinweizhao/qwz-sample/tree/master/framework/f-spring-boot/fsb-listener</a></p>\n</blockquote>\n', 0, NULL, NULL, '# SpringBoot 事件监听的4种实现方式\n\n自定义事件和自定义监听器类的实现方式：\n\n- 自定义事件：继承自ApplicationEvent抽象类，然后定义自己的构造器\n- 自定义监听：实现`ApplicationListener<T>`接口，然后实现onApplicationEvent方法\n\n## 一、向 ApplicationContext 中添加监听器\n\n创建 MyListener1 类，在springboot应用启动类中获取ConfigurableApplicationContext上下文，装载监听\n\n### 1、代码\n\n```java\npublic class MyEvent extends ApplicationEvent {\n\n    public MyEvent(Object source) {\n        super(source);\n    }\n}\n```\n\n```java\npublic class MyListener1 implements ApplicationListener<MyEvent> {\n\n    @Override\n    public void onApplicationEvent(MyEvent event) {\n        System.out.println(MyListener1.class.getName() + \"监听到事件源：\" + event.getSource());\n    }\n}\n```\n\n```java\n@SpringBootApplication\npublic class FsbListenerApplication {\n\n    public static void main(String[] args) {\n        ConfigurableApplicationContext context = SpringApplication.run(FsbListenerApplication.class, args);\n\n        // 装载监听\n        context.addApplicationListener(new MyListener1());\n\n        // 发布事件\n        context.publishEvent(new MyEvent(\"测试\"));\n    }\n\n}\n```\n\n### 2、运行截图\n\n![2022-02-08_173226](https://img.qinweizhao.com/2022/02/2022-02-08_173226.png)\n\n## 二、将监听器装载入 Spring 容器\n\n创建 MyListener2 类，并使用@Component注解将该类装载入spring容器中\n\n### 1、代码\n\n```java\n// 添加注解\n@Component\npublic class MyListener2 implements ApplicationListener<MyEvent>\n{\n	\n    @Override\n    public void onApplicationEvent(MyEvent event)\n    {\n        System.out.println(MyListener2.class.getName() + \"监听到事件源：\" + event.getSource());\n    }\n}\n```\n\n### 2、运行截图\n\n![2022-02-08_173440](https://img.qinweizhao.com/2022/02/2022-02-08_173440.png)\n\n## 三、在 application.properties 中配置监听器\n\n### 1、代码\n\n```java\npublic class MyListener3 implements ApplicationListener<MyEvent> {\n\n    @Override\n    public void onApplicationEvent(MyEvent event) {\n        System.out.println(MyListener3.class.getName()+\"监听到事件源：\"+event.getSource());\n    }\n}\n```\n\n```properties\ncontext.listener.classes=com.qinweizhao.listener.MyListener3\n```\n\n### 2、运行截图\n\n![2022-02-08_173614](https://img.qinweizhao.com/2022/02/2022-02-08_173614.png)\n\n## 四、通过@EventListener注解实现事件监听\n\n创建 MyListener4 类，该类无需实现 ApplicationListener 接口，使用 @EventListener 装饰具体方法\n\n### 1、代码\n\n```java\n@Component\npublic class MyListener4 {\n\n    @EventListener\n    public void onApplicationEvent(MyEvent event) {\n        System.out.println(MyListener4.class.getName() + \"监听到事件源：\" + event.getSource());\n    }\n}\n```\n\n### 2、运行截图\n\n![2022-02-08_173750](https://img.qinweizhao.com/2022/02/2022-02-08_173750.png)\n\n##  \n\n>代码地址：\n>\n>https://github.com/qinweizhao/qwz-sample/tree/master/framework/f-spring-boot/fsb-listener\n\n', '', 'springbootshi-jian-jian-ting', 0, 'SpringBoot 事件监听的4种实现方式自定义事件和自定义监听器类的实现方式：自定义事件：继承自ApplicationEvent抽象类，然后定义自己的构造器自定义监听：实现ApplicationListener&lt;T&gt;接口，然后实现onApplicationEvent方法一、向 App', '', '', 'SpringBoot 事件监听', 0, NULL, 42, 1818);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 68, '2022-02-14 18:24:18.516000', '2022-03-02 21:45:38.376000', b'0', '2022-03-02 21:45:38.329000', 0, '<h1 id=\"遍历集合的方法总结\">遍历集合的方法总结</h1>\n<h2 id=\"一list\">一、List</h2>\n<h3 id=\"1普通-for-循环\">1、普通 for 循环</h3>\n<pre><code class=\"language-java\">for (int i = 0; i &lt; list.size(); i++) {\n    String temp = list.get(i);\n    System.out.println(temp);\n}\n</code></pre>\n<h2 id=\"2增强-for-循环使用泛型\">2、增强 for 循环（使用泛型！）</h2>\n<pre><code class=\"language-java\">for (String temp : list) {\n    System.out.println(temp);\n}\n</code></pre>\n<h3 id=\"3使用-iterator-迭代器1\">3、使用 Iterator 迭代器(1)</h3>\n<pre><code class=\"language-java\">for (Iterator iter = list.iterator(); iter.hasNext(); ) {\n    String temp = (String) iter.next();\n    System.out.println(temp);\n}\n</code></pre>\n<h3 id=\"4使用-iterator-迭代器2\">4、使用 Iterator 迭代器(2)</h3>\n<pre><code class=\"language-java\">Iterator iter = list.iterator();\nwhile (iter.hasNext()) {\n    Object obj = iter.next();\n    iter.remove();//如果要遍历时，删除集合中的元素，建议使用这种方式！\n    System.out.println(obj);\n}\n</code></pre>\n<h2 id=\"二set\">二、Set</h2>\n<h3 id=\"1增强-for-循环\">1、增强 for 循环</h3>\n<pre><code class=\"language-java\">for (String temp : set) {\n    System.out.println(temp);\n}\n</code></pre>\n<h3 id=\"2使用iterator迭代器\">2、使用Iterator迭代器</h3>\n<pre><code class=\"language-java\">for (Iterator iter = set.iterator(); iter.hasNext(); ) {\n    String temp = (String) iter.next();\n    System.out.println(temp);\n}\n</code></pre>\n<h2 id=\"二map\">二、Map</h2>\n<h2 id=\"1根据-key-获取-value\">1、根据 key 获取 value</h2>\n<pre><code class=\"language-java\">Set&lt;Integer&gt; keySet = maps.keySet();\nfor (Integer id : keySet) {\n    System.out.println(maps.get(id));\n}\n</code></pre>\n<h3 id=\"2使用-entryset\">2、使用 entrySet</h3>\n<pre><code class=\"language-java\">Set&lt;Map.Entry&lt;Integer, Object&gt;&gt; ss = maps.entrySet();\nfor (Map.Entry&lt;Integer, Object&gt; s : ss) {\n    Map.Entry e = s;\n    System.out.println(e.getKey() + &quot;--&quot; + e.getValue());\n}\n</code></pre>\n', 0, NULL, NULL, '# 遍历集合的方法总结\n\n## 一、List\n\n### 1、普通 for 循环\n\n```java\nfor (int i = 0; i < list.size(); i++) {\n    String temp = list.get(i);\n    System.out.println(temp);\n}\n```\n\n## 2、增强 for 循环（使用泛型！）\n\n```java\nfor (String temp : list) {\n    System.out.println(temp);\n}\n```\n\n### 3、使用 Iterator 迭代器(1)\n\n```java\nfor (Iterator iter = list.iterator(); iter.hasNext(); ) {\n    String temp = (String) iter.next();\n    System.out.println(temp);\n}\n```\n\n### 4、使用 Iterator 迭代器(2)\n\n```java\nIterator iter = list.iterator();\nwhile (iter.hasNext()) {\n    Object obj = iter.next();\n    iter.remove();//如果要遍历时，删除集合中的元素，建议使用这种方式！\n    System.out.println(obj);\n}\n```\n\n## 二、Set\n\n### 1、增强 for 循环\n\n```java\nfor (String temp : set) {\n    System.out.println(temp);\n}\n```\n\n### 2、使用Iterator迭代器\n\n```java\nfor (Iterator iter = set.iterator(); iter.hasNext(); ) {\n    String temp = (String) iter.next();\n    System.out.println(temp);\n}\n```\n\n## 二、Map\n\n## 1、根据 key 获取 value\n\n```java\nSet<Integer> keySet = maps.keySet();\nfor (Integer id : keySet) {\n    System.out.println(maps.get(id));\n}\n```\n\n### 2、使用 entrySet\n\n```java\nSet<Map.Entry<Integer, Object>> ss = maps.entrySet();\nfor (Map.Entry<Integer, Object> s : ss) {\n    Map.Entry e = s;\n    System.out.println(e.getKey() + \"--\" + e.getValue());\n}\n```\n', '', 'bian-li-ji-he-de-fang-fa-zong-jie', 0, '遍历集合的方法总结一、List1、普通 for 循环        for (int i = 0; i &lt; list.size(); i++) {            String temp = list.get(i);            System.out.println(temp)', '', '', '遍历集合的方法总结', 0, NULL, 26, 933);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 69, '2022-02-21 15:21:33.331000', '2022-03-06 18:54:12.740000', b'0', '2022-03-06 18:54:12.730000', 0, '<h1 id=\"属性拷贝工具存在的问题\">属性拷贝工具存在的问题</h1>\n<h2 id=\"一beanutils\">一、BeanUtils</h2>\n<pre><code class=\"language-java\">package com.qinweizhao.util.problem.copy;\n\nimport lombok.Data;\n\nimport java.util.List;\n\n/**\n * @author qinweizhao\n * @since 2022/2/21\n */\n@Data\npublic class A {\n\n    private String name;\n\n    private List&lt;Integer&gt; ids;\n}\n</code></pre>\n<pre><code class=\"language-java\">package com.qinweizhao.util.problem.copy;\n\nimport lombok.Data;\n\nimport java.util.List;\n\n/**\n * @author qinweizhao\n * @since 2022/2/21\n */\n@Data\npublic class B {\n\n    private String name;\n\n    private List&lt;String&gt; ids;\n}\n\n</code></pre>\n<pre><code class=\"language-java\">package com.qinweizhao.util.problem.copy;\n\nimport org.springframework.beans.BeanUtils;\n\nimport java.util.Arrays;\n\n/**\n * @author qinweizhao\n * @since 2022/2/21\n */\npublic class CopyMain {\n\n\n    public void beanUtils(){\n        A first = new A();\n        first.setName(&quot;demo&quot;);\n        first.setIds(Arrays.asList(1, 2, 3));\n\n        B second = new B();\n        BeanUtils.copyProperties(first, second);\n        for (String each : second.getIds()) {\n            System.out.println(each);\n        }\n    }\n}\n\n</code></pre>\n<p>运行结果</p>\n<p><img src=\"https://img.qinweizhao.com/2022/02/2022-02-21_141902.png\" alt=\"2022-02-21_141902\" /></p>\n<p>Debug</p>\n<p><img src=\"https://img.qinweizhao.com/2022/02/2022-02-21_142019.png\" alt=\"2022-02-21_142019\" /></p>\n<h2 id=\"二cglib\">二、CGlib</h2>\n<p>使用CGlib 在不定义 Converter 的情况下的问题：</p>\n<pre><code class=\"language-java\">public void beanCopier() {\n        A first = new A();\n        first.setName(&quot;demo&quot;);\n        first.setIds(Arrays.asList(1, 2, 3));\n\n        B second = new B();\n        final BeanCopier beanCopier = BeanCopier.create(A.class, B.class, false);\n        beanCopier.copy(first, second, null);\n\n        for (String each : second.getIds()) {\n            // 类型转换异常\n            System.out.println(each);\n        }\n    }\n</code></pre>\n<p>运行结果</p>\n<p><img src=\"https://img.qinweizhao.com/2022/02/2022-02-21_142325.png\" alt=\"2022-02-21_142325\" /></p>\n<p>Debug</p>\n<p><img src=\"https://img.qinweizhao.com/2022/02/2022-02-21_142433.png\" alt=\"2022-02-21_142433\" /></p>\n<h2 id=\"三mapstruct\">三、mapstruct</h2>\n<pre><code class=\"language-java\">package com.qinweizhao.util.problem.copy;\n\nimport org.mapstruct.Mapper;\nimport org.mapstruct.factory.Mappers;\n\n/**\n * @author qinweizhao\n * @since 2022/2/21\n */\n@Mapper\npublic interface Converter {\n\n    Converter INSTANCE = Mappers.getMapper(Converter.class);\n\n    /**\n     *  A 转为 B\n     * @param a a\n     * @return B\n     */\n    B aToB(A a);\n}\n\n</code></pre>\n<pre><code class=\"language-java\">package com.qinweizhao.util.problem.copy;\n\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.cglib.beans.BeanCopier;\n\nimport java.util.Arrays;\n\n/**\n * @author qinweizhao\n * @since 2022/2/21\n */\npublic class CopyMain {\n\n    public void mapstruct() {\n        A first = new A();\n        first.setName(&quot;demo&quot;);\n        first.setIds(Arrays.asList(1, 2, 3));\n\n        B second = Converter.INSTANCE.aToB(first);\n        for (String each : second.getIds()) {\n            System.out.println(each);\n        }\n    }\n}\n</code></pre>\n<p>运行结果</p>\n<p><img src=\"https://img.qinweizhao.com/2022/02/2022-02-21_143303.png\" alt=\"2022-02-21_143303\" /></p>\n<p>可以成功的将 A 中 <code>List&lt;Integer&gt;</code> 转为 B 中的 <code>List&lt;String&gt;</code> 类型。</p>\n<p>编译生成的 Converter 实现类</p>\n<pre><code class=\"language-java\">import java.util.ArrayList;  \nimport java.util.List;  \nimport javax.annotation.Generated;  \nimport org.springframework.stereotype.Component;  \n  \n@Generated(  \n    value = &quot;org.mapstruct.ap.MappingProcessor&quot;,  \n    comments = &quot;version: 1.3.1.Final, compiler: javac, environment: Java 1.8.0_202 (Oracle Corporation)&quot;  \n)  \n@Component  \npublic class ConverterImpl implements Converter {  \n  \n    @Override  \n    public B aToB(A car) {  \n        if ( car == null ) {  \n            return null;  \n        }  \n  \n        B b = new B();  \n  \n        b.setName( car.getName() );  \n        b.setIds( integerListToStringList( car.getIds() ) );  \n  \n        return b;  \n    }  \n  \n    protected List&lt;String&gt; integerListToStringList(List&lt;Integer&gt; list) {  \n        if ( list == null ) {  \n            return null;  \n        }  \n  \n        List&lt;String&gt; list1 = new ArrayList&lt;String&gt;( list.size() );  \n        for ( Integer integer : list ) {  \n            list1.add( String.valueOf( integer ) );  \n        }  \n  \n        return list1;  \n    }  \n}  \n</code></pre>\n<p><strong>注</strong>：如果我们在 A 类中添加一个 String number 属性，在 B 类中添加一个 Long number 属性</p>\n<pre><code class=\"language-java\">package com.qinweizhao.util.problem.copy;\n\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.cglib.beans.BeanCopier;\n\nimport java.util.Arrays;\n\n/**\n * @author qinweizhao\n * @since 2022/2/21\n */\npublic class CopyMain {\n\n    public void mapstruct() {\n        A first = new A();\n        first.setName(&quot;demo&quot;);\n        first.setIds(Arrays.asList(1, 2, 3));\n        // 当 number 设置为非数字类型时就会报 NumberFormatException\n        first.setNumber(&quot;aa&quot;);\n\n        B second = Converter.INSTANCE.aToB(first);\n        for (String each : second.getIds()) {\n            System.out.println(each);\n        }\n    }\n}\n\n</code></pre>\n<p>运行结果</p>\n<p><img src=\"https://img.qinweizhao.com/2022/02/2022-02-21_150359.png\" alt=\"2022-02-21_150359\" /></p>\n<p>自动生成的转换类</p>\n<pre><code class=\"language-java\">package com.qinweizhao.util.problem.copy;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.annotation.Generated;\n\n@Generated(\n    value = &quot;org.mapstruct.ap.MappingProcessor&quot;,\n    date = &quot;2022-02-21T14:39:41+0800&quot;,\n    comments = &quot;version: 1.4.2.Final, compiler: javac, environment: Java 1.8.0_291 (Oracle Corporation)&quot;\n)\npublic class ConverterImpl implements Converter {\n\n    @Override\n    public B aToB(A a) {\n        if ( a == null ) {\n            return null;\n        }\n\n        B b = new B();\n\n        b.setName( a.getName() );\n        b.setIds( integerListToStringList( a.getIds() ) );\n        if ( a.getNumber() != null ) {// 问题出在这里\n            b.setNumber( Long.parseLong( a.getNumber() ) );\n        }\n\n        return b;\n    }\n\n    protected List&lt;String&gt; integerListToStringList(List&lt;Integer&gt; list) {\n        if ( list == null ) {\n            return null;\n        }\n\n        List&lt;String&gt; list1 = new ArrayList&lt;String&gt;( list.size() );\n        for ( Integer integer : list ) {\n            list1.add( String.valueOf( integer ) );\n        }\n\n        return list1;\n    }\n}\n\n</code></pre>\n<p>当使用 CGlib 和 BeanUtils 默认则不会映射 number 属性</p>\n<p>运行结果</p>\n<p><img src=\"https://img.qinweizhao.com/2022/02/2022-02-21_151359.png\" alt=\"2022-02-21_151359\" /></p>\n<p><img src=\"https://img.qinweizhao.com/2022/02/2022-02-21_151446.png\" alt=\"2022-02-21_151446\" /></p>\n<p>由于 Java 的泛型其实是编译期检查，编译后泛型擦除，导致运行时 <code>List&lt;Integer&gt;</code> 和 <code>List&lt;String&gt;</code> 都是 List 类型，可以正常赋值。这就导致在使用很多属性映射工具时，编译时不容易明显的错误。</p>\n<p>mapstruct 自定义了注解处理器，在编译阶段可以读取映射双方的泛型类型，进而进行映射。但是这种映射也很可怕，有时候我们由于粗心等原因定义错了类型，自动帮助我们进行了转换，会带了很多副作用。</p>\n<p>建议自定义转换类，使用IDEA插件自动填充，效率也挺高， A 或 B 中任何属性类型不匹配，甚至删除一个属性，编译阶段即可报错，而且直接调用 get set 的效率也是非常高的。</p>\n<p>附</p>\n<p><img src=\"https://img.qinweizhao.com/2022/02/2022-02-21_151537.png\" alt=\"2022-02-21_151537\" /></p>\n<h2></h2>\n<blockquote>\n<p>代码地址：</p>\n<p><a href=\"https://github.com/qinweizhao/qwz-sample/tree/master/framework/f-spring-boot/fsb-util\">https://github.com/qinweizhao/qwz-sample/tree/master/framework/f-spring-boot/fsb-util</a></p>\n</blockquote>\n', 0, NULL, NULL, '# 属性拷贝工具存在的问题\n\n## 一、BeanUtils \n\n```java\npackage com.qinweizhao.util.problem.copy;\n\nimport lombok.Data;\n\nimport java.util.List;\n\n/**\n * @author qinweizhao\n * @since 2022/2/21\n */\n@Data\npublic class A {\n\n    private String name;\n\n    private List<Integer> ids;\n}\n```\n\n```java\npackage com.qinweizhao.util.problem.copy;\n\nimport lombok.Data;\n\nimport java.util.List;\n\n/**\n * @author qinweizhao\n * @since 2022/2/21\n */\n@Data\npublic class B {\n\n    private String name;\n\n    private List<String> ids;\n}\n\n```\n\n```java\npackage com.qinweizhao.util.problem.copy;\n\nimport org.springframework.beans.BeanUtils;\n\nimport java.util.Arrays;\n\n/**\n * @author qinweizhao\n * @since 2022/2/21\n */\npublic class CopyMain {\n\n\n    public void beanUtils(){\n        A first = new A();\n        first.setName(\"demo\");\n        first.setIds(Arrays.asList(1, 2, 3));\n\n        B second = new B();\n        BeanUtils.copyProperties(first, second);\n        for (String each : second.getIds()) {\n            System.out.println(each);\n        }\n    }\n}\n\n```\n\n运行结果\n\n![2022-02-21_141902](https://img.qinweizhao.com/2022/02/2022-02-21_141902.png)\n\nDebug\n\n![2022-02-21_142019](https://img.qinweizhao.com/2022/02/2022-02-21_142019.png)\n\n## 二、CGlib\n\n使用CGlib 在不定义 Converter 的情况下的问题：\n\n```java\npublic void beanCopier() {\n        A first = new A();\n        first.setName(\"demo\");\n        first.setIds(Arrays.asList(1, 2, 3));\n\n        B second = new B();\n        final BeanCopier beanCopier = BeanCopier.create(A.class, B.class, false);\n        beanCopier.copy(first, second, null);\n\n        for (String each : second.getIds()) {\n            // 类型转换异常\n            System.out.println(each);\n        }\n    }\n```\n\n运行结果\n\n![2022-02-21_142325](https://img.qinweizhao.com/2022/02/2022-02-21_142325.png)\n\nDebug\n\n![2022-02-21_142433](https://img.qinweizhao.com/2022/02/2022-02-21_142433.png)\n\n## 三、mapstruct\n\n```java\npackage com.qinweizhao.util.problem.copy;\n\nimport org.mapstruct.Mapper;\nimport org.mapstruct.factory.Mappers;\n\n/**\n * @author qinweizhao\n * @since 2022/2/21\n */\n@Mapper\npublic interface Converter {\n\n    Converter INSTANCE = Mappers.getMapper(Converter.class);\n\n    /**\n     *  A 转为 B\n     * @param a a\n     * @return B\n     */\n    B aToB(A a);\n}\n\n```\n\n```java\npackage com.qinweizhao.util.problem.copy;\n\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.cglib.beans.BeanCopier;\n\nimport java.util.Arrays;\n\n/**\n * @author qinweizhao\n * @since 2022/2/21\n */\npublic class CopyMain {\n\n    public void mapstruct() {\n        A first = new A();\n        first.setName(\"demo\");\n        first.setIds(Arrays.asList(1, 2, 3));\n\n        B second = Converter.INSTANCE.aToB(first);\n        for (String each : second.getIds()) {\n            System.out.println(each);\n        }\n    }\n}\n```\n\n运行结果\n\n![2022-02-21_143303](https://img.qinweizhao.com/2022/02/2022-02-21_143303.png)\n\n可以成功的将 A 中 `List<Integer>` 转为 B 中的 `List<String>` 类型。\n\n编译生成的 Converter 实现类\n\n```java\nimport java.util.ArrayList;  \nimport java.util.List;  \nimport javax.annotation.Generated;  \nimport org.springframework.stereotype.Component;  \n  \n@Generated(  \n    value = \"org.mapstruct.ap.MappingProcessor\",  \n    comments = \"version: 1.3.1.Final, compiler: javac, environment: Java 1.8.0_202 (Oracle Corporation)\"  \n)  \n@Component  \npublic class ConverterImpl implements Converter {  \n  \n    @Override  \n    public B aToB(A car) {  \n        if ( car == null ) {  \n            return null;  \n        }  \n  \n        B b = new B();  \n  \n        b.setName( car.getName() );  \n        b.setIds( integerListToStringList( car.getIds() ) );  \n  \n        return b;  \n    }  \n  \n    protected List<String> integerListToStringList(List<Integer> list) {  \n        if ( list == null ) {  \n            return null;  \n        }  \n  \n        List<String> list1 = new ArrayList<String>( list.size() );  \n        for ( Integer integer : list ) {  \n            list1.add( String.valueOf( integer ) );  \n        }  \n  \n        return list1;  \n    }  \n}  \n```\n\n**注**：如果我们在 A 类中添加一个 String number 属性，在 B 类中添加一个 Long number 属性\n\n```java\npackage com.qinweizhao.util.problem.copy;\n\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.cglib.beans.BeanCopier;\n\nimport java.util.Arrays;\n\n/**\n * @author qinweizhao\n * @since 2022/2/21\n */\npublic class CopyMain {\n\n    public void mapstruct() {\n        A first = new A();\n        first.setName(\"demo\");\n        first.setIds(Arrays.asList(1, 2, 3));\n        // 当 number 设置为非数字类型时就会报 NumberFormatException\n        first.setNumber(\"aa\");\n\n        B second = Converter.INSTANCE.aToB(first);\n        for (String each : second.getIds()) {\n            System.out.println(each);\n        }\n    }\n}\n\n```\n\n运行结果\n\n![2022-02-21_150359](https://img.qinweizhao.com/2022/02/2022-02-21_150359.png)\n\n自动生成的转换类\n\n```java\npackage com.qinweizhao.util.problem.copy;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.annotation.Generated;\n\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2022-02-21T14:39:41+0800\",\n    comments = \"version: 1.4.2.Final, compiler: javac, environment: Java 1.8.0_291 (Oracle Corporation)\"\n)\npublic class ConverterImpl implements Converter {\n\n    @Override\n    public B aToB(A a) {\n        if ( a == null ) {\n            return null;\n        }\n\n        B b = new B();\n\n        b.setName( a.getName() );\n        b.setIds( integerListToStringList( a.getIds() ) );\n        if ( a.getNumber() != null ) {// 问题出在这里\n            b.setNumber( Long.parseLong( a.getNumber() ) );\n        }\n\n        return b;\n    }\n\n    protected List<String> integerListToStringList(List<Integer> list) {\n        if ( list == null ) {\n            return null;\n        }\n\n        List<String> list1 = new ArrayList<String>( list.size() );\n        for ( Integer integer : list ) {\n            list1.add( String.valueOf( integer ) );\n        }\n\n        return list1;\n    }\n}\n\n```\n\n当使用 CGlib 和 BeanUtils 默认则不会映射 number 属性\n\n运行结果\n\n![2022-02-21_151359](https://img.qinweizhao.com/2022/02/2022-02-21_151359.png)\n\n![2022-02-21_151446](https://img.qinweizhao.com/2022/02/2022-02-21_151446.png)\n\n由于 Java 的泛型其实是编译期检查，编译后泛型擦除，导致运行时 `List<Integer>` 和 `List<String>` 都是 List 类型，可以正常赋值。这就导致在使用很多属性映射工具时，编译时不容易明显的错误。\n\nmapstruct 自定义了注解处理器，在编译阶段可以读取映射双方的泛型类型，进而进行映射。但是这种映射也很可怕，有时候我们由于粗心等原因定义错了类型，自动帮助我们进行了转换，会带了很多副作用。\n\n建议自定义转换类，使用IDEA插件自动填充，效率也挺高， A 或 B 中任何属性类型不匹配，甚至删除一个属性，编译阶段即可报错，而且直接调用 get set 的效率也是非常高的。\n\n附\n\n![2022-02-21_151537](https://img.qinweizhao.com/2022/02/2022-02-21_151537.png)\n\n##  \n\n>代码地址：\n>\n>https://github.com/qinweizhao/qwz-sample/tree/master/framework/f-spring-boot/fsb-util\n\n', '', 'shu-xing-kao-bei-gong-ju-cun-zai-de-wen-ti', 0, '属性拷贝工具存在的问题一、BeanUtilspackage com.qinweizhao.util.problem.copy;import lombok.Data;import java.util.List;/** * @author qinweizhao * @since 2022/2/21 */', '', '', '属性拷贝工具存在的问题', 0, NULL, 32, 4406);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 71, '2022-03-06 21:19:31.965000', '2022-03-13 13:56:26.919000', b'0', '2022-03-13 13:56:26.906000', 0, '<h1 id=\"docker-的使用\">Docker 的使用</h1>\n<blockquote>\n<p>Docker 是一个开源的应用容器引擎，基于 <a href=\"https://www.runoob.com/go/go-tutorial.html\">Go 语言</a> 并遵从 Apache2.0 协议开源。</p>\n<p>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</p>\n<p>容器是完全使用沙箱机制，相互之间不会有任何接口（类似手机的 app），更重要的是容器性能开销极低。</p>\n</blockquote>\n<h2 id=\"一架构概念\">一、架构概念</h2>\n<p>Docker 在运行时分为 Docker引擎（服务端守护进程）和 客户端工具，我们日常使用各种 docker 命令，其实就是在使用客户端工具与 Docker 引擎进行交互。</p>\n<p><img src=\"https://img.qinweizhao.com/2022/03/2022-03-12_225723.png\" alt=\"2022-03-12_225723\" /></p>\n<h3 id=\"一-client-客户端\">一、 Client 客户端</h3>\n<p>Docker 是一个客户端-服务器（C/S）架构程序。Docker 客户端只需要向 Docker 服务器或者守护进程发出请求，服务器或者守护进程将完成所有工作并返回结果。Docker提供了一个命令行工具 Docker 以及一整套 RESTful API。你可以在同一台宿主机上运行 Docker 守护进程和客户端，也可以从本地的 Docker 客户端连接到运行在另一台宿主机上的远程 Docker 守护进程。</p>\n<h3 id=\"2host-主机docker-引擎\">2、Host 主机（Docker 引擎）</h3>\n<p>一个物理或者虚拟的机器用于执行 Docker 守护进程和容器。</p>\n<h3 id=\"3image-镜像\">3、Image 镜像</h3>\n<p>什么是 Docker 镜像？简单的理解， Docker 镜像就是一个 Linux 的 文件系统（Root FileSystem） ，这个文件系统里面包含可以运行在 Linux 内核的程序以及相应的数据。</p>\n<p>通过镜像启动一个容器，一个镜像就是一个可执行的包，其中包括运行应用程序所需要的所有内容：包含代码，运行时间，库，环境变量和配置文件等。</p>\n<p>Docker 把 App 文件打包成为一个镜像，并且采用类似多次快照的存储技术，可以实现：</p>\n<ul>\n<li>多个 App 可以共用相同的底层镜像（初始的操作系统镜像）；</li>\n<li>App 运行时的 IO 操作和镜像文件隔离；</li>\n<li>通过挂载包含不同配置/数据文件的目录或者卷（Volume），单个 App 镜像可以用来运行无数个不同业务的容器。</li>\n</ul>\n<h3 id=\"4container-容器\">4、Container 容器</h3>\n<p>镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p>\n<table>\n<thead>\n<tr><th align=\"center\">Docker</th><th align=\"center\">面向对象</th></tr>\n</thead>\n<tbody>\n<tr><td align=\"center\">镜像</td><td align=\"center\">类</td></tr>\n<tr><td align=\"center\">容器</td><td align=\"center\">对象</td></tr>\n</tbody>\n</table>\n<h3 id=\"5镜像分层\">5、镜像分层</h3>\n<p>Docker 支持通过扩展现有镜像，创建新的镜像。实际上， Docker Hub 中 99% 的镜像都是通过在 base 镜像中安装和配置需要的软件构建出来的。</p>\n<p><img src=\"https://img.qinweizhao.com/2022/03/2022-03-12_225813.png\" alt=\"2022-03-12_225813\" /></p>\n<p>从上图可以看到，新镜像是从 base 镜像一层一层叠加生成的。每安装一个软件，就在现有镜像的基础上增加一层。</p>\n<p>镜像分层最大的一个好处就是共享资源。比如说有多个镜像都从相同的 base 镜像构建而来，那么 Docker Host 只需在磁盘上保存一份 base 镜像；同时内存中也只需加载一份 base 镜像，就可以为所有容器服务了。而且镜像的每一层都可以被共享。</p>\n<p>如果多个容器共享一份基础镜像，当某个容器修改了基础镜像的内容，比如 /etc 下的文件，这时其他容器的 /etc 是不会被修改的，修改只会被限制在单个容器内。这就是容器 Copy-on-Write 特性。</p>\n<h3 id=\"6volume-数据卷\">6、Volume 数据卷</h3>\n<p>实际上我们的容器就好像是一个简易版的操作系统，只不过系统中只安装了我们的程序运行所需要的环境，前边说到我们的容器是可以删除的，那如果删除了，容器中的程序产生的需要持久化的数据怎么办呢？容器运行的时候我们可以进容器去查看，容器一旦删除就什么都没有了。</p>\n<p>所以数据卷就是来解决这个问题的，是用来将数据持久化到我们宿主机上，与容器间实现数据共享，简单的说就是将宿主机的目录映射到容器中的目录，应用程序在容器中的目录读写数据会同步到宿主机上，这样容器产生的数据就可以持久化了，比如我们的数据库容器，就可以把数据存储到我们宿主机上的真实磁盘中。</p>\n<h3 id=\"7registry-注册中心\">7、Registry 注册中心</h3>\n<p>Docker 用 Registry 来保存用户构建的镜像。 Registry 分为公共和私有两种。 Docker 公司运营公共的 Registry 叫做 Docker Hub 。用户可以在 Docker Hub 注册账号，分享并保存自己的镜像。</p>\n<p>Docker 公司提供了公共的镜像仓库 <a href=\"https://hub.docker.com\">https://hub.docker.com</a> （Docker 称之为 Repository）提供了庞大的镜像集合供使用。</p>\n<p>一个 Docker Registry 中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。</p>\n<p>通常，一个仓库会包含同一个软件不同版本的镜像，而标签对应该软件的各个版本。我们可以通过 &lt;仓库名&gt;:&lt;标签&gt; 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 latest 作为默认标签。</p>\n<p><img src=\"https://img.qinweizhao.com/2022/03/2022-03-12_225836.png\" alt=\"2022-03-12_225836\" /></p>\n<h2 id=\"二容器使用\">二、容器使用</h2>\n<h3 id=\"1获取镜像\">1、获取镜像</h3>\n<p>如果本地没有 centos 镜像，可以使用 docker pull 命令来载入 centos 镜像：</p>\n<pre><code class=\"language-sh\">docker pull centos\n</code></pre>\n<h3 id=\"2启动容器\">2、启动容器</h3>\n<p>使用 centos 镜像启动一个容器，参数为以命令行模式进入该容器：</p>\n<pre><code class=\"language-sh\">docker run -it centos /bin/bash\n</code></pre>\n<p>参数说明：</p>\n<ul>\n<li><strong>-i</strong>: 交互式操作。</li>\n<li><strong>-t</strong>: 终端。</li>\n<li><strong>centos</strong>: centos 镜像。</li>\n<li><strong>/bin/bash</strong>：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 /bin/bash。</li>\n</ul>\n<p>要退出终端，直接输入 <strong>exit</strong>：</p>\n<pre><code class=\"language-sh\">exit\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2022/03/2022-03-06_203544.png\" alt=\"2022-03-06_203544\" /></p>\n<h3 id=\"3启动已停止运行的容器\">3、启动已停止运行的容器</h3>\n<p>查看所有的容器命令：</p>\n<pre><code class=\"language-sh\">docker ps -a\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2022/03/2022-03-06_203610.png\" alt=\"2022-03-06_203610\" /></p>\n<p>输出详情介绍：</p>\n<ul>\n<li><strong>CONTAINER ID:</strong> 容器 ID。</li>\n<li><strong>IMAGE:</strong> 使用的镜像。</li>\n<li><strong>COMMAND:</strong> 启动容器时运行的命令。</li>\n<li><strong>CREATED:</strong> 容器的创建时间。</li>\n<li><strong>STATUS:</strong> 容器状态，状态有 7 种：\n<ul>\n<li>created（已创建）</li>\n<li>restarting（重启中）</li>\n<li>running 或 Up（运行中）</li>\n<li>removing（迁移中）</li>\n<li>paused（暂停）</li>\n<li>exited（停止）</li>\n<li>dead（死亡）</li>\n</ul>\n</li>\n<li><strong>PORTS</strong>: 容器的端口信息和使用的连接类型（tcp\\udp）。</li>\n<li><strong>NAMES:</strong> 自动分配的容器名称。</li>\n</ul>\n<p>使用 docker start  （容器 ID 或容器名称）启动一个已停止的容器：</p>\n<pre><code class=\"language-sh\">docker start 6a74bbdf323e \n</code></pre>\n<h3 id=\"4后台运行\">4、后台运行</h3>\n<p>在大部分的场景下，我们希望 docker 的服务是在后台运行的，我们可以过 <strong>-d</strong> 指定容器的运行模式。加了 <strong>-d</strong> 参数默认不会进入容器：</p>\n<pre><code class=\"language-sh\">docker run -itd --name my-centos centos /bin/bash\n</code></pre>\n<h3 id=\"5停止一个容器\">5、停止一个容器</h3>\n<p>停止容器使用 docker stop 命令：</p>\n<pre><code>docker stop fab\n</code></pre>\n<h3 id=\"6重启\">6、重启</h3>\n<p>容器可以通过 docker restart 重启：</p>\n<pre><code class=\"language-sh\">docker restart fab\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2022/03/2022-03-06_210511.png\" alt=\"2022-03-06_210511\" /></p>\n<h3 id=\"7进入容器\">7、进入容器</h3>\n<p>在使用 <strong>-d</strong> 参数时，容器启动后会进入后台。此时想要进入容器，可以通过以下指令进入：</p>\n<ul>\n<li><strong>docker attach</strong></li>\n<li><strong>docker exec</strong>：推荐使用 docker exec 命令，因为此退出容器终端，不会导致容器的停止。</li>\n</ul>\n<h3 id=\"8导出容器快照\">8、导出容器快照</h3>\n<p>如果要导出本地某个容器，可以使用 <strong>docker export</strong> 命令：</p>\n<pre><code class=\"language-sh\">docker export fab &gt; centos.tar\n</code></pre>\n<p>导出容器 fab 快照到本地文件 centos.tar。</p>\n<h3 id=\"9导入容器快照\">9、导入容器快照</h3>\n<p>使用 docker import 从容器快照文件中再导入为镜像，以下实例将快照文件 centos.tar 导入到镜像 centos:v1：</p>\n<pre><code class=\"language-sh\">cat docker/centos.tar | docker import - icentos:v1\n</code></pre>\n<p>此外，也可以通过指定 URL 或者某个目录来导入，例如：</p>\n<pre><code>$ docker import http://example.com/exampleimage.tgz example/imagerepo\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2022/03/2022-03-06_211459.png\" alt=\"2022-03-06_211459\" /></p>\n<h3 id=\"10删除容器\">10、删除容器</h3>\n<p>删除容器使用 <strong>docker rm</strong> 命令：</p>\n<pre><code>$ docker rm -f 1e560fca390\n</code></pre>\n<p>下面的命令可以清理掉所有处于终止状态的容器：</p>\n<pre><code class=\"language-sh\">docker container prune\n</code></pre>\n<h3 id=\"11文件拷贝\">11、文件拷贝</h3>\n<p>如果我们需要将文件拷贝到容器内可以使用<code>cp</code>命令。</p>\n<pre><code class=\"language-sh\">docker cp 需要拷贝的文件或目录 容器名称:容器目录\n</code></pre>\n<p>也可以将文件从容器内拷贝出来。</p>\n<pre><code class=\"language-sh\">docker cp 容器名称:容器目录 需要拷贝的文件或目录\n</code></pre>\n<h3 id=\"12目录挂载\">12、目录挂载</h3>\n<p>我们可以在创建容器的时候，将宿主机的目录与容器内的目录进行映射，这样我们就可以通过修改宿主机某个目录的文件从而去影响容器，而且这个操作是双向绑定的，也就是说容器内的操作也会影响到宿主机，实现备份功能。</p>\n<p>但是容器被删除的时候，宿主机的内容并不会被删除。如果多个容器挂载同一个目录，其中一个容器被删除，其他容器的内容也不会受到影响。</p>\n<p>创建容器添加<code>-v</code>参数，格式为宿主机目录:容器目录，例如：</p>\n<pre><code class=\"language-sh\">docker run -di -v /home/ruoyi/data:/usr/local/data --name centos7-01 centos:7\n\n# 多目录挂载\ndocker run -di -v /宿主机目录:/容器目录 -v /宿主机目录2:/容器目录2 镜像名\n</code></pre>\n<h4 id=\"1-匿名挂载\">1. 匿名挂载</h4>\n<p>匿名挂载只需要写容器目录即可，容器外对应的目录会在<code>/var/lib/docker/volumes</code>中生成。</p>\n<pre><code class=\"language-sh\"># 匿名挂载\ndocker run -di -v /usr/local/data --name centos7-02 centos:7\n# 查看 volume 数据卷信息\ndocker volume ls\n</code></pre>\n<h4 id=\"2-具名挂载\">2. 具名挂载</h4>\n<p>具名挂载就是给数据卷起了个名字，容器外对应的目录会在<code>/var/lib/docker/volume</code>中生成。</p>\n<pre><code class=\"language-sh\"># 匿名挂载\ndocker run -di -v docker_centos_data:/usr/local/data --name centos7-03 centos:7\n# 查看 volume 数据卷信息\ndocker volume ls\n</code></pre>\n<h4 id=\"3-指定目录挂载\">3. 指定目录挂载</h4>\n<p>之前挂载方式就属于指定目录挂载，这种方式的挂载不会在<code>/var/lib/docker/volume</code>目录生成内容。</p>\n<pre><code class=\"language-sh\">docker run -di -v /mydata/docker_centos/data:/usr/local/data --name centos7-01 centos:7\n# 多目录挂载\ndocker run -di -v /宿主机目录:/容器目录 -v /宿主机目录2:/容器目录2 镜像名\n</code></pre>\n<h4 id=\"4-查看目录挂载关系\">4. 查看目录挂载关系</h4>\n<p>通过<code>docker volume inspect</code>数据卷名称 可以查看该数据卷对应宿主机的目录地址。</p>\n<p>执行命令：<code>docker volume inspect docker_centos_data</code></p>\n<p>通过<code>docker inspect</code>容器ID或名称 ，在返回的<code>JSON</code>节点中找到<code>Mounts</code>，可以查看详细的数据挂载信息。</p>\n<h4 id=\"5-只读读写\">5. 只读/读写</h4>\n<pre><code class=\"language-sh\"># 只读。只能通过修改宿主机内容实现对容器的数据管理。\ndocker run -it -v /宿主机目录:/容器目录:ro 镜像名\n\n# 读写，默认。宿主机和容器可以双向操作数据。\ndocker run -it -v /宿主机目录:/容器目录:rw 镜像名\n</code></pre>\n<h3 id=\"11其他\">11、其他</h3>\n<p>更多命令直接输入 docker 命令来查看。</p>\n<p>可以通过命令 <strong>docker command --help</strong> 更深入的了解指定的 Docker 命令使用方法。</p>\n<p>例如我们要查看 <strong>docker stats</strong> 指令的具体使用方法：</p>\n<pre><code class=\"language-sh\">docker stats --help\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2022/03/2022-03-06_212339.png\" alt=\"2022-03-06_212339\" /></p>\n<h2 id=\"三镜像使用\">三、镜像使用</h2>\n<blockquote>\n<p>当运行容器时，使用的镜像如果在本地中不存在，docker 就会自动从 docker 镜像仓库中下载，默认是从 Docker Hub 公共镜像源下载。镜像都是存储在 Docker 宿主机的 /var/lib/docker 目录下。</p>\n</blockquote>\n<h3 id=\"1列出镜像列表\">1、列出镜像列表</h3>\n<p>使用 <strong>docker images</strong> 列出本地主机上的镜像：</p>\n<p><img src=\"https://img.qinweizhao.com/2022/03/2022-03-06_212718.png\" alt=\"2022-03-06_212718\" /></p>\n<p>各个选项说明</p>\n<ul>\n<li><strong>REPOSITORY:</strong> 表示镜像的仓库源。</li>\n<li><strong>TAG:</strong> 镜像的标签。</li>\n<li><strong>IMAGE ID:</strong> 镜像ID。</li>\n<li><strong>CREATED:</strong> 镜像创建时间。</li>\n<li><strong>SIZE:</strong> 镜像大小。</li>\n</ul>\n<p>同一仓库源可以有多个 TAG，代表这个仓库源的不同个版本。当有多个不同的版本，我们使用 REPOSITORY:TAG 来定义不同的镜像。</p>\n<p>如果不指定一个镜像的版本标签，将默认使用 xxx:latest 镜像。</p>\n<h3 id=\"2获取一个新的镜像\">2、获取一个新的镜像</h3>\n<p>当本地主机上使用一个不存在的镜像时 Docker 就会自动下载这个镜像。如果想预先下载这个镜像，可以使用 docker pull 命令来下载它。</p>\n<h3 id=\"3查找镜像\">3、查找镜像</h3>\n<p>可以从 Docker Hub 网站来搜索镜像，Docker Hub 网址为： <strong><a href=\"https://hub.docker.com/\">https://hub.docker.com/</a></strong>。</p>\n<p>我们也可以使用 docker search 命令来搜索镜像。比如我们需要一个 centos 镜像。我们可以通过 docker search 命令搜索 centos 来寻找适合我们的镜像。</p>\n<pre><code class=\"language-sh\">docker search centos\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2022/03/2022-03-06_213408.png\" alt=\"2022-03-06_213408\" /></p>\n<p><strong>NAME:</strong> 镜像仓库源的名称。</p>\n<p><strong>DESCRIPTION:</strong> 镜像的描述。</p>\n<p><strong>OFFICIAL:</strong> 是否 docker 官方发布。</p>\n<p><strong>STARS:</strong> 类似 Github 里面的 star，表示点赞、喜欢的意思。</p>\n<p><strong>AUTOMATED:</strong> 自动构建。</p>\n<h3 id=\"4删除镜像\">4、删除镜像</h3>\n<p>镜像删除使用 <strong>docker rmi</strong> 命令：</p>\n<pre><code class=\"language-sh\">docker rmi fab\n</code></pre>\n<h3 id=\"5创建镜像\">5、创建镜像</h3>\n<p>当从 docker 镜像仓库中下载的镜像不能满足我们的需求时，我们可以通过以下两种方式对镜像进行更改。</p>\n<ul>\n<li>1、从已经创建的容器中更新镜像，并且提交这个镜像。</li>\n<li>2、使用 Dockerfile 指令来创建一个新的镜像。</li>\n</ul>\n<h4 id=\"1-更新镜像\">1. 更新镜像</h4>\n<p>在运行的容器中新增一个 wz.txt 文件，然后退出：</p>\n<pre><code class=\"language-sh\">touch wz.txt\n</code></pre>\n<pre><code class=\"language-sh\">exit\n</code></pre>\n<p>将定制后的容器通过命令 docker commit 来提交容器副本：</p>\n<pre><code class=\"language-sh\">docker commit -m=&quot;add file&quot; -a=&quot;qwz&quot; fab wzcentos\n</code></pre>\n<p>参数说明：</p>\n<ul>\n<li><strong>-m:</strong> 提交的描述信息。</li>\n<li><strong>-a:</strong> 指定镜像作者。</li>\n<li><strong>fab:</strong> 容器 ID。</li>\n<li><strong>wzcentos:</strong> 指定要创建的目标镜像名。</li>\n</ul>\n<h4 id=\"2-构建镜像\">2. 构建镜像</h4>\n<p>使用命令 docker build ， 从零开始来创建一个新的镜像。为此，我们需要创建一个 Dockerfile 文件，其中包含一组指令来告诉 Docker 如何构建我们的镜像。</p>\n<p>详细参考：Dockerfile</p>\n<pre><code class=\"language-sh\">docker build -t bcentos:b .\n</code></pre>\n<p>参数说明：</p>\n<ul>\n<li><strong>-t</strong> ：指定要创建的目标镜像名。</li>\n<li><strong>.</strong> ：Dockerfile 文件所在目录，可以指定Dockerfile 的绝对路径。</li>\n</ul>\n<h3 id=\"6设置镜像标签\">6、设置镜像标签</h3>\n<p>使用 docker tag 命令，为镜像添加一个新的标签：</p>\n<pre><code class=\"language-sh\">docker tag 339 wzcentos:a\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2022/03/2022-03-07_105226.png\" alt=\"2022-03-07_105226\" /></p>\n<h2 id=\"四容器连接\">四、容器连接</h2>\n<h3 id=\"1网络端口映射\">1、网络端口映射</h3>\n<p>创建一个 web 应用的容器（镜像使用的是 halo 博客）：</p>\n<pre><code class=\"language-sh\">docker run -it -d --name halo -p 8090:8090 halohub/halo:latest\n</code></pre>\n<p>使用 <strong>-p</strong> 标识来指定容器端口绑定到主机端口，也可以指定容器绑定的网络地址，比如绑定 127.0.0.1：</p>\n<pre><code class=\"language-sh\">docker run -it -d --name ihalo -p 127.0.0.1:8090:8090 halohub/halo:latest\n</code></pre>\n<p>默认都是绑定 tcp 端口，如果要绑定 UDP 端口，可以在端口后面加上 <strong>/udp</strong>：</p>\n<pre><code class=\"language-sh\">docker run -it -d --name uhalo -p 127.0.0.1:9090:8090/udp halohub/halo:latest\n</code></pre>\n<p><strong>docker port</strong> 命令可以让我们快捷地查看端口的绑定情况：</p>\n<pre><code class=\"language-sh\">docker port cb8\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2022/03/2022-03-07_181506.png\" alt=\"2022-03-07_181506\" /></p>\n<h3 id=\"2容器互联\">2、容器互联</h3>\n<p>端口映射并不是唯一把 docker 连接到另一个容器的方法。docker 有一个连接系统允许将多个容器连接在一起，共享连接信息。docker 连接会创建一个父子关系，其中父容器可以看到子容器的信息。</p>\n<h4 id=\"1-新建网络\">1. 新建网络</h4>\n<pre><code class=\"language-sh\">docker network create -d bridge test-net\n</code></pre>\n<p>参数说明：</p>\n<p><strong>-d</strong>：参数指定 Docker 网络类型，有 bridge、overlay（用于 Swarm mode）。</p>\n<h4 id=\"2-连接容器\">2. 连接容器</h4>\n<pre><code class=\"language-sh\">docker run -itd --name test1 --network test-net centos /bin/bash\n</code></pre>\n<p>再运行一个容器并加入到 test-net 网络:</p>\n<pre><code class=\"language-sh\">docker run -itd --name test2 --network test-net centos /bin/bash\n</code></pre>\n<p>下面通过 ping 来证明 test1 容器和 test2 容器建立了互联关系。</p>\n<p><img src=\"https://img.qinweizhao.com/2022/03/2022-03-07_184643.png\" alt=\"2022-03-07_184643\" /></p>\n<p>如果有多个容器之间需要互相连接，推荐使用 Docker Compose。</p>\n<h4 id=\"3-配置-dns\">3. 配置 DNS</h4>\n<p>在宿主机（Linux）的 /etc/docker/daemon.json 文件中增加以下内容来设置全部容器的 DNS：</p>\n<pre><code class=\"language-json\">{\n  &quot;dns&quot; : [\n    &quot;114.114.114.114&quot;\n  ]\n}\n</code></pre>\n<p>设置后，启动容器的 DNS 会自动配置为 114.114.114.114 和 8.8.8.8。</p>\n<p>配置完，需要重启 docker 才能生效。</p>\n<p>查看容器的 DNS 是否生效可以使用以下命令，它会输出容器的 DNS 信息：</p>\n<pre><code class=\"language-sh\">docker run -it --rm  centos  cat etc/resolv.conf\n</code></pre>\n<p>如果只想在指定的容器设置 DNS，则可以使用以下命令：</p>\n<pre><code class=\"language-sh\">docker run -it --rm -h host_centos  --dns=8.8.8.8 --dns-search=test.com centos\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2022/03/2022-03-07_200016.png\" alt=\"2022-03-07_200016\" /></p>\n<p>参数说明：</p>\n<p><strong>--rm</strong>：容器退出时自动清理容器内部的文件系统。</p>\n<p><strong>-h HOSTNAME 或者 --hostname=HOSTNAME</strong>： 设定容器的主机名，它会被写到容器内的 /etc/hostname 和 /etc/hosts。</p>\n<p><strong>--dns=IP_ADDRESS</strong>： 添加 DNS 服务器到容器的 /etc/resolv.conf 中，让容器用这个服务器来解析所有不在 /etc/hosts 中的主机名。</p>\n<p><strong>--dns-search=DOMAIN</strong>： 设定容器的搜索域，当设定搜索域为 .example.com 时，在搜索一个名为 host 的主机时，DNS 不仅搜索 host，还会搜索 host.example.com。</p>\n<p>如果在容器启动时没有指定 <strong>--dns</strong> 和 <strong>--dns-search</strong>，Docker 会默认用宿主主机上的 /etc/resolv.conf 来配置容器的 DNS。</p>\n<h2 id=\"五仓库管理\">五、仓库管理</h2>\n<p>仓库（Repository）是集中存放镜像的地方，目前 Docker 官方维护了一个公共仓库 <a href=\"https://hub.docker.com/\">Docker Hub</a>。</p>\n<p>注册地址： <a href=\"https://hub.docker.com/\">https://hub.docker.com</a></p>\n<h3 id=\"1登录和退出\">1、登录和退出</h3>\n<p>登录需要输入用户名和密码，登录成功后，我们就可以从 docker hub 上拉取自己账号下的全部镜像。</p>\n<pre><code class=\"language-sh\">docker login\n</code></pre>\n<p>退出 docker hub 可以使用以下命令：</p>\n<pre><code class=\"language-sh\">docker logout\n</code></pre>\n<h3 id=\"2推送镜像\">2、推送镜像</h3>\n<p>用户登录后，可以通过 docker push 命令将自己的镜像推送到 Docker Hub。</p>\n<pre><code class=\"language-sh\">docker push qinweizhao/centos:7\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2022/03/2022-03-07_211825.png\" alt=\"2022-03-07_211825\" /></p>\n<p>结果：<br />\n<img src=\"https://img.qinweizhao.com/2022/03/2022-03-07_211913.png\" alt=\"2022-03-07_211913\" /></p>\n', 0, NULL, NULL, '# Docker 的使用\n\n>Docker 是一个开源的应用容器引擎，基于 [Go 语言](https://www.runoob.com/go/go-tutorial.html) 并遵从 Apache2.0 协议开源。\n>\n>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。\n>\n>容器是完全使用沙箱机制，相互之间不会有任何接口（类似手机的 app），更重要的是容器性能开销极低。\n\n## 一、架构概念\nDocker 在运行时分为 Docker引擎（服务端守护进程）和 客户端工具，我们日常使用各种 docker 命令，其实就是在使用客户端工具与 Docker 引擎进行交互。\n\n![2022-03-12_225723]( https://img.qinweizhao.com/2022/03/2022-03-12_225723.png)\n\n### 一、 Client 客户端\n\nDocker 是一个客户端-服务器（C/S）架构程序。Docker 客户端只需要向 Docker 服务器或者守护进程发出请求，服务器或者守护进程将完成所有工作并返回结果。Docker提供了一个命令行工具 Docker 以及一整套 RESTful API。你可以在同一台宿主机上运行 Docker 守护进程和客户端，也可以从本地的 Docker 客户端连接到运行在另一台宿主机上的远程 Docker 守护进程。\n\n### 2、Host 主机（Docker 引擎）\n\n一个物理或者虚拟的机器用于执行 Docker 守护进程和容器。\n\n### 3、Image 镜像\n\n什么是 Docker 镜像？简单的理解， Docker 镜像就是一个 Linux 的 文件系统（Root FileSystem） ，这个文件系统里面包含可以运行在 Linux 内核的程序以及相应的数据。\n\n通过镜像启动一个容器，一个镜像就是一个可执行的包，其中包括运行应用程序所需要的所有内容：包含代码，运行时间，库，环境变量和配置文件等。\n\nDocker 把 App 文件打包成为一个镜像，并且采用类似多次快照的存储技术，可以实现：\n\n- 多个 App 可以共用相同的底层镜像（初始的操作系统镜像）；\n-  App 运行时的 IO 操作和镜像文件隔离；\n- 通过挂载包含不同配置/数据文件的目录或者卷（Volume），单个 App 镜像可以用来运行无数个不同业务的容器。\n\n### 4、Container 容器\n\n镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。\n\n| Docker | 面向对象 |\n| :----: | :------: |\n|  镜像  |    类    |\n|  容器  |   对象   |\n\n### 5、镜像分层\n\nDocker 支持通过扩展现有镜像，创建新的镜像。实际上， Docker Hub 中 99% 的镜像都是通过在 base 镜像中安装和配置需要的软件构建出来的。\n\n![2022-03-12_225813]( https://img.qinweizhao.com/2022/03/2022-03-12_225813.png)\n\n从上图可以看到，新镜像是从 base 镜像一层一层叠加生成的。每安装一个软件，就在现有镜像的基础上增加一层。\n\n镜像分层最大的一个好处就是共享资源。比如说有多个镜像都从相同的 base 镜像构建而来，那么 Docker Host 只需在磁盘上保存一份 base 镜像；同时内存中也只需加载一份 base 镜像，就可以为所有容器服务了。而且镜像的每一层都可以被共享。\n\n如果多个容器共享一份基础镜像，当某个容器修改了基础镜像的内容，比如 /etc 下的文件，这时其他容器的 /etc 是不会被修改的，修改只会被限制在单个容器内。这就是容器 Copy-on-Write 特性。\n\n### 6、Volume 数据卷\n\n实际上我们的容器就好像是一个简易版的操作系统，只不过系统中只安装了我们的程序运行所需要的环境，前边说到我们的容器是可以删除的，那如果删除了，容器中的程序产生的需要持久化的数据怎么办呢？容器运行的时候我们可以进容器去查看，容器一旦删除就什么都没有了。\n\n所以数据卷就是来解决这个问题的，是用来将数据持久化到我们宿主机上，与容器间实现数据共享，简单的说就是将宿主机的目录映射到容器中的目录，应用程序在容器中的目录读写数据会同步到宿主机上，这样容器产生的数据就可以持久化了，比如我们的数据库容器，就可以把数据存储到我们宿主机上的真实磁盘中。\n\n### 7、Registry 注册中心\n\nDocker 用 Registry 来保存用户构建的镜像。 Registry 分为公共和私有两种。 Docker 公司运营公共的 Registry 叫做 Docker Hub 。用户可以在 Docker Hub 注册账号，分享并保存自己的镜像。\n\nDocker 公司提供了公共的镜像仓库 https://hub.docker.com （Docker 称之为 Repository）提供了庞大的镜像集合供使用。\n\n一个 Docker Registry 中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。\n\n通常，一个仓库会包含同一个软件不同版本的镜像，而标签对应该软件的各个版本。我们可以通过 <仓库名>:<标签> 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 latest 作为默认标签。\n\n![2022-03-12_225836]( https://img.qinweizhao.com/2022/03/2022-03-12_225836.png)\n\n\n\n## 二、容器使用\n\n### 1、获取镜像\n\n如果本地没有 centos 镜像，可以使用 docker pull 命令来载入 centos 镜像：\n\n```sh\ndocker pull centos\n```\n\n### 2、启动容器\n\n使用 centos 镜像启动一个容器，参数为以命令行模式进入该容器：\n\n```sh\ndocker run -it centos /bin/bash\n```\n\n参数说明：\n\n- **-i**: 交互式操作。\n- **-t**: 终端。\n- **centos**: centos 镜像。\n- **/bin/bash**：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 /bin/bash。\n\n要退出终端，直接输入 **exit**：\n\n```sh\nexit\n```\n\n![2022-03-06_203544](https://img.qinweizhao.com/2022/03/2022-03-06_203544.png)\n\n### 3、启动已停止运行的容器\n\n查看所有的容器命令：\n\n```sh\ndocker ps -a\n```\n\n![2022-03-06_203610](https://img.qinweizhao.com/2022/03/2022-03-06_203610.png)\n\n输出详情介绍：\n\n- **CONTAINER ID:** 容器 ID。\n- **IMAGE:** 使用的镜像。\n- **COMMAND:** 启动容器时运行的命令。\n- **CREATED:** 容器的创建时间。\n- **STATUS:** 容器状态，状态有 7 种：\n  + created（已创建）\n  + restarting（重启中）\n  + running 或 Up（运行中）\n  + removing（迁移中）\n  + paused（暂停）\n  + exited（停止）\n  + dead（死亡）\n- **PORTS**: 容器的端口信息和使用的连接类型（tcp\\udp）。\n- **NAMES:** 自动分配的容器名称。\n\n使用 docker start  （容器 ID 或容器名称）启动一个已停止的容器：\n\n```sh\ndocker start 6a74bbdf323e \n```\n\n### 4、后台运行\n\n在大部分的场景下，我们希望 docker 的服务是在后台运行的，我们可以过 **-d** 指定容器的运行模式。加了 **-d** 参数默认不会进入容器：\n\n```sh\ndocker run -itd --name my-centos centos /bin/bash\n```\n\n### 5、停止一个容器\n\n停止容器使用 docker stop 命令：\n\n```\ndocker stop fab\n```\n\n### 6、重启\n\n容器可以通过 docker restart 重启：\n\n```sh\ndocker restart fab\n```\n\n![2022-03-06_210511](https://img.qinweizhao.com/2022/03/2022-03-06_210511.png)\n\n### 7、进入容器\n\n在使用 **-d** 参数时，容器启动后会进入后台。此时想要进入容器，可以通过以下指令进入：\n\n- **docker attach**\n- **docker exec**：推荐使用 docker exec 命令，因为此退出容器终端，不会导致容器的停止。\n\n### 8、导出容器快照\n\n如果要导出本地某个容器，可以使用 **docker export** 命令：\n\n```sh\ndocker export fab > centos.tar\n```\n\n导出容器 fab 快照到本地文件 centos.tar。\n\n### 9、导入容器快照\n\n使用 docker import 从容器快照文件中再导入为镜像，以下实例将快照文件 centos.tar 导入到镜像 centos:v1：\n\n```sh\ncat docker/centos.tar | docker import - icentos:v1\n```\n\n此外，也可以通过指定 URL 或者某个目录来导入，例如：\n\n```\n$ docker import http://example.com/exampleimage.tgz example/imagerepo\n```\n\n![2022-03-06_211459](https://img.qinweizhao.com/2022/03/2022-03-06_211459.png)\n\n### 10、删除容器\n\n删除容器使用 **docker rm** 命令：\n\n```\n$ docker rm -f 1e560fca390\n```\n\n下面的命令可以清理掉所有处于终止状态的容器：\n\n```sh\ndocker container prune\n```\n\n### 11、文件拷贝\n\n如果我们需要将文件拷贝到容器内可以使用`cp`命令。\n\n```sh\ndocker cp 需要拷贝的文件或目录 容器名称:容器目录\n```\n\n也可以将文件从容器内拷贝出来。\n\n```sh\ndocker cp 容器名称:容器目录 需要拷贝的文件或目录\n```\n\n### 12、目录挂载\n\n我们可以在创建容器的时候，将宿主机的目录与容器内的目录进行映射，这样我们就可以通过修改宿主机某个目录的文件从而去影响容器，而且这个操作是双向绑定的，也就是说容器内的操作也会影响到宿主机，实现备份功能。\n\n但是容器被删除的时候，宿主机的内容并不会被删除。如果多个容器挂载同一个目录，其中一个容器被删除，其他容器的内容也不会受到影响。\n\n创建容器添加`-v`参数，格式为宿主机目录:容器目录，例如：\n\n```sh\ndocker run -di -v /home/ruoyi/data:/usr/local/data --name centos7-01 centos:7\n\n# 多目录挂载\ndocker run -di -v /宿主机目录:/容器目录 -v /宿主机目录2:/容器目录2 镜像名\n```\n\n#### 1. 匿名挂载\n\n匿名挂载只需要写容器目录即可，容器外对应的目录会在`/var/lib/docker/volumes`中生成。\n\n```sh\n# 匿名挂载\ndocker run -di -v /usr/local/data --name centos7-02 centos:7\n# 查看 volume 数据卷信息\ndocker volume ls\n```\n\n#### 2. 具名挂载\n\n具名挂载就是给数据卷起了个名字，容器外对应的目录会在`/var/lib/docker/volume`中生成。\n\n```sh\n# 匿名挂载\ndocker run -di -v docker_centos_data:/usr/local/data --name centos7-03 centos:7\n# 查看 volume 数据卷信息\ndocker volume ls\n```\n\n#### 3. 指定目录挂载\n\n之前挂载方式就属于指定目录挂载，这种方式的挂载不会在`/var/lib/docker/volume`目录生成内容。\n\n```sh\ndocker run -di -v /mydata/docker_centos/data:/usr/local/data --name centos7-01 centos:7\n# 多目录挂载\ndocker run -di -v /宿主机目录:/容器目录 -v /宿主机目录2:/容器目录2 镜像名\n```\n\n#### 4. 查看目录挂载关系\n\n通过`docker volume inspect`数据卷名称 可以查看该数据卷对应宿主机的目录地址。\n\n执行命令：`docker volume inspect docker_centos_data`\n\n通过`docker inspect`容器ID或名称 ，在返回的`JSON`节点中找到`Mounts`，可以查看详细的数据挂载信息。\n\n#### 5. 只读/读写\n\n```sh\n# 只读。只能通过修改宿主机内容实现对容器的数据管理。\ndocker run -it -v /宿主机目录:/容器目录:ro 镜像名\n\n# 读写，默认。宿主机和容器可以双向操作数据。\ndocker run -it -v /宿主机目录:/容器目录:rw 镜像名\n```\n\n### 11、其他\n\n更多命令直接输入 docker 命令来查看。\n\n可以通过命令 **docker command --help** 更深入的了解指定的 Docker 命令使用方法。\n\n例如我们要查看 **docker stats** 指令的具体使用方法：\n\n```sh\ndocker stats --help\n```\n\n![2022-03-06_212339](https://img.qinweizhao.com/2022/03/2022-03-06_212339.png)\n\n## 三、镜像使用\n\n> 当运行容器时，使用的镜像如果在本地中不存在，docker 就会自动从 docker 镜像仓库中下载，默认是从 Docker Hub 公共镜像源下载。镜像都是存储在 Docker 宿主机的 /var/lib/docker 目录下。\n\n### 1、列出镜像列表\n\n使用 **docker images** 列出本地主机上的镜像：\n\n![2022-03-06_212718](https://img.qinweizhao.com/2022/03/2022-03-06_212718.png)\n\n各个选项说明\n\n- **REPOSITORY:** 表示镜像的仓库源。\n- **TAG:** 镜像的标签。\n- **IMAGE ID:** 镜像ID。\n- **CREATED:** 镜像创建时间。\n- **SIZE:** 镜像大小。\n\n同一仓库源可以有多个 TAG，代表这个仓库源的不同个版本。当有多个不同的版本，我们使用 REPOSITORY:TAG 来定义不同的镜像。\n\n如果不指定一个镜像的版本标签，将默认使用 xxx:latest 镜像。\n\n### 2、获取一个新的镜像\n\n当本地主机上使用一个不存在的镜像时 Docker 就会自动下载这个镜像。如果想预先下载这个镜像，可以使用 docker pull 命令来下载它。\n\n### 3、查找镜像\n\n可以从 Docker Hub 网站来搜索镜像，Docker Hub 网址为： **https://hub.docker.com/**。\n\n我们也可以使用 docker search 命令来搜索镜像。比如我们需要一个 centos 镜像。我们可以通过 docker search 命令搜索 centos 来寻找适合我们的镜像。\n\n```sh\ndocker search centos\n```\n\n![2022-03-06_213408](https://img.qinweizhao.com/2022/03/2022-03-06_213408.png)\n\n**NAME:** 镜像仓库源的名称。\n\n**DESCRIPTION:** 镜像的描述。\n\n**OFFICIAL:** 是否 docker 官方发布。\n\n**STARS:** 类似 Github 里面的 star，表示点赞、喜欢的意思。\n\n**AUTOMATED:** 自动构建。\n\n### 4、删除镜像\n\n镜像删除使用 **docker rmi** 命令：\n\n```sh\ndocker rmi fab\n```\n\n### 5、创建镜像\n\n当从 docker 镜像仓库中下载的镜像不能满足我们的需求时，我们可以通过以下两种方式对镜像进行更改。\n\n- 1、从已经创建的容器中更新镜像，并且提交这个镜像。\n- 2、使用 Dockerfile 指令来创建一个新的镜像。\n\n#### 1. 更新镜像\n\n在运行的容器中新增一个 wz.txt 文件，然后退出：\n\n```sh\ntouch wz.txt\n```\n\n```sh\nexit\n```\n\n将定制后的容器通过命令 docker commit 来提交容器副本：\n\n```sh\ndocker commit -m=\"add file\" -a=\"qwz\" fab wzcentos\n```\n\n参数说明：\n\n- **-m:** 提交的描述信息。\n- **-a:** 指定镜像作者。\n- **fab:** 容器 ID。\n- **wzcentos:** 指定要创建的目标镜像名。\n\n#### 2. 构建镜像\n\n使用命令 docker build ， 从零开始来创建一个新的镜像。为此，我们需要创建一个 Dockerfile 文件，其中包含一组指令来告诉 Docker 如何构建我们的镜像。\n\n详细参考：Dockerfile\n\n```sh\ndocker build -t bcentos:b .\n```\n\n参数说明：\n\n- **-t** ：指定要创建的目标镜像名。\n- **.** ：Dockerfile 文件所在目录，可以指定Dockerfile 的绝对路径。\n\n### 6、设置镜像标签\n\n使用 docker tag 命令，为镜像添加一个新的标签：\n\n```sh\ndocker tag 339 wzcentos:a\n```\n\n![2022-03-07_105226](https://img.qinweizhao.com/2022/03/2022-03-07_105226.png)\n\n## 四、容器连接\n\n### 1、网络端口映射\n\n创建一个 web 应用的容器（镜像使用的是 halo 博客）：\n\n```sh\ndocker run -it -d --name halo -p 8090:8090 halohub/halo:latest\n```\n\n使用 **-p** 标识来指定容器端口绑定到主机端口，也可以指定容器绑定的网络地址，比如绑定 127.0.0.1：\n\n```sh\ndocker run -it -d --name ihalo -p 127.0.0.1:8090:8090 halohub/halo:latest\n```\n\n默认都是绑定 tcp 端口，如果要绑定 UDP 端口，可以在端口后面加上 **/udp**：\n\n```sh\ndocker run -it -d --name uhalo -p 127.0.0.1:9090:8090/udp halohub/halo:latest\n```\n\n**docker port** 命令可以让我们快捷地查看端口的绑定情况：\n\n```sh\ndocker port cb8\n```\n\n![2022-03-07_181506](https://img.qinweizhao.com/2022/03/2022-03-07_181506.png)\n\n### 2、容器互联\n\n端口映射并不是唯一把 docker 连接到另一个容器的方法。docker 有一个连接系统允许将多个容器连接在一起，共享连接信息。docker 连接会创建一个父子关系，其中父容器可以看到子容器的信息。\n\n#### 1. 新建网络\n\n```sh\ndocker network create -d bridge test-net\n```\n\n参数说明：\n\n**-d**：参数指定 Docker 网络类型，有 bridge、overlay（用于 Swarm mode）。\n\n#### 2. 连接容器\n\n```sh\ndocker run -itd --name test1 --network test-net centos /bin/bash\n```\n\n再运行一个容器并加入到 test-net 网络:\n\n```sh\ndocker run -itd --name test2 --network test-net centos /bin/bash\n```\n\n下面通过 ping 来证明 test1 容器和 test2 容器建立了互联关系。\n\n![2022-03-07_184643](https://img.qinweizhao.com/2022/03/2022-03-07_184643.png)\n\n如果有多个容器之间需要互相连接，推荐使用 Docker Compose。\n\n#### 3. 配置 DNS\n\n在宿主机（Linux）的 /etc/docker/daemon.json 文件中增加以下内容来设置全部容器的 DNS：\n\n```json\n{\n  \"dns\" : [\n    \"114.114.114.114\"\n  ]\n}\n```\n\n设置后，启动容器的 DNS 会自动配置为 114.114.114.114 和 8.8.8.8。\n\n配置完，需要重启 docker 才能生效。\n\n查看容器的 DNS 是否生效可以使用以下命令，它会输出容器的 DNS 信息：\n\n```sh\ndocker run -it --rm  centos  cat etc/resolv.conf\n```\n\n如果只想在指定的容器设置 DNS，则可以使用以下命令：\n\n```sh\ndocker run -it --rm -h host_centos  --dns=8.8.8.8 --dns-search=test.com centos\n```\n\n![2022-03-07_200016](https://img.qinweizhao.com/2022/03/2022-03-07_200016.png)\n\n参数说明：\n\n**--rm**：容器退出时自动清理容器内部的文件系统。\n\n**-h HOSTNAME 或者 --hostname=HOSTNAME**： 设定容器的主机名，它会被写到容器内的 /etc/hostname 和 /etc/hosts。\n\n**--dns=IP_ADDRESS**： 添加 DNS 服务器到容器的 /etc/resolv.conf 中，让容器用这个服务器来解析所有不在 /etc/hosts 中的主机名。\n\n**--dns-search=DOMAIN**： 设定容器的搜索域，当设定搜索域为 .example.com 时，在搜索一个名为 host 的主机时，DNS 不仅搜索 host，还会搜索 host.example.com。\n\n如果在容器启动时没有指定 **--dns** 和 **--dns-search**，Docker 会默认用宿主主机上的 /etc/resolv.conf 来配置容器的 DNS。\n\n## 五、仓库管理\n\n仓库（Repository）是集中存放镜像的地方，目前 Docker 官方维护了一个公共仓库 [Docker Hub](https://hub.docker.com/)。\n\n注册地址： [https://hub.docker.com](https://hub.docker.com/)\n\n### 1、登录和退出\n\n登录需要输入用户名和密码，登录成功后，我们就可以从 docker hub 上拉取自己账号下的全部镜像。\n\n```sh\ndocker login\n```\n\n退出 docker hub 可以使用以下命令：\n\n```sh\ndocker logout\n```\n\n### 2、推送镜像\n\n用户登录后，可以通过 docker push 命令将自己的镜像推送到 Docker Hub。\n\n```sh\ndocker push qinweizhao/centos:7\n```\n\n![2022-03-07_211825](https://img.qinweizhao.com/2022/03/2022-03-07_211825.png)\n\n结果：\n![2022-03-07_211913](https://img.qinweizhao.com/2022/03/2022-03-07_211913.png)\n', '', 'dockerde-shi-yong', 0, 'Docker 的使用Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从 Apache2.0 协议开源。Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接', '', '', 'Docker 的使用', 0, NULL, 48, 7423);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 72, '2022-03-08 20:24:48.671000', '2022-03-13 13:59:48.185000', b'0', '2022-03-13 13:59:48.174000', 0, '<h1 id=\"dockerfile\">Dockerfile</h1>\n<p>Dockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。</p>\n<h2 id=\"一指令详解\">一、指令详解</h2>\n<h3 id=\"1copy\">1、COPY</h3>\n<p>复制指令，从上下文目录中复制文件或者目录到容器里指定路径。</p>\n<p>格式：</p>\n<pre><code>COPY [--chown=&lt;user&gt;:&lt;group&gt;] &lt;源路径1&gt;...  &lt;目标路径&gt;\nCOPY [--chown=&lt;user&gt;:&lt;group&gt;] [&quot;&lt;源路径1&gt;&quot;,...  &quot;&lt;目标路径&gt;&quot;]\n</code></pre>\n<p><strong>[--chown=<user>:<group>]</strong>：可选参数，用户改变复制到容器内文件的拥有者和属组。</p>\n<p><strong>&lt;源路径&gt;</strong>：源文件或者源目录，这里可以是通配符表达式，其通配符规则要满足 Go 的 filepath.Match 规则。例如：</p>\n<pre><code>COPY hom* /mydir/\nCOPY hom?.txt /mydir/\n</code></pre>\n<p><strong>&lt;目标路径&gt;</strong>：容器内的指定路径，该路径不用事先建好，路径不存在的话，会自动创建。</p>\n<h3 id=\"2-add\">2、 ADD</h3>\n<p>ADD 指令和 COPY 的使用格类似（同样需求下，官方推荐使用 COPY）。功能也类似，不同之处如下：</p>\n<ul>\n<li>ADD 的优点：在执行 &lt;源文件&gt; 为 tar 压缩文件的话，压缩格式为 gzip, bzip2 以及 xz 的情况下，会自动复制并解压到 &lt;目标路径&gt;。</li>\n<li>ADD 的缺点：在不解压的前提下，无法复制 tar 压缩文件。会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。具体是否使用，可以根据是否需要自动解压来决定。</li>\n</ul>\n<h3 id=\"3-cmd\">3、 CMD</h3>\n<p>类似于 RUN 指令，用于运行程序，但二者运行的时间点不同:</p>\n<ul>\n<li>CMD 在docker run 时运行。</li>\n<li>RUN 是在 docker build。</li>\n</ul>\n<p><strong>作用</strong>：为启动的容器指定默认要运行的程序，程序运行结束，容器也就结束。CMD 指令指定的程序可被 docker run 命令行参数中指定要运行的程序所覆盖。</p>\n<p><strong>注意</strong>：如果 Dockerfile 中如果存在多个 CMD 指令，仅最后一个生效。</p>\n<p>格式：</p>\n<pre><code>CMD &lt;shell 命令&gt; \nCMD [&quot;&lt;可执行文件或命令&gt;&quot;,&quot;&lt;param1&gt;&quot;,&quot;&lt;param2&gt;&quot;,...] \nCMD [&quot;&lt;param1&gt;&quot;,&quot;&lt;param2&gt;&quot;,...]  # 该写法是为 ENTRYPOINT 指令指定的程序提供默认参数\n</code></pre>\n<p>推荐使用第二种格式，执行过程比较明确。第一种格式实际上在运行的过程中也会自动转换成第二种格式运行，并且默认可执行文件是 sh。</p>\n<h3 id=\"4entrypoint\">4、ENTRYPOINT</h3>\n<p>类似于 CMD 指令，但其不会被 docker run 的命令行参数指定的指令所覆盖，而且这些命令行参数会被当作参数送给 ENTRYPOINT 指令指定的程序。</p>\n<p>但是，如果运行 docker run 时使用了 --entrypoint 选项，将覆盖 ENTRYPOINT 指令指定的程序。</p>\n<p><strong>优点</strong>：在执行 docker run 的时候可以指定 ENTRYPOINT 运行所需的参数。</p>\n<p><strong>注意</strong>：如果 Dockerfile 中如果存在多个 ENTRYPOINT 指令，仅最后一个生效。</p>\n<p>格式：</p>\n<pre><code>ENTRYPOINT [&quot;&lt;executeable&gt;&quot;,&quot;&lt;param1&gt;&quot;,&quot;&lt;param2&gt;&quot;,...]\n</code></pre>\n<p>可以搭配 CMD 命令使用：一般是变参才会使用 CMD ，这里的 CMD 等于是在给 ENTRYPOINT 传参。</p>\n<h3 id=\"5env\">5、ENV</h3>\n<p>设置环境变量，定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。</p>\n<p>格式：</p>\n<pre><code>ENV &lt;key&gt; &lt;value&gt;\nENV &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...\n</code></pre>\n<p>以下示例设置 NODE_VERSION = 7.2.0 ， 在后续的指令中可以通过 $NODE_VERSION 引用：</p>\n<pre><code>ENV NODE_VERSION 7.2.0\n\nRUN curl -SLO &quot;https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz&quot; \\\n  &amp;&amp; curl -SLO &quot;https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc&quot;\n</code></pre>\n<h3 id=\"6arg\">6、ARG</h3>\n<p>构建参数，与 ENV 作用一致。不过作用域不一样。ARG 设置的环境变量仅对 Dockerfile 内有效，也就是说只有 docker build 的过程中有效，构建好的镜像内不存在此环境变量。</p>\n<p>构建命令 docker build 中可以用 --build-arg &lt;参数名&gt;=&lt;值&gt; 来覆盖。</p>\n<p>格式：</p>\n<pre><code>ARG &lt;参数名&gt;[=&lt;默认值&gt;]\n</code></pre>\n<h3 id=\"7volume\">7、VOLUME</h3>\n<p>定义匿名数据卷。在启动容器时忘记挂载数据卷，会自动挂载到匿名卷。</p>\n<p>作用：</p>\n<ul>\n<li>避免重要的数据，因容器重启而丢失，这是非常致命的。</li>\n<li>避免容器不断变大。</li>\n</ul>\n<p>格式：</p>\n<pre><code>VOLUME [&quot;&lt;路径1&gt;&quot;, &quot;&lt;路径2&gt;&quot;...]\nVOLUME &lt;路径&gt;\n</code></pre>\n<p>在启动容器 docker run 的时候，我们可以通过 -v 参数修改挂载点。</p>\n<h3 id=\"8expose\">8、EXPOSE</h3>\n<p>仅仅只是声明端口。</p>\n<p>作用：</p>\n<ul>\n<li>帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射。</li>\n<li>在运行时使用随机端口映射时，也就是 docker run -P 时，会自动随机映射 EXPOSE 的端口。</li>\n</ul>\n<p>格式：</p>\n<pre><code>EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...]\n</code></pre>\n<h3 id=\"9workdir\">9、WORKDIR</h3>\n<p>指定工作目录。用 WORKDIR 指定的工作目录，会在构建镜像的每一层中都存在。（WORKDIR 指定的工作目录，必须是提前创建好的）。</p>\n<p>docker build 构建镜像过程中的，每一个 RUN 命令都是新建的一层。只有通过 WORKDIR 创建的目录才会一直存在。</p>\n<p>格式：</p>\n<pre><code>WORKDIR &lt;工作目录路径&gt;\n</code></pre>\n<h3 id=\"10user\">10、USER</h3>\n<p>用于指定执行后续命令的用户和用户组，这边只是切换后续命令执行的用户（用户和用户组必须提前已经存在）。</p>\n<p>格式：</p>\n<pre><code>USER &lt;用户名&gt;[:&lt;用户组&gt;]\n</code></pre>\n<h3 id=\"11healthcheck\">11、HEALTHCHECK</h3>\n<p>用于指定某个程序或者指令来监控 docker 容器服务的运行状态。</p>\n<p>格式：</p>\n<pre><code>HEALTHCHECK [选项] CMD &lt;命令&gt;：设置检查容器健康状况的命令\nHEALTHCHECK NONE：如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令\n\nHEALTHCHECK [选项] CMD &lt;命令&gt; : 这边 CMD 后面跟随的命令使用，可以参考 CMD 的用法。\n</code></pre>\n<h3 id=\"12onbuild\">12、ONBUILD</h3>\n<p>用于延迟构建命令的执行。简单的说，就是 Dockerfile 里用 ONBUILD 指定的命令，在本次构建镜像的过程中不会执行（假设镜像为 test-build）。当有新的 Dockerfile 使用了之前构建的镜像 FROM test-build ，这时执行新镜像的 Dockerfile 构建时候，会执行 test-build 的 Dockerfile 里的 ONBUILD 指定的命令。</p>\n<p>格式：</p>\n<pre><code>ONBUILD &lt;其它指令&gt;\n</code></pre>\n<h3 id=\"13label\">13、LABEL</h3>\n<p>LABEL 指令用来给镜像添加一些元数据（metadata），以键值对的形式，语法格式如下：</p>\n<pre><code>LABEL &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; ...\n</code></pre>\n<p>比如我们可以添加镜像的作者：</p>\n<pre><code>LABEL org.opencontainers.image.authors=&quot;runoob&quot;\n</code></pre>\n<h2 id=\"二构建镜像\">二、构建镜像</h2>\n<p><code>Dockerfile</code>文件编写好以后，真正构建镜像时需要通过<code>docker build</code>命令。</p>\n<p><code>docker build</code>命令用于使用<code>Dockerfile</code>创建镜像。</p>\n<pre><code class=\"language-sh\"># 使用当前目录的 Dockerfile 创建镜像\ndocker build -t mycentos:7 .\n\n# 通过 -f Dockerfile 文件的位置创建镜像\ndocker build -f /home/ruoyi/docker/Dockerfile -t mycentos:7 .\n</code></pre>\n<ul>\n<li>-f：指定要使用的 Dockerfile 路径；</li>\n<li>--tag, -t：镜像的名字及标签，可以在一次构建中为一个镜像设置多个标签。</li>\n</ul>\n<h2 id=\"三操作示例\">三、操作示例</h2>\n<p>接下来我们通过基础镜像<code>centos:7</code>，在该镜像中安装<code>jdk</code>和<code>tomcat</code>以后将其制作为一个新的镜像<code>mycentos:7</code></p>\n<p>创建目录，编写<code>Dockerfile</code>文件</p>\n<pre><code class=\"language-sh\">mkdir -p /usr/local/`dockerfile`\n</code></pre>\n<p>执行命令：<code>vi Dockerfile</code>，写入信息。</p>\n<pre><code class=\"language-sh\"># 指明构建的新镜像是来自于`centos:7`基础镜像\nFROM centos:7\n# 通过镜像标签声明了作者信息\nLABEL maintainer=&quot;wz&quot;\n\n# 设置工作目录\nWORKDIR /usr/local\n# 新镜像构建成功以后创建指定目录\nRUN mkdir -p /usr/local/java &amp;&amp; mkdir -p /usr/local/tomcat\n# 拷贝文件到镜像中并解压\nADD jdk-8u111-linux-x64.tar.gz /usr/local/java\nADD apache-tomcat-8.5.27.tar.gz /usr/local/tomcat\n# 暴露容器运行时的 8080 监听端口给外部\nEXPOSE 8080\n# 设置容器内 JAVA_HOME 环境变量\nENV JAVA_HOME /usr/local/java/jdk1.8.0_111\nENV PATH $PATH:$JAVA_HOME/bin\n# 启动容器时启动 tomcat\nCMD [&quot;/usr/local/tomcat/apache-tomcat-8.5.27/bin/catalina.sh&quot;, &quot;run&quot;]\n</code></pre>\n<p>构建镜像</p>\n<pre><code class=\"language-sh\">docker build -f /home/ruoyi/docker/Dockerfile -t mycentos:test .\n</code></pre>\n<p>启动镜像</p>\n<pre><code class=\"language-sh\">docker run -di --name mycentos -p 8080:8080 mycentos:test\n</code></pre>\n<p>进入容器</p>\n<pre><code class=\"language-sh\">docker exec -it mycentos7 /bin/bash\n</code></pre>\n<h2 id=\"四构建历史\">四、构建历史</h2>\n<pre><code>docker history 镜像名称:标签|ID\ndocker history mycentos:7\n</code></pre>\n<h2 id=\"五附指令说明简洁版\">五、附：指令说明简洁版</h2>\n<blockquote>\n<ul>\n<li>FROM</li>\n</ul>\n<p>构建镜像基于哪个镜像</p>\n<ul>\n<li>MAINTAINER</li>\n</ul>\n<p>镜像维护者姓名或邮箱地址</p>\n<ul>\n<li>RUN</li>\n</ul>\n<p>构建镜像时运行的指令</p>\n<ul>\n<li>CMD</li>\n</ul>\n<p>运行容器时执行的shell环境</p>\n<ul>\n<li>VOLUME</li>\n</ul>\n<p>指定容器挂载点到宿主机自动生成的目录或其他容器</p>\n<ul>\n<li>USER</li>\n</ul>\n<p>为RUN、CMD、和 ENTRYPOINT 执行命令指定运行用户</p>\n<ul>\n<li>WORKDIR</li>\n</ul>\n<p>为 RUN、CMD、ENTRYPOINT、COPY 和 ADD 设置工作目录，就是切换目录</p>\n<ul>\n<li>HEALTHCHECH</li>\n</ul>\n<p>健康检查</p>\n<ul>\n<li>ARG</li>\n</ul>\n<p>构建时指定的一些参数</p>\n<ul>\n<li>EXPOSE</li>\n</ul>\n<p>声明容器的服务端口（仅仅是声明）</p>\n<ul>\n<li>ENV</li>\n</ul>\n<p>设置容器环境变量</p>\n<ul>\n<li>ADD</li>\n</ul>\n<p>拷贝文件或目录到容器中，如果是URL或压缩包便会自动下载或自动解压</p>\n<ul>\n<li>COPY</li>\n</ul>\n<p>拷贝文件或目录到容器中，跟ADD类似，但不具备自动下载或解压的功能</p>\n<ul>\n<li>ENTRYPOINT</li>\n</ul>\n<p>运行容器时执行的shell命令</p>\n</blockquote>\n', 0, NULL, NULL, '# Dockerfile\n\nDockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。\n\n## 一、指令详解\n\n### 1、COPY\n\n复制指令，从上下文目录中复制文件或者目录到容器里指定路径。\n\n格式：\n\n```\nCOPY [--chown=<user>:<group>] <源路径1>...  <目标路径>\nCOPY [--chown=<user>:<group>] [\"<源路径1>\",...  \"<目标路径>\"]\n```\n\n**[--chown=<user>:<group>]**：可选参数，用户改变复制到容器内文件的拥有者和属组。\n\n**<源路径>**：源文件或者源目录，这里可以是通配符表达式，其通配符规则要满足 Go 的 filepath.Match 规则。例如：\n\n```\nCOPY hom* /mydir/\nCOPY hom?.txt /mydir/\n```\n\n**<目标路径>**：容器内的指定路径，该路径不用事先建好，路径不存在的话，会自动创建。\n\n### 2、 ADD\n\nADD 指令和 COPY 的使用格类似（同样需求下，官方推荐使用 COPY）。功能也类似，不同之处如下：\n\n- ADD 的优点：在执行 <源文件> 为 tar 压缩文件的话，压缩格式为 gzip, bzip2 以及 xz 的情况下，会自动复制并解压到 <目标路径>。\n- ADD 的缺点：在不解压的前提下，无法复制 tar 压缩文件。会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。具体是否使用，可以根据是否需要自动解压来决定。\n\n### 3、 CMD\n\n类似于 RUN 指令，用于运行程序，但二者运行的时间点不同:\n\n- CMD 在docker run 时运行。\n- RUN 是在 docker build。\n\n**作用**：为启动的容器指定默认要运行的程序，程序运行结束，容器也就结束。CMD 指令指定的程序可被 docker run 命令行参数中指定要运行的程序所覆盖。\n\n**注意**：如果 Dockerfile 中如果存在多个 CMD 指令，仅最后一个生效。\n\n格式：\n\n```\nCMD <shell 命令> \nCMD [\"<可执行文件或命令>\",\"<param1>\",\"<param2>\",...] \nCMD [\"<param1>\",\"<param2>\",...]  # 该写法是为 ENTRYPOINT 指令指定的程序提供默认参数\n```\n\n推荐使用第二种格式，执行过程比较明确。第一种格式实际上在运行的过程中也会自动转换成第二种格式运行，并且默认可执行文件是 sh。\n\n### 4、ENTRYPOINT\n\n类似于 CMD 指令，但其不会被 docker run 的命令行参数指定的指令所覆盖，而且这些命令行参数会被当作参数送给 ENTRYPOINT 指令指定的程序。\n\n但是，如果运行 docker run 时使用了 --entrypoint 选项，将覆盖 ENTRYPOINT 指令指定的程序。\n\n**优点**：在执行 docker run 的时候可以指定 ENTRYPOINT 运行所需的参数。\n\n**注意**：如果 Dockerfile 中如果存在多个 ENTRYPOINT 指令，仅最后一个生效。\n\n格式：\n\n```\nENTRYPOINT [\"<executeable>\",\"<param1>\",\"<param2>\",...]\n```\n\n可以搭配 CMD 命令使用：一般是变参才会使用 CMD ，这里的 CMD 等于是在给 ENTRYPOINT 传参。\n\n### 5、ENV\n\n设置环境变量，定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。\n\n格式：\n\n```\nENV <key> <value>\nENV <key1>=<value1> <key2>=<value2>...\n```\n\n以下示例设置 NODE_VERSION = 7.2.0 ， 在后续的指令中可以通过 $NODE_VERSION 引用：\n\n```\nENV NODE_VERSION 7.2.0\n\nRUN curl -SLO \"https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz\" \\\n  && curl -SLO \"https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc\"\n```\n\n### 6、ARG\n\n构建参数，与 ENV 作用一致。不过作用域不一样。ARG 设置的环境变量仅对 Dockerfile 内有效，也就是说只有 docker build 的过程中有效，构建好的镜像内不存在此环境变量。\n\n构建命令 docker build 中可以用 --build-arg <参数名>=<值> 来覆盖。\n\n格式：\n\n```\nARG <参数名>[=<默认值>]\n```\n\n### 7、VOLUME\n\n定义匿名数据卷。在启动容器时忘记挂载数据卷，会自动挂载到匿名卷。\n\n作用：\n\n- 避免重要的数据，因容器重启而丢失，这是非常致命的。\n- 避免容器不断变大。\n\n格式：\n\n```\nVOLUME [\"<路径1>\", \"<路径2>\"...]\nVOLUME <路径>\n```\n\n在启动容器 docker run 的时候，我们可以通过 -v 参数修改挂载点。\n\n### 8、EXPOSE\n\n仅仅只是声明端口。\n\n作用：\n\n- 帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射。\n- 在运行时使用随机端口映射时，也就是 docker run -P 时，会自动随机映射 EXPOSE 的端口。\n\n格式：\n\n```\nEXPOSE <端口1> [<端口2>...]\n```\n\n### 9、WORKDIR\n\n指定工作目录。用 WORKDIR 指定的工作目录，会在构建镜像的每一层中都存在。（WORKDIR 指定的工作目录，必须是提前创建好的）。\n\ndocker build 构建镜像过程中的，每一个 RUN 命令都是新建的一层。只有通过 WORKDIR 创建的目录才会一直存在。\n\n格式：\n\n```\nWORKDIR <工作目录路径>\n```\n\n### 10、USER\n\n用于指定执行后续命令的用户和用户组，这边只是切换后续命令执行的用户（用户和用户组必须提前已经存在）。\n\n格式：\n\n```\nUSER <用户名>[:<用户组>]\n```\n\n### 11、HEALTHCHECK\n\n用于指定某个程序或者指令来监控 docker 容器服务的运行状态。\n\n格式：\n\n```\nHEALTHCHECK [选项] CMD <命令>：设置检查容器健康状况的命令\nHEALTHCHECK NONE：如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令\n\nHEALTHCHECK [选项] CMD <命令> : 这边 CMD 后面跟随的命令使用，可以参考 CMD 的用法。\n```\n\n### 12、ONBUILD\n\n用于延迟构建命令的执行。简单的说，就是 Dockerfile 里用 ONBUILD 指定的命令，在本次构建镜像的过程中不会执行（假设镜像为 test-build）。当有新的 Dockerfile 使用了之前构建的镜像 FROM test-build ，这时执行新镜像的 Dockerfile 构建时候，会执行 test-build 的 Dockerfile 里的 ONBUILD 指定的命令。\n\n格式：\n\n```\nONBUILD <其它指令>\n```\n\n### 13、LABEL\n\nLABEL 指令用来给镜像添加一些元数据（metadata），以键值对的形式，语法格式如下：\n\n```\nLABEL <key>=<value> <key>=<value> <key>=<value> ...\n```\n\n比如我们可以添加镜像的作者：\n\n```\nLABEL org.opencontainers.image.authors=\"runoob\"\n```\n\n## 二、构建镜像\n\n`Dockerfile`文件编写好以后，真正构建镜像时需要通过`docker build`命令。\n\n`docker build`命令用于使用`Dockerfile`创建镜像。\n\n```sh\n# 使用当前目录的 Dockerfile 创建镜像\ndocker build -t mycentos:7 .\n\n# 通过 -f Dockerfile 文件的位置创建镜像\ndocker build -f /home/ruoyi/docker/Dockerfile -t mycentos:7 .\n```\n\n- -f：指定要使用的 Dockerfile 路径；\n- --tag, -t：镜像的名字及标签，可以在一次构建中为一个镜像设置多个标签。\n\n## 三、操作示例\n\n接下来我们通过基础镜像`centos:7`，在该镜像中安装`jdk`和`tomcat`以后将其制作为一个新的镜像`mycentos:7`\n\n创建目录，编写`Dockerfile`文件\n\n```sh\nmkdir -p /usr/local/`dockerfile`\n```\n\n执行命令：`vi Dockerfile`，写入信息。\n\n```sh\n# 指明构建的新镜像是来自于`centos:7`基础镜像\nFROM centos:7\n# 通过镜像标签声明了作者信息\nLABEL maintainer=\"wz\"\n\n# 设置工作目录\nWORKDIR /usr/local\n# 新镜像构建成功以后创建指定目录\nRUN mkdir -p /usr/local/java && mkdir -p /usr/local/tomcat\n# 拷贝文件到镜像中并解压\nADD jdk-8u111-linux-x64.tar.gz /usr/local/java\nADD apache-tomcat-8.5.27.tar.gz /usr/local/tomcat\n# 暴露容器运行时的 8080 监听端口给外部\nEXPOSE 8080\n# 设置容器内 JAVA_HOME 环境变量\nENV JAVA_HOME /usr/local/java/jdk1.8.0_111\nENV PATH $PATH:$JAVA_HOME/bin\n# 启动容器时启动 tomcat\nCMD [\"/usr/local/tomcat/apache-tomcat-8.5.27/bin/catalina.sh\", \"run\"]\n```\n\n构建镜像\n\n```sh\ndocker build -f /home/ruoyi/docker/Dockerfile -t mycentos:test .\n```\n\n启动镜像\n\n```sh\ndocker run -di --name mycentos -p 8080:8080 mycentos:test\n```\n\n进入容器\n\n```sh\ndocker exec -it mycentos7 /bin/bash\n```\n\n## 四、构建历史\n\n```\ndocker history 镜像名称:标签|ID\ndocker history mycentos:7\n```\n\n## 五、附：指令说明简洁版\n\n>- FROM\n>\n>构建镜像基于哪个镜像\n>\n>- MAINTAINER\n>\n>镜像维护者姓名或邮箱地址\n>\n>- RUN\n>\n>构建镜像时运行的指令\n>\n>- CMD\n>\n>运行容器时执行的shell环境\n>\n>- VOLUME\n>\n>指定容器挂载点到宿主机自动生成的目录或其他容器\n>\n>- USER\n>\n>为RUN、CMD、和 ENTRYPOINT 执行命令指定运行用户\n>\n>- WORKDIR\n>\n>为 RUN、CMD、ENTRYPOINT、COPY 和 ADD 设置工作目录，就是切换目录\n>\n>- HEALTHCHECH\n>\n>健康检查\n>\n>- ARG\n>\n>构建时指定的一些参数\n>\n>- EXPOSE\n>\n>声明容器的服务端口（仅仅是声明）\n>\n>- ENV\n>\n>设置容器环境变量\n>\n>- ADD\n>\n>拷贝文件或目录到容器中，如果是URL或压缩包便会自动下载或自动解压\n>\n>- COPY\n>\n>拷贝文件或目录到容器中，跟ADD类似，但不具备自动下载或解压的功能\n>\n>- ENTRYPOINT\n>\n>运行容器时执行的shell命令', '', 'dockerfile', 0, 'DockerfileDockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。一、指令详解1、COPY复制指令，从上下文目录中复制文件或者目录到容器里指定路径。格式：COPY [--chown=&lt;user&gt;:&lt;group&gt;] &lt;源', '', '', 'Dockerfile', 0, NULL, 14, 4673);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 73, '2022-03-12 15:57:48.070000', '2022-03-12 22:46:19.707000', b'0', '2022-03-12 22:46:19.699000', 0, '<h1 id=\"calf-项目部署\">Calf 项目部署</h1>\n<h2 id=\"一部署说明\">一、部署说明</h2>\n<p>Calf 快速开发平台是一个前后分离的项目，将使用 Docker 部署在 CentOS 7 上。本次部署涉及 Nginx 和 Docker Compose。</p>\n<h2 id=\"二工具安装\">二、工具安装</h2>\n<h3 id=\"1安装-docker\">1、安装 Docker</h3>\n<p>参考 Docker 安装和配置。</p>\n<h3 id=\"2安装-docker-compose\">2、安装 Docker Compose</h3>\n<p>下载当前稳定版本：</p>\n<pre><code class=\"language-sh\">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose\n</code></pre>\n<p>因为Docker Compose存放在GitHub，可能不太稳定。可以通过 DaoCloud 加速下载</p>\n<pre><code class=\"language-sh\">curl -L https://get.daocloud.io/docker/compose/releases/download/1.29.2/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose\n</code></pre>\n<p>授权：</p>\n<pre><code class=\"language-sh\">sudo chmod +x /usr/local/bin/docker-compose\n</code></pre>\n<p>测试：</p>\n<pre><code class=\"language-sh\">docker-compose --version\n</code></pre>\n<h2 id=\"三项目打包\">三、项目打包</h2>\n<h3 id=\"1前端\">1、前端</h3>\n<p>修改 calf-frontend 目录下的 .env.production 文件：</p>\n<pre><code class=\"language-env\"># 生产环境配置\nENV = \'production\'\n\n# Calf 管理系统/生产环境\n# 设置为 /api 注意后面的 nginx 配置一致（代理到后端接口）\nVUE_APP_BASE_API = \'/api\'\n\n# 公共路径\nPUBLIC_PATH = \'\'\n</code></pre>\n<p>执行打包命令：</p>\n<pre><code class=\"language-sh\">npm run build\n</code></pre>\n<p>执行结束后生成一个 dist 文件夹，其中的文件即为需要的前端资源。</p>\n<h3 id=\"2后端\">2、后端</h3>\n<p>修改配置文件 application-prod.yml：</p>\n<pre><code class=\"language-yml\"># 项目启动端口\nserver:\n  servlet:\n    context-path: /\n  port: 8088\n  tomcat:\n    uri-encoding: utf-8\nspring:\n  datasource:\n    name: druidDataSource\n    type: com.alibaba.druid.pool.DruidDataSource\n    druid:\n      driver-class-name: com.mysql.cj.jdbc.Driver\n      url: jdbc:mysql://mysql:3306/calf?useUnicode=true&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=true&amp;serverTimezone=GMT%2B8\n      username: root\n      password: Qwz#1201\n      web-stat-filter:\n        enabled: true\n        url-pattern: /druid/*\n      stat-view-servlet:\n        allow:\n        enabled: true\n</code></pre>\n<p>application.yml ：</p>\n<pre><code class=\"language-yml\">spring:\n  profiles:\n    # 环境切换为 prod \n    active: prod\n</code></pre>\n<p>执行打包命令（跳过测试）：</p>\n<pre><code class=\"language-sh\">mvn clean package -Dmaven.test.skip=true\n</code></pre>\n<p>执行结束后 calf-start 模块中 target 下的 calf.jar 即为后端资源。</p>\n<h2 id=\"四编写文件\">四、编写文件</h2>\n<h3 id=\"1dockerfile-文件\">1、Dockerfile 文件</h3>\n<p>Dockerfile</p>\n<pre><code class=\"language-file\">FROM java:8\nEXPOSE 8088\nADD calf.jar app.jar\nRUN bash -c \'touch /app.jar\'\nENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;/app.jar&quot;]\n</code></pre>\n<p>命令解释：</p>\n<p>依赖 jdk8 环境，对外暴露8088，复制 calf.jar 到 docker 容器内并命名为 app.jar，最后是执行命令 java -jar /app.jar 。</p>\n<h3 id=\"2docker-composeyml-文件\">2、docker-compose.yml 文件</h3>\n<p>需要用到的有nginx、mysql 和后端项目，文件内容：</p>\n<pre><code class=\"language-yml\">version: &quot;3&quot;\nservices:\n  nginx: # 服务名称，用户自定义\n    image: nginx:latest  # 镜像版本\n    ports:\n      - &quot;88:80&quot;  # 暴露端口\n    volumes: # 挂载\n      - /home/share/calf/nginx/html:/usr/share/nginx/html\n      - /home/share/calf/nginx/conf:/etc/nginx\n    privileged: true # 这个必须要，解决nginx的文件调用的权限问题\n  mysql:\n    image: mysql:8.0.22\n    ports:\n      - &quot;3316:3306&quot;\n    environment: # 指定用户root的密码\n      - MYSQL_ROOT_PASSWORD=Qwz#1201\n  calf:\n    image: calf:latest\n    build: . # 表示以当前目录下的Dockerfile开始构建镜像\n    ports:\n      - &quot;8088:8088&quot;\n    depends_on:\n      - mysql\n</code></pre>\n<h2 id=\"五前置配置\">五、前置配置</h2>\n<p>因为需要用到 Nginx 并且要做文件挂载，所以可以先创建一个 Nginx 容器，将里面的文件拷贝出来，然后再构建我们最终需要的。</p>\n<p>拉取官方 Nginx 镜像：</p>\n<pre><code class=\"language-sh\">docker pull nginx\n</code></pre>\n<p>创建Nginx容器（因为服务器上已经有一个 Nginx 在运行了，所以用了 88 端口）：</p>\n<pre><code class=\"language-sh\">docker run -di --name nginx -p 88:80 nginx\n</code></pre>\n<p>将容器内的配置文件拷贝到指定目录（提前创建好目录）。</p>\n<pre><code class=\"language-sh\"># 创建目录\nmkdir -p /home/share/calf/nginx\n\n# 将容器内的配置文件拷贝到指定目录\ndocker cp nginx:/etc/nginx /home/share/calf/nginx/conf\n</code></pre>\n<p>终止并删除容器</p>\n<pre><code class=\"language-sh\">docker stop nginx\ndocker rm nginx\n</code></pre>\n<h2 id=\"六上传构建\">六、上传构建</h2>\n<h3 id=\"1前端-1\">1、前端</h3>\n<p>将前端项目打包得到的 dist 文件夹上传到 /home/share/calf/nginx/html 文件夹中。并修改 Nginx 配置文件（/home/share/calf/nginx/conf/conf.d/default.conf）:</p>\n<pre><code class=\"language-conf\">server {\n    listen       80;\n    server_name  localhost;\n\n    location / {\n        root   /usr/share/nginx/html;\n        index  index.html index.htm;\n    }\n    # 此处 需要与前端配置的一样才能正确代理到后端接口\n    location /api/ {\n        proxy_pass http://www.qinweizhao.com:8088/;\n    }\n\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n}\n</code></pre>\n<h3 id=\"2后端-1\">2、后端</h3>\n<p>将 docker-compose.yml、Dockerfile 和 后端项目 (calf.jar) 上传到同一目录下。执行命令：</p>\n<pre><code class=\"language-sh\">docker-compose up -d\n</code></pre>\n<p>-d 表示后台服务形式启动。</p>\n<p>等待构建完成后连接上数据库，手动创建一下数据库并导入 sql 文件。</p>\n<h2 id=\"七问题解决\">七、问题解决</h2>\n<p>访问</p>\n<p><a href=\"http://www.qinweizhao.com:88\">www.qinweizhao.com:88</a></p>\n<p>页面正常显示，但点击任意一个链接或者按钮或者刷新界面，这时候出现了404：</p>\n<p>刷新之后nginx就找不到路由了，因为 Vue 项目的入口是 index.html 文件，Nginx路由的时候都必须要先经过这个文件，所以我们得给nginx定义一下规则，让它匹配不到资源路径的时候，先去读取index.html，然后再路由。所以修改 Nginx 配置文件。具体操作就是找到 <strong>location /</strong>，添加上一行代码 <strong>try_files $uri $uri/ /index.html last</strong> 。如下：</p>\n<pre><code class=\"language-plain\">location / {\n  root   html;\n  try_files $uri $uri/ /index.html last;\n  index  index.html index.htm;\n}\n\n</code></pre>\n<p>try_files的语法规则： 格式1：try_files file … uri，表示按指定的file顺序查找存在的文件，并使用第一个找到的文件进行请求处理，last表示匹配不到就内部直接匹配最后一个。</p>\n<p>重启 Nginx 之后，再次刷新访问正常。</p>\n', 0, NULL, NULL, '# Calf 项目部署\n\n## 一、部署说明\n\nCalf 快速开发平台是一个前后分离的项目，将使用 Docker 部署在 CentOS 7 上。本次部署涉及 Nginx 和 Docker Compose。\n\n## 二、工具安装\n\n### 1、安装 Docker\n\n参考 Docker 安装和配置。\n\n### 2、安装 Docker Compose\n\n下载当前稳定版本：\n\n```sh\nsudo curl -L \"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\n```\n\n因为Docker Compose存放在GitHub，可能不太稳定。可以通过 DaoCloud 加速下载\n\n```sh\ncurl -L https://get.daocloud.io/docker/compose/releases/download/1.29.2/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose\n```\n\n授权：\n\n```sh\nsudo chmod +x /usr/local/bin/docker-compose\n```\n\n测试：\n\n```sh\ndocker-compose --version\n```\n\n## 三、项目打包\n\n### 1、前端\n\n修改 calf-frontend 目录下的 .env.production 文件：\n\n```env\n# 生产环境配置\nENV = \'production\'\n\n# Calf 管理系统/生产环境\n# 设置为 /api 注意后面的 nginx 配置一致（代理到后端接口）\nVUE_APP_BASE_API = \'/api\'\n\n# 公共路径\nPUBLIC_PATH = \'\'\n```\n\n执行打包命令：\n\n```sh\nnpm run build\n```\n\n执行结束后生成一个 dist 文件夹，其中的文件即为需要的前端资源。\n\n### 2、后端\n\n修改配置文件 application-prod.yml：\n\n```yml\n# 项目启动端口\nserver:\n  servlet:\n    context-path: /\n  port: 8088\n  tomcat:\n    uri-encoding: utf-8\nspring:\n  datasource:\n    name: druidDataSource\n    type: com.alibaba.druid.pool.DruidDataSource\n    druid:\n      driver-class-name: com.mysql.cj.jdbc.Driver\n      url: jdbc:mysql://mysql:3306/calf?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8\n      username: root\n      password: Qwz#1201\n      web-stat-filter:\n        enabled: true\n        url-pattern: /druid/*\n      stat-view-servlet:\n        allow:\n        enabled: true\n```\n\napplication.yml ：\n\n```yml\nspring:\n  profiles:\n    # 环境切换为 prod \n    active: prod\n```\n\n执行打包命令（跳过测试）：\n\n```sh\nmvn clean package -Dmaven.test.skip=true\n```\n\n执行结束后 calf-start 模块中 target 下的 calf.jar 即为后端资源。\n\n## 四、编写文件\n\n### 1、Dockerfile 文件\n\nDockerfile\n\n```file\nFROM java:8\nEXPOSE 8088\nADD calf.jar app.jar\nRUN bash -c \'touch /app.jar\'\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\n```\n\n命令解释：\n\n依赖 jdk8 环境，对外暴露8088，复制 calf.jar 到 docker 容器内并命名为 app.jar，最后是执行命令 java -jar /app.jar 。\n\n### 2、docker-compose.yml 文件\n\n需要用到的有nginx、mysql 和后端项目，文件内容：\n\n```yml\nversion: \"3\"\nservices:\n  nginx: # 服务名称，用户自定义\n    image: nginx:latest  # 镜像版本\n    ports:\n      - \"88:80\"  # 暴露端口\n    volumes: # 挂载\n      - /home/share/calf/nginx/html:/usr/share/nginx/html\n      - /home/share/calf/nginx/conf:/etc/nginx\n    privileged: true # 这个必须要，解决nginx的文件调用的权限问题\n  mysql:\n    image: mysql:8.0.22\n    ports:\n      - \"3316:3306\"\n    environment: # 指定用户root的密码\n      - MYSQL_ROOT_PASSWORD=Qwz#1201\n  calf:\n    image: calf:latest\n    build: . # 表示以当前目录下的Dockerfile开始构建镜像\n    ports:\n      - \"8088:8088\"\n    depends_on:\n      - mysql\n```\n\n## 五、前置配置\n\n因为需要用到 Nginx 并且要做文件挂载，所以可以先创建一个 Nginx 容器，将里面的文件拷贝出来，然后再构建我们最终需要的。\n\n拉取官方 Nginx 镜像：\n\n```sh\ndocker pull nginx\n```\n\n创建Nginx容器（因为服务器上已经有一个 Nginx 在运行了，所以用了 88 端口）：\n\n```sh\ndocker run -di --name nginx -p 88:80 nginx\n```\n\n将容器内的配置文件拷贝到指定目录（提前创建好目录）。\n\n```sh\n# 创建目录\nmkdir -p /home/share/calf/nginx\n\n# 将容器内的配置文件拷贝到指定目录\ndocker cp nginx:/etc/nginx /home/share/calf/nginx/conf\n```\n\n终止并删除容器\n\n```sh\ndocker stop nginx\ndocker rm nginx\n```\n\n## 六、上传构建\n\n### 1、前端\n\n将前端项目打包得到的 dist 文件夹上传到 /home/share/calf/nginx/html 文件夹中。并修改 Nginx 配置文件（/home/share/calf/nginx/conf/conf.d/default.conf）:\n\n```conf\nserver {\n    listen       80;\n    server_name  localhost;\n\n    location / {\n        root   /usr/share/nginx/html;\n        index  index.html index.htm;\n    }\n    # 此处 需要与前端配置的一样才能正确代理到后端接口\n    location /api/ {\n        proxy_pass http://www.qinweizhao.com:8088/;\n    }\n\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n}\n```\n\n### 2、后端\n\n将 docker-compose.yml、Dockerfile 和 后端项目 (calf.jar) 上传到同一目录下。执行命令：\n\n```sh\ndocker-compose up -d\n```\n\n-d 表示后台服务形式启动。\n\n等待构建完成后连接上数据库，手动创建一下数据库并导入 sql 文件。\n\n## 七、问题解决\n\n访问\n\nwww.qinweizhao.com:88\n\n页面正常显示，但点击任意一个链接或者按钮或者刷新界面，这时候出现了404：\n\n刷新之后nginx就找不到路由了，因为 Vue 项目的入口是 index.html 文件，Nginx路由的时候都必须要先经过这个文件，所以我们得给nginx定义一下规则，让它匹配不到资源路径的时候，先去读取index.html，然后再路由。所以修改 Nginx 配置文件。具体操作就是找到 **location /**，添加上一行代码 **try_files $uri $uri/ /index.html last** 。如下：\n\n```plain\nlocation / {\n  root   html;\n  try_files $uri $uri/ /index.html last;\n  index  index.html index.htm;\n}\n\n```\n\ntry_files的语法规则： 格式1：try_files file … uri，表示按指定的file顺序查找存在的文件，并使用第一个找到的文件进行请求处理，last表示匹配不到就内部直接匹配最后一个。\n\n重启 Nginx 之后，再次刷新访问正常。', '', 'calfxiang-mu-bu-shu', 0, 'Calf 项目部署一、部署说明Calf 快速开发平台是一个前后分离的项目，将使用 Docker 部署在 CentOS 7 上。本次部署涉及 Nginx 和 Docker Compose。二、工具安装1、安装 Dockeryum install docker验证：docker --version启动：', '', '', 'Calf 项目部署', 0, NULL, 11, 3417);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 74, '2022-03-12 17:07:26.974000', '2022-03-12 17:10:05.686000', b'0', '2022-03-12 17:10:05.674000', 0, '<h1 id=\"frp-实现内网穿透\">frp 实现内网穿透</h1>\n<h2 id=\"一简介\">一、简介</h2>\n<blockquote>\n<p>frp 是一个专注于内网穿透的高性能的反向代理应用，支持 TCP、UDP、HTTP、HTTPS 等多种协议。可以将内网服务以安全、便捷的方式通过具有公网 IP 节点的中转暴露到公网。</p>\n</blockquote>\n<p>类似的应用还有：花生壳、nat123、ngrok、frp。frp 项目地址：<a href=\"https://github.com/fatedier/frp\">https://github.com/fatedier/frp</a></p>\n<h2 id=\"二说明\">二、说明</h2>\n<p>此次实践是将本地的 Linux 虚拟机通过腾讯的轻量云（系统为 Linux）暴露给 Internet。</p>\n<h2 id=\"三下载\">三、下载</h2>\n<p>根据个人需求下载需要的版本，下载地址：<a href=\"https://github.com/fatedier/frp/releases\">https://github.com/fatedier/frp/releases</a> 。本次服务器和客户端都选择amd64版本。</p>\n<p><img src=\"https://img.qinweizhao.com/2022/03/2022-03-12_162802.png\" alt=\"2022-03-12_162802\" /></p>\n<p>下载完成，通过工具上传到服务器和本地虚拟机并解压。（上传到 /usr/local/）</p>\n<p>文件说明：</p>\n<pre><code class=\"language-txt\">frpc                    # 客户端二进制文件\nfrpc_full.ini           # 客户端配置文件完整示例\nfrpc.ini                # 客户端配置文件\nfrps                    # 服务端二进制文件\nfrps_full.ini           # 服务端配置文件完整示例\nfrps.in1                # 服务端配置文件\n</code></pre>\n<h2 id=\"四配置\">四、配置</h2>\n<h3 id=\"1server\">1、server</h3>\n<p>配置文件详解：</p>\n<pre><code class=\"language-ini\">[common]                        # 通用配置段\nbind_addr = 0.0.0.0             # 绑定的IP地址，支持IPv6，不指定默认0.0.0.0；\nbind_port = 7000                # 服务端口；\nbind_udp_port = 7001            # 是否使用udp端口，不使用删除或注释本行；\nkcp_bind_port = 7000            # 是否使用kcp协议，不使用删除或注释本行；\n# proxy_bind_addr = 127.0.0.1   # 代理监听地址，默认和bind_addr相同；\n\n# 虚拟主机\nvhost_http_port = 80            # 是否启用虚拟主机，端口可以和 bind_port 相同；\nvhost_https_port = 443\nvhost_http_timeout = 60         # 后端虚拟主机响应超时时间，默认为60s；\n\n# 开启 frps 仪表盘可以检查 frp 的状态和代理的统计信息。\ndashboard_addr = 0.0.0.0        # frps仪表盘绑定的地址；\ndashboard_port = 7500           # frps仪表盘绑定的端口；\ndashboard_user = admin          # 访问frps仪表盘的用户；     \ndashboard_pwd = admin           # 密码；\nassets_dir = ./static           # 仪表盘页面文件目录，只适用于调试；\n\n# 日志配置文件\nlog_file = ./frps.log           # 日志文件,不指定日志信息默认输出到控制台；\nlog_level = info                # 日志等级，可用等级“trace, debug, info, warn, error”；\nlog_max_days = 3                # 日志保存最大保存时间；\n\ntoken = 12345678                # 客户端与服务端通信的身份验证令牌\n\nheartbeat_timeout = 90          # 心跳检测超时时间，不建议修改默认配置，默认值为90；？\n\n# 指定允许客户端使用的端口范围，未指定则没有限制；\nallow_ports = 2000-3000,3001,3003,4000-50000\n\nmax_pool_count = 5              # 每个客户端连接服务端的最大连接数；\nmax_ports_per_client = 0        # 每个客户端最大可以使用的端口，0表示无限制\n\nauthentication_timeout = 900    # 客户端连接超时时间（秒），默认为900s；\n\nsubdomain_host = frps.com       # 自定义子域名，需要在dns中将域名解析为泛域名；\n\ntcp_mux = true                  # 是否使用tcp复用，默认为true；\n                                # frp只对同意客户端的连接进行复用；\n</code></pre>\n<p>本次配置示例：</p>\n<pre><code class=\"language-ini\">[common]\nbind_addr = 0.0.0.0\nbind_port = 7000\n\n# Dashboard configuration\ndashboard_addr = 0.0.0.0\ndashboard_port = 7500\ndashboard_user = admin\ndashboard_pwd = admin\n\n# logs\nlog_file = ./frps.log\nlog_level = info\nlog_max_days = 3\n\n# auth token\ntoken = 12345678\n\nmax_pool_count = 5\nmax_ports_per_client = 0\nauthentication_timeout = 900\ntcp_mux = true\n</code></pre>\n<h3 id=\"2client\">2、client</h3>\n<p>配置文件详解</p>\n<pre><code class=\"language-csharp\">[common]                        # 通用配置段\n\nserver_addr = 0.0.0.0           # server的IP地址；支持IPv6\nserver_port = 7000              # server的端口；\n\n# 如果要通过http或socks5代理连接frps，可以在此处或在全局环境变量中设置代理，只支持tcp协议；\n# http_proxy = http://user:passwd@192.168.1.128:8080\n# http_proxy = socks5://user:passwd@192.168.1.128:1080\n\n# 客户端日志\nlog_file = ./frpc.log       # 指定日志文件；\nlog_level = info            # 指定日志等级；\nlog_max_days = 3\n\ntoken = 12345678            # 客户端与服务端通信的身份验证令牌\n\n# 设置管理地址，用于通过http api控制frpc的动作，如重新加载；\nadmin_addr = 127.0.0.1\nadmin_port = 7400\nadmin_user = admin\nadmin_passwd = admin\n\npool_count = 5              # 初始连接池的数量，默认为0；\n\ntcp_mux = true              # 是否启用tcp复用，默认为true；\n\nuser = your_name            # frpc的用户名，用于区别不用frpc的代理；\n\nlogin_fail_exit = true      # 首次登录失败时退出程序，否则连续重新登录到frps；\n\nprotocol = tcp              # 用于连接服务器的协议，支持tcp、kcp、websocket;\n\ndns_server = 8.8.8.8        # 为frp 客户端指定一个单独的DNS服务器；\n\n# start = ssh,dns           # 要启用的代理的名字，默认为空表示所有代理；\n\n# 心跳检查\n# heartbeat_interval = 30   # 失败重试次数\n# heartbeat_timeout = 90    # 超时时间\n\n# 配置示例\n[ssh]                       # 代理配置段名称，如果配置user=your_name,则显示为your_name.ssh；\ntype = tcp                  # 协议默认tcp,可选tcp,udp,http,https,stcp,xtcp;\nlocal_ip = 127.0.0.1        # 本地地址\nlocal_port = 22             # 本地端口\nuse_encryption = false      # 是否加密服务端和客户端的通信信息，默认为不加密；\nuse_compression = false     # 是否开启压缩，默认不开启；\nremote_port = 6001          # 在服务器端开启的远程端口；\n# 负载均衡配置\ngroup = test_group          # 负载均衡组名，会将同一组内的客户端进行负载；\ngroup_key = 123456          # 负载均衡组密钥； \n# web示例\n[web01]\ntype = http                 # 使用http\nlocal_ip = 127.0.0.1        \nlocal_port = 80\nuse_encryption = false\nuse_compression = true\nhttp_user = admin           # 访问web01页面启用认证，用户名admin\nhttp_pwd = admin            # 密码\nsubdomain = web01           # 子域名，需要服务端配置了subdomain_host参数；\ncustom_domains = web02.example.com # web01的域名，和subdomain二选一\nlocations = /,/pic          # 指定用于路由的URL前缀；\nhost_header_rewrite = example.com   # 配置http包头域名重写;\nheader_X-From-Where = frp           # 添加包头信息X-From-Where: frp；\n</code></pre>\n<p>本次配置示例：</p>\n<pre><code class=\"language-ini\">[common]\nserver_addr = 42.192.49.72\nserver_port = 7000\nlog_file = ./frpc.log\nlog_level = info\nlog_max_days = 3\ntoken = 12345678\npool_count = 5\ntcp_mux = true\nlogin_fail_exit = true\nprotocol = tcp\n\n[ssh]\ntype = tcp\nlocal_ip = 192.168.79.79\nlocal_port = 22\nremote_port = 2222\n</code></pre>\n<p>注意，除了 start 之外，[common] 部分中的参数不会被修改。</p>\n<h2 id=\"五启动\">五、启动</h2>\n<h3 id=\"1server-1\">1、server</h3>\n<p>默认前台启动为提供后台允许参数：</p>\n<p>当前目录为 <strong>/usr/local/frp/</strong></p>\n<pre><code class=\"language-sh\">./frps -c frps.ini\n</code></pre>\n<h3 id=\"2client-1\">2、client</h3>\n<pre><code class=\"language-sh\">./frpc -c frpc.ini\n</code></pre>\n<p>此次实践结束。即可验证。</p>\n<h3 id=\"3注册为系统服务可选\">3、注册为系统服务（可选）</h3>\n<p>将 frp 注册为系统服务，这样就可以使用systemctl来控制启动。</p>\n<p>此处操作均为 frps，frpc 同理。</p>\n<pre><code class=\"language-sh\">vim /lib/systemd/system/frps.service\n</code></pre>\n<p>在 frps.service 里写入以下内容：</p>\n<pre><code>[Unit]\nDescription=fraps service\nAfter=network.target syslog.target\nWants=network.target\n\n[Service]\nType=simple\n#启动服务的命令（此处写你的frps的实际安装目录）\nExecStart=/usr/local/frp/frps -c /usr/local/frp/frps.ini\n\n[Install]\nWantedBy=multi-user.target\n</code></pre>\n<p>操作完成后 frps 的操作方法：</p>\n<pre><code>启动：systemctl start frps\n重启：systemctl restart frps\n停止：systemctl stop frps\n自启动：systemctl enable frps\n查看日志：systemctl status frps\n</code></pre>\n<h3 id=\"4可能出现的问题\">4、可能出现的问题</h3>\n<p>报错：</p>\n<pre><code>Warning: frps changed on disk. Run \'systemctl daemon-reload\' to reload units.\n</code></pre>\n<p>解决方案：</p>\n<pre><code class=\"language-sh\">systemctl daemon-reload\n</code></pre>\n<p>重启即可：</p>\n<pre><code class=\"language-sh\">systemctl  start  frps\n</code></pre>\n<h2 id=\"六结果\">六、结果</h2>\n<p><img src=\"https://img.qinweizhao.com/2022/03/2022-03-12_170313.png\" alt=\"2022-03-12_170313\" /></p>\n<p><img src=\"https://img.qinweizhao.com/2022/03/2022-03-12_170348.png\" alt=\"2022-03-12_170348\" /></p>\n', 0, NULL, NULL, '# frp 实现内网穿透\n\n## 一、简介\n\n> frp 是一个专注于内网穿透的高性能的反向代理应用，支持 TCP、UDP、HTTP、HTTPS 等多种协议。可以将内网服务以安全、便捷的方式通过具有公网 IP 节点的中转暴露到公网。\n\n类似的应用还有：花生壳、nat123、ngrok、frp。frp 项目地址：https://github.com/fatedier/frp\n\n## 二、说明\n\n此次实践是将本地的 Linux 虚拟机通过腾讯的轻量云（系统为 Linux）暴露给 Internet。\n\n## 三、下载\n\n根据个人需求下载需要的版本，下载地址：https://github.com/fatedier/frp/releases 。本次服务器和客户端都选择amd64版本。\n\n![2022-03-12_162802](https://img.qinweizhao.com/2022/03/2022-03-12_162802.png)\n\n下载完成，通过工具上传到服务器和本地虚拟机并解压。（上传到 /usr/local/）\n\n文件说明：\n\n```txt\nfrpc                    # 客户端二进制文件\nfrpc_full.ini           # 客户端配置文件完整示例\nfrpc.ini                # 客户端配置文件\nfrps                    # 服务端二进制文件\nfrps_full.ini           # 服务端配置文件完整示例\nfrps.in1                # 服务端配置文件\n```\n\n## 四、配置\n\n### 1、server\n\n配置文件详解：\n\n```ini\n[common]                        # 通用配置段\nbind_addr = 0.0.0.0             # 绑定的IP地址，支持IPv6，不指定默认0.0.0.0；\nbind_port = 7000                # 服务端口；\nbind_udp_port = 7001            # 是否使用udp端口，不使用删除或注释本行；\nkcp_bind_port = 7000            # 是否使用kcp协议，不使用删除或注释本行；\n# proxy_bind_addr = 127.0.0.1   # 代理监听地址，默认和bind_addr相同；\n\n# 虚拟主机\nvhost_http_port = 80            # 是否启用虚拟主机，端口可以和 bind_port 相同；\nvhost_https_port = 443\nvhost_http_timeout = 60         # 后端虚拟主机响应超时时间，默认为60s；\n\n# 开启 frps 仪表盘可以检查 frp 的状态和代理的统计信息。\ndashboard_addr = 0.0.0.0        # frps仪表盘绑定的地址；\ndashboard_port = 7500           # frps仪表盘绑定的端口；\ndashboard_user = admin          # 访问frps仪表盘的用户；     \ndashboard_pwd = admin           # 密码；\nassets_dir = ./static           # 仪表盘页面文件目录，只适用于调试；\n\n# 日志配置文件\nlog_file = ./frps.log           # 日志文件,不指定日志信息默认输出到控制台；\nlog_level = info                # 日志等级，可用等级“trace, debug, info, warn, error”；\nlog_max_days = 3                # 日志保存最大保存时间；\n\ntoken = 12345678                # 客户端与服务端通信的身份验证令牌\n\nheartbeat_timeout = 90          # 心跳检测超时时间，不建议修改默认配置，默认值为90；？\n\n# 指定允许客户端使用的端口范围，未指定则没有限制；\nallow_ports = 2000-3000,3001,3003,4000-50000\n\nmax_pool_count = 5              # 每个客户端连接服务端的最大连接数；\nmax_ports_per_client = 0        # 每个客户端最大可以使用的端口，0表示无限制\n\nauthentication_timeout = 900    # 客户端连接超时时间（秒），默认为900s；\n\nsubdomain_host = frps.com       # 自定义子域名，需要在dns中将域名解析为泛域名；\n\ntcp_mux = true                  # 是否使用tcp复用，默认为true；\n                                # frp只对同意客户端的连接进行复用；\n```\n\n本次配置示例：\n\n```ini\n[common]\nbind_addr = 0.0.0.0\nbind_port = 7000\n\n# Dashboard configuration\ndashboard_addr = 0.0.0.0\ndashboard_port = 7500\ndashboard_user = admin\ndashboard_pwd = admin\n\n# logs\nlog_file = ./frps.log\nlog_level = info\nlog_max_days = 3\n\n# auth token\ntoken = 12345678\n\nmax_pool_count = 5\nmax_ports_per_client = 0\nauthentication_timeout = 900\ntcp_mux = true\n```\n\n### 2、client\n\n配置文件详解\n\n```csharp\n[common]                        # 通用配置段\n\nserver_addr = 0.0.0.0           # server的IP地址；支持IPv6\nserver_port = 7000              # server的端口；\n\n# 如果要通过http或socks5代理连接frps，可以在此处或在全局环境变量中设置代理，只支持tcp协议；\n# http_proxy = http://user:passwd@192.168.1.128:8080\n# http_proxy = socks5://user:passwd@192.168.1.128:1080\n\n# 客户端日志\nlog_file = ./frpc.log       # 指定日志文件；\nlog_level = info            # 指定日志等级；\nlog_max_days = 3\n\ntoken = 12345678            # 客户端与服务端通信的身份验证令牌\n\n# 设置管理地址，用于通过http api控制frpc的动作，如重新加载；\nadmin_addr = 127.0.0.1\nadmin_port = 7400\nadmin_user = admin\nadmin_passwd = admin\n\npool_count = 5              # 初始连接池的数量，默认为0；\n\ntcp_mux = true              # 是否启用tcp复用，默认为true；\n\nuser = your_name            # frpc的用户名，用于区别不用frpc的代理；\n\nlogin_fail_exit = true      # 首次登录失败时退出程序，否则连续重新登录到frps；\n\nprotocol = tcp              # 用于连接服务器的协议，支持tcp、kcp、websocket;\n\ndns_server = 8.8.8.8        # 为frp 客户端指定一个单独的DNS服务器；\n\n# start = ssh,dns           # 要启用的代理的名字，默认为空表示所有代理；\n\n# 心跳检查\n# heartbeat_interval = 30   # 失败重试次数\n# heartbeat_timeout = 90    # 超时时间\n\n# 配置示例\n[ssh]                       # 代理配置段名称，如果配置user=your_name,则显示为your_name.ssh；\ntype = tcp                  # 协议默认tcp,可选tcp,udp,http,https,stcp,xtcp;\nlocal_ip = 127.0.0.1        # 本地地址\nlocal_port = 22             # 本地端口\nuse_encryption = false      # 是否加密服务端和客户端的通信信息，默认为不加密；\nuse_compression = false     # 是否开启压缩，默认不开启；\nremote_port = 6001          # 在服务器端开启的远程端口；\n# 负载均衡配置\ngroup = test_group          # 负载均衡组名，会将同一组内的客户端进行负载；\ngroup_key = 123456          # 负载均衡组密钥； \n# web示例\n[web01]\ntype = http                 # 使用http\nlocal_ip = 127.0.0.1        \nlocal_port = 80\nuse_encryption = false\nuse_compression = true\nhttp_user = admin           # 访问web01页面启用认证，用户名admin\nhttp_pwd = admin            # 密码\nsubdomain = web01           # 子域名，需要服务端配置了subdomain_host参数；\ncustom_domains = web02.example.com # web01的域名，和subdomain二选一\nlocations = /,/pic          # 指定用于路由的URL前缀；\nhost_header_rewrite = example.com   # 配置http包头域名重写;\nheader_X-From-Where = frp           # 添加包头信息X-From-Where: frp；\n```\n\n本次配置示例：\n\n```ini\n[common]\nserver_addr = 42.192.49.72\nserver_port = 7000\nlog_file = ./frpc.log\nlog_level = info\nlog_max_days = 3\ntoken = 12345678\npool_count = 5\ntcp_mux = true\nlogin_fail_exit = true\nprotocol = tcp\n\n[ssh]\ntype = tcp\nlocal_ip = 192.168.79.79\nlocal_port = 22\nremote_port = 2222\n```\n\n注意，除了 start 之外，[common] 部分中的参数不会被修改。\n\n## 五、启动\n\n### 1、server\n\n默认前台启动为提供后台允许参数：\n\n当前目录为 **/usr/local/frp/**\n\n```sh\n./frps -c frps.ini\n```\n\n### 2、client\n\n```sh\n./frpc -c frpc.ini\n```\n\n此次实践结束。即可验证。\n\n### 3、注册为系统服务（可选）\n\n将 frp 注册为系统服务，这样就可以使用systemctl来控制启动。\n\n此处操作均为 frps，frpc 同理。\n\n ```sh\n vim /lib/systemd/system/frps.service\n ```\n\n在 frps.service 里写入以下内容：\n\n```\n[Unit]\nDescription=fraps service\nAfter=network.target syslog.target\nWants=network.target\n\n[Service]\nType=simple\n#启动服务的命令（此处写你的frps的实际安装目录）\nExecStart=/usr/local/frp/frps -c /usr/local/frp/frps.ini\n\n[Install]\nWantedBy=multi-user.target\n```\n\n操作完成后 frps 的操作方法：\n\n```\n启动：systemctl start frps\n重启：systemctl restart frps\n停止：systemctl stop frps\n自启动：systemctl enable frps\n查看日志：systemctl status frps\n```\n\n### 4、可能出现的问题\n\n报错：\n\n```\nWarning: frps changed on disk. Run \'systemctl daemon-reload\' to reload units.\n```\n\n解决方案：\n\n```sh\nsystemctl daemon-reload\n```\n\n重启即可：\n\n```sh\nsystemctl  start  frps\n```\n\n## 六、结果\n\n![2022-03-12_170313](https://img.qinweizhao.com/2022/03/2022-03-12_170313.png)\n\n![2022-03-12_170348](https://img.qinweizhao.com/2022/03/2022-03-12_170348.png)\n', '', 'frpshi-xian-nei-wang-chuan-tou', 0, 'frp 实现内网穿透一、简介frp 是一个专注于内网穿透的高性能的反向代理应用，支持 TCP、UDP、HTTP、HTTPS 等多种协议。可以将内网服务以安全、便捷的方式通过具有公网 IP 节点的中转暴露到公网。类似的应用还有：花生壳、nat123、ngrok、frp。frp 项目地址：https:/', '', '', 'frp 实现内网穿透', 0, NULL, 14, 4231);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 75, '2022-03-12 22:47:04.093000', '2022-03-15 18:24:30.015000', b'0', '2022-03-15 18:24:30.005000', 0, '<h1 id=\"docker-compose\">Docker Compose</h1>\n<h2 id=\"一简介\">一、简介</h2>\n<blockquote>\n<p>Compose 是用于定义和运行多容器 Docker 应用程序的工具。通过 Compose，您可以使用 YML 文件来配置应用程序需要的所有服务。然后，使用一个命令，就可以从 YML 文件配置中创建并启动所有服务。</p>\n</blockquote>\n<p>Compose 使用的三个步骤：</p>\n<ul>\n<li>使用 Dockerfile 定义应用程序的环境。</li>\n<li>使用 docker-compose.yml 定义构成应用程序的服务，这样它们可以在隔离环境中一起运行。</li>\n<li>最后，执行 docker-compose up 命令来启动并运行整个应用程序。</li>\n</ul>\n<hr />\n<h2 id=\"二安装\">二、安装</h2>\n<p>Github 地址：<a href=\"https://github.com/docker/compose/releases\">https://github.com/docker/compose/releases</a> 。</p>\n<p>下载当前稳定版本：</p>\n<pre><code class=\"language-sh\">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose\n</code></pre>\n<p>要安装其他版本的 Compose，请替换 1.29.2 。</p>\n<p>因为Docker Compose 存放在 GitHub，可能不太稳定。可以通过 DaoCloud 加速下载</p>\n<pre><code class=\"language-sh\">curl -L https://get.daocloud.io/docker/compose/releases/download/1.29.2/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose\n</code></pre>\n<p>授权：</p>\n<pre><code class=\"language-sh\">sudo chmod +x /usr/local/bin/docker-compose\n</code></pre>\n<p>创建软链：</p>\n<pre><code class=\"language-sh\">ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose\n</code></pre>\n<p>测试：</p>\n<pre><code class=\"language-sh\">docker-compose --version\n</code></pre>\n<p><strong>注意</strong>： 对于 alpine，需要以下依赖包： py-pip，python-dev，libffi-dev，openssl-dev，gcc，libc-dev，和 make。</p>\n<p>Mac 和 Windows 的 Docker 桌面版和 Docker Toolbox 已经包括 Compose 和其他 Docker 应用程序，因此不需要单独安装 Compose。</p>\n<hr />\n<h2 id=\"三使用\">三、使用</h2>\n<p>省略：参考 Calf 项目部署。</p>\n<h2 id=\"四yml-配置指令\">四、yml 配置指令</h2>\n<h3 id=\"1version\">1、version</h3>\n<p>指定本 yml 依从的 compose 哪个版本制定的。</p>\n<h3 id=\"2build\">2、build</h3>\n<p>指定为构建镜像上下文路径：</p>\n<p>例如 webapp 服务，指定为从上下文路径 ./dir/Dockerfile 所构建的镜像：</p>\n<pre><code class=\"language-yaml\">version: &quot;3.7&quot;\nservices:\n  webapp:\n    build: ./dir\n</code></pre>\n<p>或者，作为具有在上下文指定的路径的对象，以及可选的 dockerfile 和 args ：</p>\n<pre><code class=\"language-yaml\">version: &quot;3.7&quot;\nservices:\n  webapp:\n    build:\n      context: ./dir\n      dockerfile: Dockerfile-alternate\n      args:\n        buildno: 1\n      labels:\n        - &quot;com.example.description=Accounting webapp&quot;\n        - &quot;com.example.department=Finance&quot;\n        - &quot;com.example.label-with-empty-value&quot;\n      target: prod\n</code></pre>\n<ul>\n<li>context：上下文路径。</li>\n<li>dockerfile：指定构建镜像的 Dockerfile 文件名。</li>\n<li>args：添加构建参数，这是只能在构建过程中访问的环境变量。</li>\n<li>labels：设置构建镜像的标签。</li>\n<li>target：多层构建，可以指定构建哪一层。</li>\n</ul>\n<h3 id=\"3cap-addcap-drop\">3、cap_add，cap_drop</h3>\n<p>添加或删除容器拥有的宿主机的内核功能。</p>\n<pre><code class=\"language-yaml\">cap_add:\n  - ALL # 开启全部权限\n\ncap_drop:\n  - SYS_PTRACE # 关闭 ptrace权限\n</code></pre>\n<h3 id=\"4cgroup-parent\">4、cgroup_parent</h3>\n<p>为容器指定父 cgroup 组，意味着将继承该组的资源限制。</p>\n<pre><code class=\"language-yaml\">cgroup_parent: m-executor-abcd\n</code></pre>\n<h3 id=\"5command\">5、command</h3>\n<p>覆盖容器启动的默认命令。</p>\n<pre><code class=\"language-yaml\">command: [&quot;bundle&quot;, &quot;exec&quot;, &quot;thin&quot;, &quot;-p&quot;, &quot;3000&quot;]\n</code></pre>\n<h3 id=\"6container-name\">6、container_name</h3>\n<p>指定自定义容器名称，而不是生成的默认名称。</p>\n<pre><code class=\"language-yaml\">container_name: my-web-container\n</code></pre>\n<h3 id=\"7depends-on\">7、depends_on</h3>\n<p>设置依赖关系。</p>\n<ul>\n<li>docker-compose up ：以依赖性顺序启动服务。在以下示例中，先启动 db 和 redis ，才会启动 web。</li>\n<li>docker-compose up SERVICE ：自动包含 SERVICE 的依赖项。在以下示例中，docker-compose up web 还将创建并启动 db 和 redis。</li>\n<li>docker-compose stop ：按依赖关系顺序停止服务。在以下示例中，web 在 db 和 redis 之前停止。</li>\n</ul>\n<pre><code class=\"language-yaml\">version: &quot;3.7&quot;\nservices:\n  web:\n    build: .\n    depends_on:\n      - db\n      - redis\n  redis:\n    image: redis\n  db:\n    image: postgres\n</code></pre>\n<p>注意：web 服务不会等待 redis db 完全启动 之后才启动。</p>\n<h3 id=\"8deploy\">8、deploy</h3>\n<p>指定与服务的部署和运行有关的配置。只在 swarm 模式下才会有用。</p>\n<pre><code class=\"language-yaml\">version: &quot;3.7&quot;\nservices:\n  redis:\n    image: redis:alpine\n    deploy:\n      mode：replicated\n      replicas: 6\n      endpoint_mode: dnsrr\n      labels: \n        description: &quot;This redis service label&quot;\n      resources:\n        limits:\n          cpus: \'0.50\'\n          memory: 50M\n        reservations:\n          cpus: \'0.25\'\n          memory: 20M\n      restart_policy:\n        condition: on-failure\n        delay: 5s\n        max_attempts: 3\n        window: 120s\n</code></pre>\n<p>可以选参数：</p>\n<p><strong>endpoint_mode</strong>：访问集群服务的方式。</p>\n<pre><code class=\"language-yaml\">endpoint_mode: vip \n# Docker 集群服务一个对外的虚拟 ip。所有的请求都会通过这个虚拟 ip 到达集群服务内部的机器。\nendpoint_mode: dnsrr\n# DNS 轮询（DNSRR）。所有的请求会自动轮询获取到集群 ip 列表中的一个 ip 地址。\n</code></pre>\n<p><strong>labels</strong>：在服务上设置标签。可以用容器上的 labels（跟 deploy 同级的配置） 覆盖 deploy 下的 labels。</p>\n<p><strong>mode</strong>：指定服务提供的模式。</p>\n<ul>\n<li>\n<p><strong>replicated</strong>：复制服务，复制指定服务到集群的机器上。</p>\n</li>\n<li>\n<p><strong>global</strong>：全局服务，服务将部署至集群的每个节点。</p>\n</li>\n<li>\n<p>图解：下图中黄色的方块是 replicated 模式的运行情况，灰色方块是 global 模式的运行情况。</p>\n<p><img src=\"https://img.qinweizhao.com/2022/03/2022-03-12_220237.png\" alt=\"2022-03-12_220237\" /></p>\n</li>\n</ul>\n<p><strong>replicas：mode</strong> 为 replicated 时，需要使用此参数配置具体运行的节点数量。</p>\n<p><strong>resources</strong>：配置服务器资源使用的限制，例如上例子，配置 redis 集群运行需要的 cpu 的百分比 和 内存的占用。避免占用资源过高出现异常。</p>\n<p><strong>restart_policy</strong>：配置如何在退出容器时重新启动容器。</p>\n<ul>\n<li>condition：可选 none，on-failure 或者 any（默认值：any）。</li>\n<li>delay：设置多久之后重启（默认值：0）。</li>\n<li>max_attempts：尝试重新启动容器的次数，超出次数，则不再尝试（默认值：一直重试）。</li>\n<li>window：设置容器重启超时时间（默认值：0）。</li>\n</ul>\n<p><strong>rollback_config</strong>：配置在更新失败的情况下应如何回滚服务。</p>\n<ul>\n<li>parallelism：一次要回滚的容器数。如果设置为0，则所有容器将同时回滚。</li>\n<li>delay：每个容器组回滚之间等待的时间（默认为0s）。</li>\n<li>failure_action：如果回滚失败，该怎么办。其中一个 continue 或者 pause（默认pause）。</li>\n<li>monitor：每个容器更新后，持续观察是否失败了的时间 (ns|us|ms|s|m|h)（默认为0s）。</li>\n<li>max_failure_ratio：在回滚期间可以容忍的故障率（默认为0）。</li>\n<li>order：回滚期间的操作顺序。其中一个 stop-first（串行回滚），或者 start-first（并行回滚）（默认 stop-first ）。</li>\n</ul>\n<p><strong>update_config</strong>：配置应如何更新服务，对于配置滚动更新很有用。</p>\n<ul>\n<li>parallelism：一次更新的容器数。</li>\n<li>delay：在更新一组容器之间等待的时间。</li>\n<li>failure_action：如果更新失败，该怎么办。其中一个 continue，rollback 或者pause （默认：pause）。</li>\n<li>monitor：每个容器更新后，持续观察是否失败了的时间 (ns|us|ms|s|m|h)（默认为0s）。</li>\n<li>max_failure_ratio：在更新过程中可以容忍的故障率。</li>\n<li>order：回滚期间的操作顺序。其中一个 stop-first（串行回滚），或者 start-first（并行回滚）（默认stop-first）。</li>\n</ul>\n<p><strong>注</strong>：仅支持 V3.4 及更高版本。</p>\n<h3 id=\"9devices\">9、devices</h3>\n<p>指定设备映射列表。</p>\n<pre><code class=\"language-yaml\">devices:\n  - &quot;/dev/ttyUSB0:/dev/ttyUSB0&quot;\n</code></pre>\n<h3 id=\"10dns\">10、dns</h3>\n<p>自定义 DNS 服务器，可以是单个值或列表的多个值。</p>\n<pre><code class=\"language-yaml\">dns: 8.8.8.8\n\ndns:\n  - 8.8.8.8\n  - 9.9.9.9\n</code></pre>\n<h3 id=\"11dns-search\">11、dns_search</h3>\n<p>自定义 DNS 搜索域。可以是单个值或列表。</p>\n<pre><code class=\"language-yaml\">dns_search: example.com\n\ndns_search:\n  - dc1.example.com\n  - dc2.example.com\n</code></pre>\n<h3 id=\"12entrypoint\">12、entrypoint</h3>\n<p>覆盖容器默认的 entrypoint。</p>\n<pre><code class=\"language-yaml\">entrypoint: /code/entrypoint.sh\n</code></pre>\n<p>也可以是以下格式：</p>\n<pre><code class=\"language-yaml\">entrypoint:\n    - php\n    - -d\n    - zend_extension=/usr/local/lib/php/extensions/no-debug-non-zts-20100525/xdebug.so\n    - -d\n    - memory_limit=-1\n    - vendor/bin/phpunit\n</code></pre>\n<h3 id=\"13env-file\">13、env_file</h3>\n<p>从文件添加环境变量。可以是单个值或列表的多个值。</p>\n<pre><code class=\"language-yaml\">env_file: .env\n</code></pre>\n<p>也可以是列表格式：</p>\n<pre><code class=\"language-yaml\">env_file:\n  - ./common.env\n  - ./apps/web.env\n  - /opt/secrets.env\n</code></pre>\n<h3 id=\"14environment\">14、environment</h3>\n<p>添加环境变量。您可以使用数组或字典、任何布尔值，布尔值需要用引号引起来，以确保 YML 解析器不会将其转换为 True 或 False。</p>\n<pre><code class=\"language-yaml\">environment:\n  RACK_ENV: development\n  SHOW: \'true\'\n</code></pre>\n<h3 id=\"15expose\">15、expose</h3>\n<p>暴露端口，但不映射到宿主机，只被连接的服务访问。</p>\n<p>仅可以指定内部端口为参数：</p>\n<pre><code class=\"language-yaml\">expose:\n - &quot;3000&quot;\n - &quot;8000&quot;\n</code></pre>\n<h3 id=\"16extra-hosts\">16、extra_hosts</h3>\n<p>添加主机名映射。类似 docker client --add-host。</p>\n<pre><code class=\"language-yaml\">extra_hosts:\n - &quot;somehost:162.242.195.82&quot;\n - &quot;otherhost:50.31.209.229&quot;\n</code></pre>\n<p>以上会在此服务的内部容器中 /etc/hosts 创建一个具有 ip 地址和主机名的映射关系：</p>\n<pre><code class=\"language-yaml\">162.242.195.82  somehost\n50.31.209.229   otherhost\n</code></pre>\n<h3 id=\"17healthcheck\">17、healthcheck</h3>\n<p>用于检测 docker 服务是否健康运行。</p>\n<pre><code class=\"language-yaml\">healthcheck:\n  test: [&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost&quot;] # 设置检测程序\n  interval: 1m30s # 设置检测间隔\n  timeout: 10s # 设置检测超时时间\n  retries: 3 # 设置重试次数\n  start_period: 40s # 启动后，多少秒开始启动检测程序\n</code></pre>\n<h3 id=\"18image\">18、image</h3>\n<p>指定容器运行的镜像。以下格式都可以：</p>\n<pre><code class=\"language-yaml\">image: redis\nimage: ubuntu:14.04\nimage: tutum/influxdb\nimage: example-registry.com:4000/postgresql\nimage: a4bc65fd # 镜像id\n</code></pre>\n<h3 id=\"19logging\">19、logging</h3>\n<p>服务的日志记录配置。</p>\n<p>driver：指定服务容器的日志记录驱动程序，默认值为json-file。有以下三个选项</p>\n<pre><code class=\"language-yaml\">driver: &quot;json-file&quot;\ndriver: &quot;syslog&quot;\ndriver: &quot;none&quot;\n</code></pre>\n<p>仅在 json-file 驱动程序下，可以使用以下参数，限制日志得数量和大小。</p>\n<pre><code class=\"language-yaml\">logging:\n  driver: json-file\n  options:\n    max-size: &quot;200k&quot; # 单个文件大小为200k\n    max-file: &quot;10&quot; # 最多10个文件\n</code></pre>\n<p>当达到文件限制上限，会自动删除旧得文件。</p>\n<p>syslog 驱动程序下，可以使用 syslog-address 指定日志接收地址。</p>\n<pre><code class=\"language-yaml\">logging:\n  driver: syslog\n  options:\n    syslog-address: &quot;tcp://192.168.0.42:123&quot;\n</code></pre>\n<h3 id=\"20network-mode\">20、network_mode</h3>\n<p>设置网络模式。</p>\n<pre><code class=\"language-yaml\">network_mode: &quot;bridge&quot;\nnetwork_mode: &quot;host&quot;\nnetwork_mode: &quot;none&quot;\nnetwork_mode: &quot;service:[service name]&quot;\nnetwork_mode: &quot;container:[container name/id]&quot;\n</code></pre>\n<p>networks</p>\n<p>配置容器连接的网络，引用顶级 networks 下的条目 。</p>\n<pre><code class=\"language-yaml\">services:\n  some-service:\n    networks:\n      some-network:\n        aliases:\n         - alias1\n      other-network:\n        aliases:\n         - alias2\nnetworks:\n  some-network:\n    # Use a custom driver\n    driver: custom-driver-1\n  other-network:\n    # Use a custom driver which takes special options\n    driver: custom-driver-2\n</code></pre>\n<p><strong>aliases</strong> ：同一网络上的其他容器可以使用服务名称或此别名来连接到对应容器的服务。</p>\n<h3 id=\"21restart\">21、restart</h3>\n<ul>\n<li>no：是默认的重启策略，在任何情况下都不会重启容器。</li>\n<li>always：容器总是重新启动。</li>\n<li>on-failure：在容器非正常退出时（退出状态非0），才会重启容器。</li>\n<li>unless-stopped：在容器退出时总是重启容器，但是不考虑在Docker守护进程启动时就已经停止了的容器</li>\n</ul>\n<pre><code class=\"language-yaml\">restart: &quot;no&quot;\nrestart: always\nrestart: on-failure\nrestart: unless-stopped\n</code></pre>\n<p>注：swarm 集群模式，请改用 restart_policy。</p>\n<h3 id=\"22secrets\">22、secrets</h3>\n<p>存储敏感数据，例如密码：</p>\n<pre><code class=\"language-yaml\">version: &quot;3.1&quot;\nservices:\n\nmysql:\n  image: mysql\n  environment:\n    MYSQL_ROOT_PASSWORD_FILE: /run/secrets/my_secret\n  secrets:\n    - my_secret\n\nsecrets:\n  my_secret:\n    file: ./my_secret.txt\n</code></pre>\n<h3 id=\"23security-opt\">23、security_opt</h3>\n<p>修改容器默认的 schema 标签。</p>\n<pre><code class=\"language-yaml\">security-opt：\n  - label:user:USER   # 设置容器的用户标签\n  - label:role:ROLE   # 设置容器的角色标签\n  - label:type:TYPE   # 设置容器的安全策略标签\n  - label:level:LEVEL  # 设置容器的安全等级标签\n</code></pre>\n<h3 id=\"24stop-grace-period\">24、stop_grace_period</h3>\n<p>指定在容器无法处理 SIGTERM (或者任何 stop_signal 的信号)，等待多久后发送 SIGKILL 信号关闭容器。</p>\n<pre><code class=\"language-yaml\">stop_grace_period: 1s # 等待 1 秒\nstop_grace_period: 1m30s # 等待 1 分 30 秒 \n</code></pre>\n<p>默认的等待时间是 10 秒。</p>\n<h3 id=\"25stop-signal\">25、stop_signal</h3>\n<p>设置停止容器的替代信号。默认情况下使用 SIGTERM 。</p>\n<p>以下示例，使用 SIGUSR1 替代信号 SIGTERM 来停止容器。</p>\n<pre><code class=\"language-yaml\">stop_signal: SIGUSR1\n</code></pre>\n<h3 id=\"26sysctls\">26、sysctls</h3>\n<p>设置容器中的内核参数，可以使用数组或字典格式。</p>\n<pre><code class=\"language-yaml\">sysctls:\n  net.core.somaxconn: 1024\n  net.ipv4.tcp_syncookies: 0\n\nsysctls:\n  - net.core.somaxconn=1024\n  - net.ipv4.tcp_syncookies=0\n</code></pre>\n<h3 id=\"27tmpfs\">27、tmpfs</h3>\n<p>在容器内安装一个临时文件系统。可以是单个值或列表的多个值。</p>\n<pre><code class=\"language-yaml\">tmpfs: /run\n\ntmpfs:\n  - /run\n  - /tmp\n</code></pre>\n<h3 id=\"28ulimits\">28、ulimits</h3>\n<p>覆盖容器默认的 ulimit。</p>\n<pre><code class=\"language-yaml\">ulimits:\n  nproc: 65535\n  nofile:\n    soft: 20000\n    hard: 40000\n</code></pre>\n<h3 id=\"29volumes\">29、volumes</h3>\n<p>将主机的数据卷或着文件挂载到容器里。</p>\n<pre><code class=\"language-yaml\">version: &quot;3.7&quot;\nservices:\n  db:\n    image: postgres:latest\n    volumes:\n      - &quot;/localhost/postgres.sock:/var/run/postgres/postgres.sock&quot;\n      - &quot;/localhost/data:/var/lib/postgresql/data&quot;\n</code></pre>\n', 0, NULL, NULL, '# Docker Compose\n\n## 一、简介\n\n> Compose 是用于定义和运行多容器 Docker 应用程序的工具。通过 Compose，您可以使用 YML 文件来配置应用程序需要的所有服务。然后，使用一个命令，就可以从 YML 文件配置中创建并启动所有服务。\n\nCompose 使用的三个步骤：\n\n- 使用 Dockerfile 定义应用程序的环境。\n- 使用 docker-compose.yml 定义构成应用程序的服务，这样它们可以在隔离环境中一起运行。\n- 最后，执行 docker-compose up 命令来启动并运行整个应用程序。\n\n------\n\n## 二、安装\n\nGithub 地址：https://github.com/docker/compose/releases 。\n\n下载当前稳定版本：\n\n```sh\nsudo curl -L \"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\n```\n\n要安装其他版本的 Compose，请替换 1.29.2 。\n\n因为Docker Compose 存放在 GitHub，可能不太稳定。可以通过 DaoCloud 加速下载\n\n```sh\ncurl -L https://get.daocloud.io/docker/compose/releases/download/1.29.2/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose\n```\n\n授权：\n\n```sh\nsudo chmod +x /usr/local/bin/docker-compose\n```\n\n创建软链：\n\n```sh\nln -s /usr/local/bin/docker-compose /usr/bin/docker-compose\n```\n\n测试：\n\n```sh\ndocker-compose --version\n```\n\n**注意**： 对于 alpine，需要以下依赖包： py-pip，python-dev，libffi-dev，openssl-dev，gcc，libc-dev，和 make。\n\nMac 和 Windows 的 Docker 桌面版和 Docker Toolbox 已经包括 Compose 和其他 Docker 应用程序，因此不需要单独安装 Compose。\n\n------\n\n## 三、使用\n\n省略：参考 Calf 项目部署。\n\n## 四、yml 配置指令\n\n### 1、version\n\n指定本 yml 依从的 compose 哪个版本制定的。\n\n### 2、build\n\n指定为构建镜像上下文路径：\n\n例如 webapp 服务，指定为从上下文路径 ./dir/Dockerfile 所构建的镜像：\n\n```yaml\nversion: \"3.7\"\nservices:\n  webapp:\n    build: ./dir\n```\n\n或者，作为具有在上下文指定的路径的对象，以及可选的 dockerfile 和 args ：\n\n```yaml\nversion: \"3.7\"\nservices:\n  webapp:\n    build:\n      context: ./dir\n      dockerfile: Dockerfile-alternate\n      args:\n        buildno: 1\n      labels:\n        - \"com.example.description=Accounting webapp\"\n        - \"com.example.department=Finance\"\n        - \"com.example.label-with-empty-value\"\n      target: prod\n```\n\n- context：上下文路径。\n- dockerfile：指定构建镜像的 Dockerfile 文件名。\n- args：添加构建参数，这是只能在构建过程中访问的环境变量。\n- labels：设置构建镜像的标签。\n- target：多层构建，可以指定构建哪一层。\n\n### 3、cap_add，cap_drop\n\n添加或删除容器拥有的宿主机的内核功能。\n\n```yaml\ncap_add:\n  - ALL # 开启全部权限\n\ncap_drop:\n  - SYS_PTRACE # 关闭 ptrace权限\n```\n\n### 4、cgroup_parent\n\n为容器指定父 cgroup 组，意味着将继承该组的资源限制。\n\n```yaml\ncgroup_parent: m-executor-abcd\n```\n\n### 5、command\n\n覆盖容器启动的默认命令。\n\n```yaml\ncommand: [\"bundle\", \"exec\", \"thin\", \"-p\", \"3000\"]\n```\n\n### 6、container_name\n\n指定自定义容器名称，而不是生成的默认名称。\n\n```yaml\ncontainer_name: my-web-container\n```\n\n### 7、depends_on\n\n设置依赖关系。\n\n- docker-compose up ：以依赖性顺序启动服务。在以下示例中，先启动 db 和 redis ，才会启动 web。\n- docker-compose up SERVICE ：自动包含 SERVICE 的依赖项。在以下示例中，docker-compose up web 还将创建并启动 db 和 redis。\n- docker-compose stop ：按依赖关系顺序停止服务。在以下示例中，web 在 db 和 redis 之前停止。\n\n```yaml\nversion: \"3.7\"\nservices:\n  web:\n    build: .\n    depends_on:\n      - db\n      - redis\n  redis:\n    image: redis\n  db:\n    image: postgres\n```\n\n注意：web 服务不会等待 redis db 完全启动 之后才启动。\n\n### 8、deploy\n\n指定与服务的部署和运行有关的配置。只在 swarm 模式下才会有用。\n\n```yaml\nversion: \"3.7\"\nservices:\n  redis:\n    image: redis:alpine\n    deploy:\n      mode：replicated\n      replicas: 6\n      endpoint_mode: dnsrr\n      labels: \n        description: \"This redis service label\"\n      resources:\n        limits:\n          cpus: \'0.50\'\n          memory: 50M\n        reservations:\n          cpus: \'0.25\'\n          memory: 20M\n      restart_policy:\n        condition: on-failure\n        delay: 5s\n        max_attempts: 3\n        window: 120s\n```\n\n可以选参数：\n\n**endpoint_mode**：访问集群服务的方式。\n\n```yaml\nendpoint_mode: vip \n# Docker 集群服务一个对外的虚拟 ip。所有的请求都会通过这个虚拟 ip 到达集群服务内部的机器。\nendpoint_mode: dnsrr\n# DNS 轮询（DNSRR）。所有的请求会自动轮询获取到集群 ip 列表中的一个 ip 地址。\n```\n\n**labels**：在服务上设置标签。可以用容器上的 labels（跟 deploy 同级的配置） 覆盖 deploy 下的 labels。\n\n**mode**：指定服务提供的模式。\n\n- **replicated**：复制服务，复制指定服务到集群的机器上。\n\n- **global**：全局服务，服务将部署至集群的每个节点。\n\n- 图解：下图中黄色的方块是 replicated 模式的运行情况，灰色方块是 global 模式的运行情况。\n\n  ![2022-03-12_220237](https://img.qinweizhao.com/2022/03/2022-03-12_220237.png)\n\n**replicas：mode** 为 replicated 时，需要使用此参数配置具体运行的节点数量。\n\n**resources**：配置服务器资源使用的限制，例如上例子，配置 redis 集群运行需要的 cpu 的百分比 和 内存的占用。避免占用资源过高出现异常。\n\n**restart_policy**：配置如何在退出容器时重新启动容器。\n\n- condition：可选 none，on-failure 或者 any（默认值：any）。\n- delay：设置多久之后重启（默认值：0）。\n- max_attempts：尝试重新启动容器的次数，超出次数，则不再尝试（默认值：一直重试）。\n- window：设置容器重启超时时间（默认值：0）。\n\n**rollback_config**：配置在更新失败的情况下应如何回滚服务。\n\n- parallelism：一次要回滚的容器数。如果设置为0，则所有容器将同时回滚。\n- delay：每个容器组回滚之间等待的时间（默认为0s）。\n- failure_action：如果回滚失败，该怎么办。其中一个 continue 或者 pause（默认pause）。\n- monitor：每个容器更新后，持续观察是否失败了的时间 (ns|us|ms|s|m|h)（默认为0s）。\n- max_failure_ratio：在回滚期间可以容忍的故障率（默认为0）。\n- order：回滚期间的操作顺序。其中一个 stop-first（串行回滚），或者 start-first（并行回滚）（默认 stop-first ）。\n\n**update_config**：配置应如何更新服务，对于配置滚动更新很有用。\n\n- parallelism：一次更新的容器数。\n- delay：在更新一组容器之间等待的时间。\n- failure_action：如果更新失败，该怎么办。其中一个 continue，rollback 或者pause （默认：pause）。\n- monitor：每个容器更新后，持续观察是否失败了的时间 (ns|us|ms|s|m|h)（默认为0s）。\n- max_failure_ratio：在更新过程中可以容忍的故障率。\n- order：回滚期间的操作顺序。其中一个 stop-first（串行回滚），或者 start-first（并行回滚）（默认stop-first）。\n\n**注**：仅支持 V3.4 及更高版本。\n\n### 9、devices\n\n指定设备映射列表。\n\n```yaml\ndevices:\n  - \"/dev/ttyUSB0:/dev/ttyUSB0\"\n```\n\n### 10、dns\n\n自定义 DNS 服务器，可以是单个值或列表的多个值。\n\n```yaml\ndns: 8.8.8.8\n\ndns:\n  - 8.8.8.8\n  - 9.9.9.9\n```\n\n### 11、dns_search\n\n自定义 DNS 搜索域。可以是单个值或列表。\n\n```yaml\ndns_search: example.com\n\ndns_search:\n  - dc1.example.com\n  - dc2.example.com\n```\n\n### 12、entrypoint\n\n覆盖容器默认的 entrypoint。\n\n```yaml\nentrypoint: /code/entrypoint.sh\n```\n\n也可以是以下格式：\n\n```yaml\nentrypoint:\n    - php\n    - -d\n    - zend_extension=/usr/local/lib/php/extensions/no-debug-non-zts-20100525/xdebug.so\n    - -d\n    - memory_limit=-1\n    - vendor/bin/phpunit\n```\n\n### 13、env_file\n\n从文件添加环境变量。可以是单个值或列表的多个值。\n\n```yaml\nenv_file: .env\n```\n\n也可以是列表格式：\n\n```yaml\nenv_file:\n  - ./common.env\n  - ./apps/web.env\n  - /opt/secrets.env\n```\n\n### 14、environment\n\n添加环境变量。您可以使用数组或字典、任何布尔值，布尔值需要用引号引起来，以确保 YML 解析器不会将其转换为 True 或 False。\n\n```yaml\nenvironment:\n  RACK_ENV: development\n  SHOW: \'true\'\n```\n\n### 15、expose\n\n暴露端口，但不映射到宿主机，只被连接的服务访问。\n\n仅可以指定内部端口为参数：\n\n```yaml\nexpose:\n - \"3000\"\n - \"8000\"\n```\n\n### 16、extra_hosts\n\n添加主机名映射。类似 docker client --add-host。\n\n```yaml\nextra_hosts:\n - \"somehost:162.242.195.82\"\n - \"otherhost:50.31.209.229\"\n```\n\n以上会在此服务的内部容器中 /etc/hosts 创建一个具有 ip 地址和主机名的映射关系：\n\n```yaml\n162.242.195.82  somehost\n50.31.209.229   otherhost\n```\n\n### 17、healthcheck\n\n用于检测 docker 服务是否健康运行。\n\n```yaml\nhealthcheck:\n  test: [\"CMD\", \"curl\", \"-f\", \"http://localhost\"] # 设置检测程序\n  interval: 1m30s # 设置检测间隔\n  timeout: 10s # 设置检测超时时间\n  retries: 3 # 设置重试次数\n  start_period: 40s # 启动后，多少秒开始启动检测程序\n```\n\n### 18、image\n\n指定容器运行的镜像。以下格式都可以：\n\n```yaml\nimage: redis\nimage: ubuntu:14.04\nimage: tutum/influxdb\nimage: example-registry.com:4000/postgresql\nimage: a4bc65fd # 镜像id\n```\n\n### 19、logging\n\n服务的日志记录配置。\n\ndriver：指定服务容器的日志记录驱动程序，默认值为json-file。有以下三个选项\n\n```yaml\ndriver: \"json-file\"\ndriver: \"syslog\"\ndriver: \"none\"\n```\n\n仅在 json-file 驱动程序下，可以使用以下参数，限制日志得数量和大小。\n\n```yaml\nlogging:\n  driver: json-file\n  options:\n    max-size: \"200k\" # 单个文件大小为200k\n    max-file: \"10\" # 最多10个文件\n```\n\n当达到文件限制上限，会自动删除旧得文件。\n\nsyslog 驱动程序下，可以使用 syslog-address 指定日志接收地址。\n\n```yaml\nlogging:\n  driver: syslog\n  options:\n    syslog-address: \"tcp://192.168.0.42:123\"\n```\n\n### 20、network_mode\n\n设置网络模式。\n\n```yaml\nnetwork_mode: \"bridge\"\nnetwork_mode: \"host\"\nnetwork_mode: \"none\"\nnetwork_mode: \"service:[service name]\"\nnetwork_mode: \"container:[container name/id]\"\n```\n\nnetworks\n\n配置容器连接的网络，引用顶级 networks 下的条目 。\n\n```yaml\nservices:\n  some-service:\n    networks:\n      some-network:\n        aliases:\n         - alias1\n      other-network:\n        aliases:\n         - alias2\nnetworks:\n  some-network:\n    # Use a custom driver\n    driver: custom-driver-1\n  other-network:\n    # Use a custom driver which takes special options\n    driver: custom-driver-2\n```\n\n**aliases** ：同一网络上的其他容器可以使用服务名称或此别名来连接到对应容器的服务。\n\n### 21、restart\n\n- no：是默认的重启策略，在任何情况下都不会重启容器。\n- always：容器总是重新启动。\n- on-failure：在容器非正常退出时（退出状态非0），才会重启容器。\n- unless-stopped：在容器退出时总是重启容器，但是不考虑在Docker守护进程启动时就已经停止了的容器\n\n```yaml\nrestart: \"no\"\nrestart: always\nrestart: on-failure\nrestart: unless-stopped\n```\n\n注：swarm 集群模式，请改用 restart_policy。\n\n### 22、secrets\n\n存储敏感数据，例如密码：\n\n```yaml\nversion: \"3.1\"\nservices:\n\nmysql:\n  image: mysql\n  environment:\n    MYSQL_ROOT_PASSWORD_FILE: /run/secrets/my_secret\n  secrets:\n    - my_secret\n\nsecrets:\n  my_secret:\n    file: ./my_secret.txt\n```\n\n### 23、security_opt\n\n修改容器默认的 schema 标签。\n\n```yaml\nsecurity-opt：\n  - label:user:USER   # 设置容器的用户标签\n  - label:role:ROLE   # 设置容器的角色标签\n  - label:type:TYPE   # 设置容器的安全策略标签\n  - label:level:LEVEL  # 设置容器的安全等级标签\n```\n\n### 24、stop_grace_period\n\n指定在容器无法处理 SIGTERM (或者任何 stop_signal 的信号)，等待多久后发送 SIGKILL 信号关闭容器。\n\n```yaml\nstop_grace_period: 1s # 等待 1 秒\nstop_grace_period: 1m30s # 等待 1 分 30 秒 \n```\n\n默认的等待时间是 10 秒。\n\n### 25、stop_signal\n\n设置停止容器的替代信号。默认情况下使用 SIGTERM 。\n\n以下示例，使用 SIGUSR1 替代信号 SIGTERM 来停止容器。\n\n```yaml\nstop_signal: SIGUSR1\n```\n\n### 26、sysctls\n\n设置容器中的内核参数，可以使用数组或字典格式。\n\n```yaml\nsysctls:\n  net.core.somaxconn: 1024\n  net.ipv4.tcp_syncookies: 0\n\nsysctls:\n  - net.core.somaxconn=1024\n  - net.ipv4.tcp_syncookies=0\n```\n\n### 27、tmpfs\n\n在容器内安装一个临时文件系统。可以是单个值或列表的多个值。\n\n```yaml\ntmpfs: /run\n\ntmpfs:\n  - /run\n  - /tmp\n```\n\n### 28、ulimits\n\n覆盖容器默认的 ulimit。\n\n```yaml\nulimits:\n  nproc: 65535\n  nofile:\n    soft: 20000\n    hard: 40000\n```\n\n### 29、volumes\n\n将主机的数据卷或着文件挂载到容器里。\n\n```yaml\nversion: \"3.7\"\nservices:\n  db:\n    image: postgres:latest\n    volumes:\n      - \"/localhost/postgres.sock:/var/run/postgres/postgres.sock\"\n      - \"/localhost/data:/var/lib/postgresql/data\"\n```\n', '', 'dockercompose', 0, 'Docker Compose一、简介Compose 是用于定义和运行多容器 Docker 应用程序的工具。通过 Compose，您可以使用 YML 文件来配置应用程序需要的所有服务。然后，使用一个命令，就可以从 YML 文件配置中创建并启动所有服务。Compose 使用的三个步骤：使用 Docker', '', '', 'Docker Compose', 0, NULL, 12, 7387);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 76, '2022-03-12 22:51:53.337000', '2022-03-12 22:52:07.180000', b'0', '2022-03-12 22:52:07.164000', 0, '<h1 id=\"centos-7-安装和配置-docker\">CentOS 7 安装和配置 Docker</h1>\n<h2 id=\"一文档\">一、文档</h2>\n<p>官方文档：<a href=\"https://docs.docker.com/get-docker\">https://docs.docker.com/get-docker</a> 。</p>\n<h2 id=\"二安装\">二、安装</h2>\n<h3 id=\"1卸载\">1、卸载</h3>\n<p>Docker 的旧版本被称为 Docker 或 Docker Engine 。如果安装了Docker或Docker Engine，需要先卸载：</p>\n<pre><code class=\"language-sh\">yum remove docker \\\n                  docker-client \\\n                  docker-client-latest \\\n                  docker-common \\\n                  docker-latest \\\n                  docker-latest-logrotate \\\n                  docker-logrotate \\\n                  docker-engine\n</code></pre>\n<h3 id=\"2安装软件包\">2、安装软件包</h3>\n<p>安装所需的软件包：</p>\n<pre><code class=\"language-sh\">yum install -y yum-utils\n</code></pre>\n<h3 id=\"3设置存储库\">3、设置存储库</h3>\n<p>官方地址：</p>\n<pre><code class=\"language-sh\"># 官方地址（比较慢）\nyum-config-manager \\\n    --add-repo \\\n    https://download.docker.com/linux/centos/docker-ce.repo\n</code></pre>\n<p>或（建议）：</p>\n<pre><code class=\"language-sh\"># 阿里云地址（国内地址，相对更快）\nyum-config-manager \\\n    --add-repo \\\n    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n</code></pre>\n<h3 id=\"4安装-docker-引擎\">4、安装 Docker 引擎</h3>\n<pre><code class=\"language-sh\">yum install docker-ce docker-ce-cli containerd.io\n</code></pre>\n<h3 id=\"5验证\">5、验证</h3>\n<pre><code class=\"language-sha\">docker --version\n</code></pre>\n<h3 id=\"6启动\">6、启动</h3>\n<pre><code class=\"language-sh\">systemctl start docker\n</code></pre>\n<h2 id=\"三配置\">三、配置</h2>\n<p>Docker 默认拉取镜像是从这里拉取(<a href=\"https://hub.docker.com\">https://hub.docker.com</a>)，国外地址拉取的速度比较慢。</p>\n<p>国内从 DockerHub 拉取镜像有时会遇到困难，此时可以配置镜像加速器。Docker 官方和国内很多云服务商都提供了国内加速器服务，例如：</p>\n<ul>\n<li>科大镜像：<strong><a href=\"https://docker.mirrors.ustc.edu.cn/\">https://docker.mirrors.ustc.edu.cn/</a></strong></li>\n<li>网易：<strong><a href=\"https://hub-mirror.c.163.com/\">https://hub-mirror.c.163.com/</a></strong></li>\n<li>阿里云：<strong><a href=\"https://&lt;\">https://&lt;</a>你的ID&gt;.mirror.aliyuncs.com</strong></li>\n<li>七牛云加速器：<strong><a href=\"https://reg-mirror.qiniu.com\">https://reg-mirror.qiniu.com</a></strong></li>\n</ul>\n<p>当配置某一个加速器地址之后，若发现拉取不到镜像，请切换到另一个加速器地址。国内各大云服务商均提供了 Docker 镜像加速服务，建议根据运行 Docker 的云平台选择对应的镜像加速服务。</p>\n<p>阿里云镜像获取地址：<a href=\"https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors，并有具体的操作方法：\">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors，并有具体的操作方法：</a></p>\n<p><img src=\"https://img.qinweizhao.com/2022/03/2022-03-12_223214.png\" alt=\"2022-03-12_223214\" /></p>\n', 0, NULL, NULL, '# CentOS 7 安装和配置 Docker\n\n## 一、文档\n\n官方文档：https://docs.docker.com/get-docker 。\n\n## 二、安装\n\n### 1、卸载\n\nDocker 的旧版本被称为 Docker 或 Docker Engine 。如果安装了Docker或Docker Engine，需要先卸载：\n\n```sh\nyum remove docker \\\n                  docker-client \\\n                  docker-client-latest \\\n                  docker-common \\\n                  docker-latest \\\n                  docker-latest-logrotate \\\n                  docker-logrotate \\\n                  docker-engine\n```\n\n### 2、安装软件包\n\n安装所需的软件包：\n\n```sh\nyum install -y yum-utils\n```\n\n### 3、设置存储库\n\n官方地址：\n\n```sh\n# 官方地址（比较慢）\nyum-config-manager \\\n    --add-repo \\\n    https://download.docker.com/linux/centos/docker-ce.repo\n```\n\n或（建议）：\n\n```sh\n# 阿里云地址（国内地址，相对更快）\nyum-config-manager \\\n    --add-repo \\\n    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n```\n\n### 4、安装 Docker 引擎\n\n```sh\nyum install docker-ce docker-ce-cli containerd.io\n```\n\n### 5、验证\n\n```sha\ndocker --version\n```\n\n### 6、启动\n\n```sh\nsystemctl start docker\n```\n\n## 三、配置\n\nDocker 默认拉取镜像是从这里拉取(https://hub.docker.com)，国外地址拉取的速度比较慢。\n\n国内从 DockerHub 拉取镜像有时会遇到困难，此时可以配置镜像加速器。Docker 官方和国内很多云服务商都提供了国内加速器服务，例如：\n\n- 科大镜像：**https://docker.mirrors.ustc.edu.cn/**\n- 网易：**https://hub-mirror.c.163.com/**\n- 阿里云：**https://<你的ID>.mirror.aliyuncs.com**\n- 七牛云加速器：**https://reg-mirror.qiniu.com**\n\n当配置某一个加速器地址之后，若发现拉取不到镜像，请切换到另一个加速器地址。国内各大云服务商均提供了 Docker 镜像加速服务，建议根据运行 Docker 的云平台选择对应的镜像加速服务。\n\n阿里云镜像获取地址：https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors，并有具体的操作方法：\n\n![2022-03-12_223214](https://img.qinweizhao.com/2022/03/2022-03-12_223214.png)\n\n\n\n', '', 'centos7an-zhuang-he-pei-zhi-docker', 0, 'CentOS 7 安装和配置 Docker一、文档官方文档：https://docs.docker.com/get-docker 。二、安装1、卸载Docker 的旧版本被称为 Docker 或 Docker Engine 。如果安装了Docker或Docker Engine，需要先卸载：yum r', '', '', 'CentOS 7 安装和配置 Docker', 0, NULL, 9, 1076);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 78, '2022-03-15 15:32:39.631000', '2022-03-16 14:23:48.263000', b'0', '2022-03-16 14:23:48.231000', 0, '<h1 id=\"spring-cloud-gateway-的基础使用\">Spring Cloud Gateway 的基础使用</h1>\n<blockquote>\n<p>Spring Cloud Gateway 是基于 Spring 生态系统之上构建的 API 网关，包括： Spring 5.x ， Spring Boot 2.x 和 Project Reactor 。 旨在提供一种简单而有效的方法来路由到API，并为它们提供跨领域的关注点，例如：安全性，监视/指标，限流等。</p>\n</blockquote>\n<h2 id=\"一核心概念\">一、核心概念</h2>\n<h3 id=\"1路由route\">1、路由（Route）</h3>\n<p>路由是网关最基础的部分，路由信息由 ID、目标 URI、一组断言和一组过滤器组成。如果断言 路由为真，则说明请求的 URI 和配置匹配。</p>\n<h3 id=\"2断言predicate\">2、断言（Predicate）</h3>\n<p>Java 8 中的断言函数。Spring Cloud Gateway 中的断言函数输入类型是 Spring 5.0 框架中的 ServerWebExchange。Spring Cloud Gateway 中的断言函数允许开发者去定义匹配来自于 Http Request 中的任何信息，比如请求头和参数等。</p>\n<h3 id=\"3过滤器filter\">3、过滤器（Filter）</h3>\n<p>一个标准的 Spring Web Filter。Spring Cloud Gateway 中的 Filter 分为两种类型，分别是 Gateway Filter 和 Global Filter。过滤器将会对请求和响应进行处理。</p>\n<h2 id=\"二项目整合\">二、项目整合</h2>\n<h3 id=\"1添加依赖\">1、添加依赖</h3>\n<pre><code class=\"language-xml\">&lt;!-- spring cloud gateway 依赖 --&gt;\n&lt;dependency&gt;\n	&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n	&lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre>\n<h3 id=\"2填写配置\">2、填写配置</h3>\n<p>resources/application.yml 文件：</p>\n<pre><code class=\"language-yml\">server:\n  port: 8080\n\nspring:\n  application:\n    name: d-gateway\n  cloud:\n    gateway:\n      routes:\n        - id: service\n          uri: http://localhost:9200/\n          predicates:\n            - Path=/service/**\n          filters:\n            - StripPrefix=1\n</code></pre>\n<h3 id=\"3启动程序\">3、启动程序</h3>\n<pre><code class=\"language-java\">@SpringBootApplication\npublic class GatewayApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(GatewayApplication.class, args);\n    }\n}\n</code></pre>\n<h2 id=\"三路由规则\">三、路由规则</h2>\n<p>Spring Cloud Gateway 创建 Route 对象时， 使用 RoutePredicateFactory 创建 Predicate 对象， Predicate 对象可以赋值给 Route。</p>\n<ul>\n<li>Spring Cloud Gateway 包含许多内置的 Route Predicate Factories。</li>\n<li>所有这些断言都匹配 HTTP 请求的不同属性。</li>\n<li>多个 Route Predicate Factories 可以通过逻辑与结合起来一起使用。</li>\n</ul>\n<p>路由断言工厂 RoutePredicateFactory 包含的主要实现类包括 Datetime、请求的远端地址、路由权重、请求头、Host 地址、请求方法、请求路径和请求参数等类型的路由断言。</p>\n<h3 id=\"1datetime\">1、Datetime</h3>\n<p>匹配日期时间之后发生的请求：</p>\n<pre><code class=\"language-yml\">server:\n  port: 8080\n\nspring:\n  application:\n    name: d-gateway\n  cloud:\n    gateway:\n      routes:\n        - id: service\n          uri: http://localhost:9200/\n          predicates:\n            - After=2022-03-15T14:20:00.000+08:00[Asia/Shanghai]\n</code></pre>\n<p>匹配日期时间之前发生的请求：</p>\n<pre><code class=\"language-yml\">server:\n  port: 8080\n\nspring:\n  application:\n    name: d-gateway\n  cloud:\n    gateway:\n      routes:\n        - id: service\n          uri: http://localhost:9200/\n          predicates:\n            - Before=2022-03-15T14:20:00.000+08:00[Asia/Shanghai]\n</code></pre>\n<h3 id=\"2cookie\">2、Cookie</h3>\n<p>匹配指定名称且其值与正则表达式匹配的<code>cookie</code></p>\n<pre><code class=\"language-yml\">server:\n  port: 8080\n\nspring:\n  application:\n    name: d-gateway\n  cloud:\n    gateway:\n      routes:\n        - id: service\n          uri: http://localhost:9200/\n          predicates:\n            - Cookie=loginname, weizhao\n</code></pre>\n<p>测试 <code>curl http://localhost:8080/service/a --cookie &quot;loginname=weizhao&quot;</code></p>\n<h3 id=\"3header\">3、Header</h3>\n<p>匹配具有指定名称的请求头，<code>\\d+</code>值匹配正则表达式</p>\n<pre><code class=\"language-yml\"> spring:\n  application:\n    name: d-gateway\n  cloud:\n    gateway:\n      routes:\n        - id: service\n          uri: http://localhost:9200/\n          predicates:\n            - Header=X-Request-Id, \\d+\n</code></pre>\n<h3 id=\"4host\">4、Host</h3>\n<p>匹配主机名的列表</p>\n<pre><code class=\"language-yml\"> spring:\n  application:\n    name: d-gateway\n  cloud:\n    gateway:\n      routes:\n        - id: service\n          uri: http://localhost:9200/\n          predicates:\n            - Host=**.qinweizhao.com,**.qinweizhao.cn\n</code></pre>\n<h3 id=\"5method\">5、Method</h3>\n<p>匹配请求methods的参数，它是一个或多个参数</p>\n<pre><code class=\"language-yml\"> spring:\n  application:\n    name: d-gateway\n  cloud:\n    gateway:\n      routes:\n        - id: service\n          uri: http://localhost:9200/\n          predicates:\n            - Method=GET,POST\n</code></pre>\n<h3 id=\"6path\">6、Path</h3>\n<p>匹配请求路径</p>\n<pre><code class=\"language-yml\"> spring:\n  application:\n    name: d-gateway\n  cloud:\n    gateway:\n      routes:\n        - id: service\n          uri: http://localhost:9200/\n          predicates:\n            - Path=/system/**\n</code></pre>\n<h3 id=\"7query\">7、Query</h3>\n<p>匹配查询参数</p>\n<pre><code class=\"language-yml\"> spring:\n  application:\n    name: d-gateway\n  cloud:\n    gateway:\n      routes:\n        - id: service\n          uri: http://localhost:9200/\n          predicates:\n            - Query=username, abc.\n</code></pre>\n<h3 id=\"8remoteaddr\">8、RemoteAddr</h3>\n<p>匹配IP地址和子网掩码</p>\n<pre><code class=\"language-yml\"> spring:\n  application:\n    name: d-gateway\n  cloud:\n    gateway:\n      routes:\n        - id: service\n          uri: http://localhost:9200/\n          predicates:\n            - RemoteAddr=192.168.10.1/0\n</code></pre>\n<h3 id=\"9weight\">9、Weight</h3>\n<p>匹配权重</p>\n<pre><code class=\"language-yml\">spring: \n  application:\n    name: d-gateway\n  cloud:\n    gateway:\n      routes:\n        - id: service-a\n          uri: http://localhost:9200/\n          predicates:\n            - Weight=group1, 8\n        - id: service-b\n          uri: http://localhost:9200/\n          predicates:\n            - Weight=group1, 2\n</code></pre>\n<h2 id=\"四路由配置\">四、路由配置</h2>\n<h3 id=\"1websocket配置方式\">1、websocket配置方式</h3>\n<pre><code class=\"language-yml\">spring:\n  cloud:\n    gateway:\n      routes:\n        - id: service\n          uri: ws://localhost:9200/\n          predicates:\n            - Path=/api/**\n</code></pre>\n<h3 id=\"2http地址配置方式\">2、http地址配置方式</h3>\n<pre><code class=\"language-yml\">spring:\n  cloud:\n    gateway:\n      routes:\n        - id: service\n          uri: http://localhost:9200/\n          predicates:\n            - Path=/api/**\n</code></pre>\n<h3 id=\"3注册中心配置方式\">3、注册中心配置方式</h3>\n<pre><code class=\"language-yml\">spring:\n  cloud:\n    gateway:\n      routes:\n        - id: service\n          uri: lb://service\n          predicates:\n            - Path=/api/**\n</code></pre>\n<h2 id=\"五其他配置\">五、其他配置</h2>\n<h3 id=\"1跨域\">1、跨域</h3>\n<pre><code class=\"language-yml\">spring:\n  cloud:\n    gateway:\n      globalcors:\n        corsConfigurations:\n          \'[/**]\':\n            allowedOriginPatterns: &quot;*&quot;\n            allowed-methods: &quot;*&quot;\n            allowed-headers: &quot;*&quot;\n            allow-credentials: true\n            exposedHeaders: &quot;Content-Disposition,Content-Type,Cache-Control&quot;\n</code></pre>\n<h3 id=\"2黑名单\">2、黑名单</h3>\n<p>即不能访问的地址。实现自定义过滤器 BlackListUrlFilter，需要配置黑名单地址列表 blacklistUrl，当然有其他需求也可以实现自定义规则的过滤器。</p>\n<pre><code class=\"language-yml\">spring:\n  cloud:\n    gateway:\n      routes:\n        # 系统模块\n        - id: service\n          uri: lb://service\n          predicates:\n            - Path=/system/**\n          filters:\n            - StripPrefix=1\n            - name: BlackListUrlFilter\n              args:\n                blacklistUrl:\n                - /user/list\n</code></pre>\n<h3 id=\"3白名单配置\">3、白名单配置</h3>\n<p>即允许访问的地址，且无需登录就能访问。在 ignore 中设置 whites，表示允许匿名访问。</p>\n<pre><code class=\"language-yml\"># 不校验白名单\nignore:\n  whites:\n    - /auth/logout\n    - /auth/login\n    - /*/v2/api-docs\n    - /csrf\n</code></pre>\n<h3 id=\"4全局过滤器\">4、全局过滤器</h3>\n<p>全局过滤器作用于所有的路由，不需要单独配置，我们可以用它来实现很多统一化处理的业务需求，比如权限认证，IP访问限制等等。</p>\n<p>单独定义只需要实现 GlobalFilter，Ordered 这两个接口就可以了。</p>\n<pre><code class=\"language-java\">/**\n * 全局过滤器\n * \n * @author qinweizhao\n */\n@Component\npublic class AuthFilter implements GlobalFilter, Ordered\n{\n    @Override\n    public Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain)\n    {\n        // \n      	// do something\n      	//\n        return chain.filter(exchange);\n    }\n\n    @Override\n    public int getOrder()\n    {\n        return 0;\n    }\n}\n</code></pre>\n', 0, NULL, NULL, '# Spring Cloud Gateway 的基础使用\n\n> Spring Cloud Gateway 是基于 Spring 生态系统之上构建的 API 网关，包括： Spring 5.x ， Spring Boot 2.x 和 Project Reactor 。 旨在提供一种简单而有效的方法来路由到API，并为它们提供跨领域的关注点，例如：安全性，监视/指标，限流等。\n\n## 一、核心概念\n\n### 1、路由（Route）\n\n路由是网关最基础的部分，路由信息由 ID、目标 URI、一组断言和一组过滤器组成。如果断言 路由为真，则说明请求的 URI 和配置匹配。\n\n### 2、断言（Predicate）\n\nJava 8 中的断言函数。Spring Cloud Gateway 中的断言函数输入类型是 Spring 5.0 框架中的 ServerWebExchange。Spring Cloud Gateway 中的断言函数允许开发者去定义匹配来自于 Http Request 中的任何信息，比如请求头和参数等。\n\n### 3、过滤器（Filter）\n\n一个标准的 Spring Web Filter。Spring Cloud Gateway 中的 Filter 分为两种类型，分别是 Gateway Filter 和 Global Filter。过滤器将会对请求和响应进行处理。\n\n## 二、项目整合\n\n### 1、添加依赖\n\n```xml\n<!-- spring cloud gateway 依赖 -->\n<dependency>\n	<groupId>org.springframework.cloud</groupId>\n	<artifactId>spring-cloud-starter-gateway</artifactId>\n</dependency>\n```\n\n### 2、填写配置\n\nresources/application.yml 文件：\n\n```yml\nserver:\n  port: 8080\n\nspring:\n  application:\n    name: d-gateway\n  cloud:\n    gateway:\n      routes:\n        - id: service\n          uri: http://localhost:9200/\n          predicates:\n            - Path=/service/**\n          filters:\n            - StripPrefix=1\n```\n\n### 3、启动程序\n\n```java\n@SpringBootApplication\npublic class GatewayApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(GatewayApplication.class, args);\n    }\n}\n```\n\n## 三、路由规则\n\nSpring Cloud Gateway 创建 Route 对象时， 使用 RoutePredicateFactory 创建 Predicate 对象， Predicate 对象可以赋值给 Route。\n\n-  Spring Cloud Gateway 包含许多内置的 Route Predicate Factories。\n- 所有这些断言都匹配 HTTP 请求的不同属性。\n- 多个 Route Predicate Factories 可以通过逻辑与结合起来一起使用。\n\n路由断言工厂 RoutePredicateFactory 包含的主要实现类包括 Datetime、请求的远端地址、路由权重、请求头、Host 地址、请求方法、请求路径和请求参数等类型的路由断言。\n\n### 1、Datetime\n\n匹配日期时间之后发生的请求：\n\n```yml\nserver:\n  port: 8080\n\nspring:\n  application:\n    name: d-gateway\n  cloud:\n    gateway:\n      routes:\n        - id: service\n          uri: http://localhost:9200/\n          predicates:\n            - After=2022-03-15T14:20:00.000+08:00[Asia/Shanghai]\n```\n\n匹配日期时间之前发生的请求：\n\n```yml\nserver:\n  port: 8080\n\nspring:\n  application:\n    name: d-gateway\n  cloud:\n    gateway:\n      routes:\n        - id: service\n          uri: http://localhost:9200/\n          predicates:\n            - Before=2022-03-15T14:20:00.000+08:00[Asia/Shanghai]\n```\n\n### 2、Cookie\n\n匹配指定名称且其值与正则表达式匹配的`cookie`\n\n```yml\nserver:\n  port: 8080\n\nspring:\n  application:\n    name: d-gateway\n  cloud:\n    gateway:\n      routes:\n        - id: service\n          uri: http://localhost:9200/\n          predicates:\n            - Cookie=loginname, weizhao\n```\n\n测试 `curl http://localhost:8080/service/a --cookie \"loginname=weizhao\"`\n\n### 3、Header\n\n匹配具有指定名称的请求头，`\\d+`值匹配正则表达式\n\n```yml\n spring:\n  application:\n    name: d-gateway\n  cloud:\n    gateway:\n      routes:\n        - id: service\n          uri: http://localhost:9200/\n          predicates:\n            - Header=X-Request-Id, \\d+\n```\n\n### 4、Host\n\n匹配主机名的列表\n\n```yml\n spring:\n  application:\n    name: d-gateway\n  cloud:\n    gateway:\n      routes:\n        - id: service\n          uri: http://localhost:9200/\n          predicates:\n            - Host=**.qinweizhao.com,**.qinweizhao.cn\n```\n\n### 5、Method\n\n匹配请求methods的参数，它是一个或多个参数\n\n```yml\n spring:\n  application:\n    name: d-gateway\n  cloud:\n    gateway:\n      routes:\n        - id: service\n          uri: http://localhost:9200/\n          predicates:\n            - Method=GET,POST\n```\n\n###  6、Path\n\n匹配请求路径\n\n```yml\n spring:\n  application:\n    name: d-gateway\n  cloud:\n    gateway:\n      routes:\n        - id: service\n          uri: http://localhost:9200/\n          predicates:\n            - Path=/system/**\n```\n\n###  7、Query\n\n匹配查询参数\n\n```yml\n spring:\n  application:\n    name: d-gateway\n  cloud:\n    gateway:\n      routes:\n        - id: service\n          uri: http://localhost:9200/\n          predicates:\n            - Query=username, abc.\n```\n\n###  8、RemoteAddr\n\n匹配IP地址和子网掩码\n\n```yml\n spring:\n  application:\n    name: d-gateway\n  cloud:\n    gateway:\n      routes:\n        - id: service\n          uri: http://localhost:9200/\n          predicates:\n            - RemoteAddr=192.168.10.1/0\n```\n\n###  9、Weight\n\n匹配权重\n\n```yml\nspring: \n  application:\n    name: d-gateway\n  cloud:\n    gateway:\n      routes:\n        - id: service-a\n          uri: http://localhost:9200/\n          predicates:\n            - Weight=group1, 8\n        - id: service-b\n          uri: http://localhost:9200/\n          predicates:\n            - Weight=group1, 2\n```\n\n##  四、路由配置\n\n### 1、websocket配置方式\n\n\n```yml\nspring:\n  cloud:\n    gateway:\n      routes:\n        - id: service\n          uri: ws://localhost:9200/\n          predicates:\n            - Path=/api/**\n```\n\n### 2、http地址配置方式\n\n\n```yml\nspring:\n  cloud:\n    gateway:\n      routes:\n        - id: service\n          uri: http://localhost:9200/\n          predicates:\n            - Path=/api/**\n```\n\n### 3、注册中心配置方式\n\n```yml\nspring:\n  cloud:\n    gateway:\n      routes:\n        - id: service\n          uri: lb://service\n          predicates:\n            - Path=/api/**\n```\n\n##  五、其他配置\n\n### 1、跨域\n\n```yml\nspring:\n  cloud:\n    gateway:\n      globalcors:\n        corsConfigurations:\n          \'[/**]\':\n            allowedOriginPatterns: \"*\"\n            allowed-methods: \"*\"\n            allowed-headers: \"*\"\n            allow-credentials: true\n            exposedHeaders: \"Content-Disposition,Content-Type,Cache-Control\"\n```\n\n### 2、黑名单\n\n即不能访问的地址。实现自定义过滤器 BlackListUrlFilter，需要配置黑名单地址列表 blacklistUrl，当然有其他需求也可以实现自定义规则的过滤器。\n\n```yml\nspring:\n  cloud:\n    gateway:\n      routes:\n        # 系统模块\n        - id: service\n          uri: lb://service\n          predicates:\n            - Path=/system/**\n          filters:\n            - StripPrefix=1\n            - name: BlackListUrlFilter\n              args:\n                blacklistUrl:\n                - /user/list\n```\n\n### 3、白名单配置\n\n即允许访问的地址，且无需登录就能访问。在 ignore 中设置 whites，表示允许匿名访问。\n\n```yml\n# 不校验白名单\nignore:\n  whites:\n    - /auth/logout\n    - /auth/login\n    - /*/v2/api-docs\n    - /csrf\n```\n\n### 4、全局过滤器\n\n全局过滤器作用于所有的路由，不需要单独配置，我们可以用它来实现很多统一化处理的业务需求，比如权限认证，IP访问限制等等。\n\n单独定义只需要实现 GlobalFilter，Ordered 这两个接口就可以了。\n\n```java\n/**\n * 全局过滤器\n * \n * @author qinweizhao\n */\n@Component\npublic class AuthFilter implements GlobalFilter, Ordered\n{\n    @Override\n    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain)\n    {\n        // \n      	// do something\n      	//\n        return chain.filter(exchange);\n    }\n\n    @Override\n    public int getOrder()\n    {\n        return 0;\n    }\n}\n```\n\n', '', 'springcloudgatewayde-shi-yong', 0, 'Spring Cloud Gateway 的使用Spring Cloud Gateway 是基于 Spring 生态系统之上构建的 API 网关，包括： Spring 5.x ， Spring Boot 2.x 和 Project Reactor 。 旨在提供一种简单而有效的方法来路由到API，并为', '', '', 'Spring Cloud Gateway 的基础使用', 0, NULL, 18, 4345);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 79, '2022-03-16 14:45:12.773000', '2022-03-16 15:04:06.697000', b'0', '2022-03-16 15:04:06.691000', 0, '<h1 id=\"spring-cloud-gateway-实现限流\">Spring Cloud Gateway 实现限流</h1>\n<p>限流即限制流量。通过限流，我们可以很好地控制系统的 QPS，从而达到保护系统的目的。常见的限流算法有：计数器算法，漏桶(Leaky Bucket)算法，令牌桶(Token Bucket)算法。</p>\n<h2 id=\"一令牌桶\">一、令牌桶</h2>\n<p>Spring Cloud Gateway 官方提供了 RequestRateLimiterGatewayFilterFactory 过滤器工厂，使用 Redis 和 Lua 脚本实现了令牌桶的方式。</p>\n<h3 id=\"1添加依赖\">1、添加依赖</h3>\n<pre><code class=\"language-xml\">&lt;!-- spring data redis reactive 依赖 --&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n  &lt;artifactId&gt;spring-boot-starter-data-redis-reactive&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre>\n<h3 id=\"2限流规则根据-uri-限流\">2、限流规则，根据 URI 限流</h3>\n<pre><code class=\"language-yml\">spring:\n  redis:\n    host: localhost\n    port: 6379\n    password: \n  cloud:\n    gateway:\n      routes:\n        - id: service\n          uri: lb://service\n          predicates:\n            - Path=/system/**\n          filters:\n            - StripPrefix=1\n            - name: RequestRateLimiter\n              args:\n                redis-rate-limiter.replenishRate: 1 # 令牌桶每秒填充速率\n                redis-rate-limiter.burstCapacity: 2 # 令牌桶总容量\n                key-resolver: &quot;#{@pathKeyResolver}&quot; # 使用 SpEL 表达式按名称引用 bean\n</code></pre>\n<p><strong>StripPrefix=1</strong> 配置，表示网关转发到业务模块时候会自动截取前缀。</p>\n<h3 id=\"3编写-uri-限流规则配置类\">3、编写 URI 限流规则配置类</h3>\n<pre><code class=\"language-java\">/**\n * 限流规则配置类\n */\n@Configuration\npublic class KeyResolverConfiguration\n{\n    @Bean\n    public KeyResolver pathKeyResolver()\n    {\n        return exchange -&gt; Mono.just(exchange.getRequest().getURI().getPath());\n    }\n}\n</code></pre>\n<h3 id=\"4测试服务验证限流\">4、测试服务验证限流</h3>\n<p>启动网关服务<code>GatewayApplication.java</code>和业务服务<code>ServiceApplication.java</code>。多次请求会发现返回<code>HTTP ERROR 429</code>，同时在 Redis 中会操作两个 key，表示限流成功。</p>\n<pre><code class=\"language-text\">request_rate_limiter.{xxx}.timestamp\nrequest_rate_limiter.{xxx}.tokens\n</code></pre>\n<h3 id=\"5其他限流规则\">5、其他限流规则</h3>\n<h4 id=\"1-参数限流\">1. 参数限流</h4>\n<p><code>key-resolver: &quot;#{@parameterKeyResolver}&quot;</code></p>\n<pre><code class=\"language-java\">@Bean\npublic KeyResolver parameterKeyResolver()\n{\n	return exchange -&gt; Mono.just(exchange.getRequest().getQueryParams().getFirst(&quot;userId&quot;));\n}\n</code></pre>\n<h4 id=\"2-ip-限流\">2. IP 限流</h4>\n<p><code>key-resolver: &quot;#{@ipKeyResolver}&quot;</code></p>\n<pre><code class=\"language-java\">@Bean\npublic KeyResolver ipKeyResolver()\n{\n	return exchange -&gt; Mono.just(exchange.getRequest().getRemoteAddress().getHostName());\n}\n</code></pre>\n<h2 id=\"二sentinel\">二、Sentinel</h2>\n<p>Sentinel 支持对 Spring Cloud Gateway、Netflix Zuul 等主流的 API Gateway 进行限流。</p>\n<h3 id=\"1添加依赖-1\">1、添加依赖</h3>\n<pre><code class=\"language-xml\">&lt;!-- SpringCloud Alibaba Sentinel --&gt;\n&lt;dependency&gt;\n	&lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;\n	&lt;artifactId&gt;spring-cloud-starter-alibaba-sentinel&lt;/artifactId&gt;\n&lt;/dependency&gt;\n		\n&lt;!-- SpringCloud Alibaba Sentinel Gateway --&gt;\n&lt;dependency&gt;\n	&lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;\n	&lt;artifactId&gt;spring-cloud-alibaba-sentinel-gateway&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre>\n<h3 id=\"2限流规则配置类\">2、限流规则配置类</h3>\n<pre><code class=\"language-java\">/**\n * 网关限流配置\n * \n * @author qinweizhao\n */\n@Configuration\npublic class GatewayConfig\n{\n    @Bean\n    @Order(Ordered.HIGHEST_PRECEDENCE)\n    public SentinelFallbackHandler sentinelGatewayExceptionHandler()\n    {\n        return new SentinelFallbackHandler();\n    }\n\n    @Bean\n    @Order(-1)\n    public GlobalFilter sentinelGatewayFilter()\n    {\n        return new SentinelGatewayFilter();\n    }\n\n    @PostConstruct\n    public void doInit()\n    {\n        // 加载网关限流规则\n        initGatewayRules();\n    }\n\n    /**\n     * 网关限流规则   \n     */\n    private void initGatewayRules()\n    {\n        Set&lt;GatewayFlowRule&gt; rules = new HashSet&lt;&gt;();\n        rules.add(new GatewayFlowRule(&quot;service&quot;)\n                .setCount(3) // 限流阈值\n                .setIntervalSec(60)); // 统计时间窗口，单位是秒，默认是 1 秒\n        // 加载网关限流规则\n        GatewayRuleManager.loadRules(rules);\n    }\n}\n</code></pre>\n<h3 id=\"3测试验证\">3、测试验证</h3>\n<p>一分钟内访问三次系统服务出现异常提示表示限流成功。</p>\n<h3 id=\"4分组限流\">4、分组限流</h3>\n<p>对 service、service-support分组限流配置</p>\n<h4 id=\"1--配置文件\">1.  配置文件</h4>\n<p>application.yml</p>\n<pre><code class=\"language-yml\">spring:\n  cloud:\n    gateway:\n      routes:\n        - id: service\n          uri: lb://service\n          predicates:\n            - Path=/service/**\n          filters:\n            - StripPrefix=1\n\n        - id: ruoyi-gen\n          uri: lb://service-support\n          predicates:\n            - Path=/support/**\n          filters:\n            - StripPrefix=1\n</code></pre>\n<h4 id=\"2-配置类\">2. 配置类</h4>\n<pre><code class=\"language-java\">/**\n * 网关限流配置\n * \n * @author ruoyi\n */\n@Configuration\npublic class GatewayConfig\n{\n    @Bean\n    @Order(Ordered.HIGHEST_PRECEDENCE)\n    public SentinelFallbackHandler sentinelGatewayExceptionHandler()\n    {\n        return new SentinelFallbackHandler();\n    }\n\n    @Bean\n    @Order(-1)\n    public GlobalFilter sentinelGatewayFilter()\n    {\n        return new SentinelGatewayFilter();\n    }\n\n    @PostConstruct\n    public void doInit()\n    {\n        // 加载网关限流规则\n        initGatewayRules();\n    }\n\n    /**\n     * 网关限流规则   \n     */\n    private void initGatewayRules()\n    {\n        Set&lt;GatewayFlowRule&gt; rules = new HashSet&lt;&gt;();\n        rules.add(new GatewayFlowRule(&quot;service-api&quot;)\n                .setCount(3) // 限流阈值\n                .setIntervalSec(60)); // 统计时间窗口，单位是秒，默认是 1 秒\n        rules.add(new GatewayFlowRule(&quot;support-api&quot;)\n                .setCount(5) // 限流阈值\n                .setIntervalSec(60));\n        // 加载网关限流规则\n        GatewayRuleManager.loadRules(rules);\n        // 加载限流分组\n        initCustomizedApis();\n    }\n\n    /**\n     * 限流分组   \n     */\n    private void initCustomizedApis()\n    {\n        Set&lt;ApiDefinition&gt; definitions = new HashSet&lt;&gt;();\n        // service 组\n        ApiDefinition api1 = new ApiDefinition(&quot;service-api&quot;).setPredicateItems(new HashSet&lt;ApiPredicateItem&gt;()\n        {\n            private static final long serialVersionUID = 1L;\n            {\n                // 匹配 /user 以及其子路径的所有请求\n                add(new ApiPathPredicateItem().setPattern(&quot;/service/user/**&quot;)\n                        .setMatchStrategy(SentinelGatewayConstants.URL_MATCH_STRATEGY_PREFIX));\n            }\n        });\n        // support 组\n        ApiDefinition api2 = new ApiDefinition(&quot;support-api&quot;).setPredicateItems(new HashSet&lt;ApiPredicateItem&gt;()\n        {\n            private static final long serialVersionUID = 1L;\n            {\n                // 只匹配 \n                add(new ApiPathPredicateItem().setPattern(&quot;/support/gen/list&quot;));\n            }\n        });\n        definitions.add(api1);\n        definitions.add(api2);\n        // 加载限流分组\n        GatewayApiDefinitionManager.loadApiDefinitions(definitions);\n    }\n}\n</code></pre>\n<p>访问：<code>http://localhost:8080/service/user/list</code> （触发限流 ）<br />\n访问：<code>http://localhost:8080/service/role/list</code> （不会触发限流）<br />\n访问：<code>http://localhost:8080/support/gen/list</code> （触发限流）<br />\n访问：<code>http://localhost:8080/support/gen/xxxx</code> （不会触发限流）</p>\n<h3 id=\"5自定义异常\">5、自定义异常</h3>\n<p>为了展示更加友好的限流提示， Sentinel支持自定义异常处理。</p>\n<h4 id=\"1-配置文件\">1. 配置文件</h4>\n<pre><code class=\"language-yml\"># Spring\nspring: \n  cloud:\n    sentinel:\n      scg:\n        fallback:\n          mode: response\n          response-body: \'{&quot;code&quot;:403,&quot;msg&quot;:&quot;请求超过最大数，请稍后再试&quot;}\'\n</code></pre>\n<h4 id=\"2-注册-bean\">2. 注册 Bean</h4>\n<pre><code class=\"language-java\">@Bean\n@Order(Ordered.HIGHEST_PRECEDENCE)\npublic SentinelFallbackHandler sentinelGatewayExceptionHandler()\n{\n	return new SentinelFallbackHandler();\n}\n</code></pre>\n<p><strong>SentinelFallbackHandler.java</strong></p>\n<pre><code class=\"language-java\">/**\n * 自定义限流异常处理\n *\n * @author qinweizhao\n */\npublic class SentinelFallbackHandler implements WebExceptionHandler\n{\n    private Mono&lt;Void&gt; writeResponse(ServerResponse response, ServerWebExchange exchange)\n    {\n        ServerHttpResponse serverHttpResponse = exchange.getResponse();\n        serverHttpResponse.getHeaders().add(&quot;Content-Type&quot;, &quot;application/json;charset=UTF-8&quot;);\n        byte[] datas = &quot;{\\&quot;code\\&quot;:429,\\&quot;msg\\&quot;:\\&quot;请求超过最大数，请稍后再试\\&quot;}&quot;.getBytes(StandardCharsets.UTF_8);\n        DataBuffer buffer = serverHttpResponse.bufferFactory().wrap(datas);\n        return serverHttpResponse.writeWith(Mono.just(buffer));\n    }\n\n    @Override\n    public Mono&lt;Void&gt; handle(ServerWebExchange exchange, Throwable ex)\n    {\n        if (exchange.getResponse().isCommitted())\n        {\n            return Mono.error(ex);\n        }\n        if (!BlockException.isBlockException(ex))\n        {\n            return Mono.error(ex);\n        }\n        return handleBlockedRequest(exchange, ex).flatMap(response -&gt; writeResponse(response, exchange));\n    }\n\n    private Mono&lt;ServerResponse&gt; handleBlockedRequest(ServerWebExchange exchange, Throwable throwable)\n    {\n        return GatewayCallbackManager.getBlockHandler().handleRequest(exchange, throwable);\n    }\n}\n</code></pre>\n', 0, NULL, NULL, '# Spring Cloud Gateway 实现限流\n\n限流即限制流量。通过限流，我们可以很好地控制系统的 QPS，从而达到保护系统的目的。常见的限流算法有：计数器算法，漏桶(Leaky Bucket)算法，令牌桶(Token Bucket)算法。\n\n## 一、令牌桶\n\nSpring Cloud Gateway 官方提供了 RequestRateLimiterGatewayFilterFactory 过滤器工厂，使用 Redis 和 Lua 脚本实现了令牌桶的方式。\n\n### 1、添加依赖\n\n```xml\n<!-- spring data redis reactive 依赖 -->\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-data-redis-reactive</artifactId>\n</dependency>\n```\n\n### 2、限流规则，根据 URI 限流\n\n```yml\nspring:\n  redis:\n    host: localhost\n    port: 6379\n    password: \n  cloud:\n    gateway:\n      routes:\n        - id: service\n          uri: lb://service\n          predicates:\n            - Path=/system/**\n          filters:\n            - StripPrefix=1\n            - name: RequestRateLimiter\n              args:\n                redis-rate-limiter.replenishRate: 1 # 令牌桶每秒填充速率\n                redis-rate-limiter.burstCapacity: 2 # 令牌桶总容量\n                key-resolver: \"#{@pathKeyResolver}\" # 使用 SpEL 表达式按名称引用 bean\n```\n\n**StripPrefix=1** 配置，表示网关转发到业务模块时候会自动截取前缀。\n\n### 3、编写 URI 限流规则配置类\n\n```java\n/**\n * 限流规则配置类\n */\n@Configuration\npublic class KeyResolverConfiguration\n{\n    @Bean\n    public KeyResolver pathKeyResolver()\n    {\n        return exchange -> Mono.just(exchange.getRequest().getURI().getPath());\n    }\n}\n```\n\n### 4、测试服务验证限流\n启动网关服务`GatewayApplication.java`和业务服务`ServiceApplication.java`。多次请求会发现返回`HTTP ERROR 429`，同时在 Redis 中会操作两个 key，表示限流成功。\n\n```text\nrequest_rate_limiter.{xxx}.timestamp\nrequest_rate_limiter.{xxx}.tokens\n```\n\n### 5、其他限流规则\n\n#### 1. 参数限流\n\n`key-resolver: \"#{@parameterKeyResolver}\"`\n\n```java\n@Bean\npublic KeyResolver parameterKeyResolver()\n{\n	return exchange -> Mono.just(exchange.getRequest().getQueryParams().getFirst(\"userId\"));\n}\n```\n\n#### 2. IP 限流\n\n`key-resolver: \"#{@ipKeyResolver}\"`\n\n```java\n@Bean\npublic KeyResolver ipKeyResolver()\n{\n	return exchange -> Mono.just(exchange.getRequest().getRemoteAddress().getHostName());\n}\n```\n\n##  二、Sentinel\n\nSentinel 支持对 Spring Cloud Gateway、Netflix Zuul 等主流的 API Gateway 进行限流。\n\n### 1、添加依赖\n\n```xml\n<!-- SpringCloud Alibaba Sentinel -->\n<dependency>\n	<groupId>com.alibaba.cloud</groupId>\n	<artifactId>spring-cloud-starter-alibaba-sentinel</artifactId>\n</dependency>\n		\n<!-- SpringCloud Alibaba Sentinel Gateway -->\n<dependency>\n	<groupId>com.alibaba.cloud</groupId>\n	<artifactId>spring-cloud-alibaba-sentinel-gateway</artifactId>\n</dependency>\n```\n\n### 2、限流规则配置类\n\n```java\n/**\n * 网关限流配置\n * \n * @author qinweizhao\n */\n@Configuration\npublic class GatewayConfig\n{\n    @Bean\n    @Order(Ordered.HIGHEST_PRECEDENCE)\n    public SentinelFallbackHandler sentinelGatewayExceptionHandler()\n    {\n        return new SentinelFallbackHandler();\n    }\n\n    @Bean\n    @Order(-1)\n    public GlobalFilter sentinelGatewayFilter()\n    {\n        return new SentinelGatewayFilter();\n    }\n\n    @PostConstruct\n    public void doInit()\n    {\n        // 加载网关限流规则\n        initGatewayRules();\n    }\n\n    /**\n     * 网关限流规则   \n     */\n    private void initGatewayRules()\n    {\n        Set<GatewayFlowRule> rules = new HashSet<>();\n        rules.add(new GatewayFlowRule(\"service\")\n                .setCount(3) // 限流阈值\n                .setIntervalSec(60)); // 统计时间窗口，单位是秒，默认是 1 秒\n        // 加载网关限流规则\n        GatewayRuleManager.loadRules(rules);\n    }\n}\n```\n\n### 3、测试验证\n\n一分钟内访问三次系统服务出现异常提示表示限流成功。\n\n### 4、分组限流\n\n对 service、service-support分组限流配置\n\n#### 1.  配置文件\n\napplication.yml\n\n```yml\nspring:\n  cloud:\n    gateway:\n      routes:\n        - id: service\n          uri: lb://service\n          predicates:\n            - Path=/service/**\n          filters:\n            - StripPrefix=1\n\n        - id: ruoyi-gen\n          uri: lb://service-support\n          predicates:\n            - Path=/support/**\n          filters:\n            - StripPrefix=1\n```\n\n#### 2. 配置类\n\n```java\n/**\n * 网关限流配置\n * \n * @author ruoyi\n */\n@Configuration\npublic class GatewayConfig\n{\n    @Bean\n    @Order(Ordered.HIGHEST_PRECEDENCE)\n    public SentinelFallbackHandler sentinelGatewayExceptionHandler()\n    {\n        return new SentinelFallbackHandler();\n    }\n\n    @Bean\n    @Order(-1)\n    public GlobalFilter sentinelGatewayFilter()\n    {\n        return new SentinelGatewayFilter();\n    }\n\n    @PostConstruct\n    public void doInit()\n    {\n        // 加载网关限流规则\n        initGatewayRules();\n    }\n\n    /**\n     * 网关限流规则   \n     */\n    private void initGatewayRules()\n    {\n        Set<GatewayFlowRule> rules = new HashSet<>();\n        rules.add(new GatewayFlowRule(\"service-api\")\n                .setCount(3) // 限流阈值\n                .setIntervalSec(60)); // 统计时间窗口，单位是秒，默认是 1 秒\n        rules.add(new GatewayFlowRule(\"support-api\")\n                .setCount(5) // 限流阈值\n                .setIntervalSec(60));\n        // 加载网关限流规则\n        GatewayRuleManager.loadRules(rules);\n        // 加载限流分组\n        initCustomizedApis();\n    }\n\n    /**\n     * 限流分组   \n     */\n    private void initCustomizedApis()\n    {\n        Set<ApiDefinition> definitions = new HashSet<>();\n        // service 组\n        ApiDefinition api1 = new ApiDefinition(\"service-api\").setPredicateItems(new HashSet<ApiPredicateItem>()\n        {\n            private static final long serialVersionUID = 1L;\n            {\n                // 匹配 /user 以及其子路径的所有请求\n                add(new ApiPathPredicateItem().setPattern(\"/service/user/**\")\n                        .setMatchStrategy(SentinelGatewayConstants.URL_MATCH_STRATEGY_PREFIX));\n            }\n        });\n        // support 组\n        ApiDefinition api2 = new ApiDefinition(\"support-api\").setPredicateItems(new HashSet<ApiPredicateItem>()\n        {\n            private static final long serialVersionUID = 1L;\n            {\n                // 只匹配 \n                add(new ApiPathPredicateItem().setPattern(\"/support/gen/list\"));\n            }\n        });\n        definitions.add(api1);\n        definitions.add(api2);\n        // 加载限流分组\n        GatewayApiDefinitionManager.loadApiDefinitions(definitions);\n    }\n}\n```\n\n访问：`http://localhost:8080/service/user/list` （触发限流 ）\n访问：`http://localhost:8080/service/role/list` （不会触发限流）\n访问：`http://localhost:8080/support/gen/list` （触发限流）\n访问：`http://localhost:8080/support/gen/xxxx` （不会触发限流）\n\n### 5、自定义异常\n\n为了展示更加友好的限流提示， Sentinel支持自定义异常处理。\n\n#### 1. 配置文件\n\n```yml\n# Spring\nspring: \n  cloud:\n    sentinel:\n      scg:\n        fallback:\n          mode: response\n          response-body: \'{\"code\":403,\"msg\":\"请求超过最大数，请稍后再试\"}\'\n```\n\n#### 2. 注册 Bean\n\n```java\n@Bean\n@Order(Ordered.HIGHEST_PRECEDENCE)\npublic SentinelFallbackHandler sentinelGatewayExceptionHandler()\n{\n	return new SentinelFallbackHandler();\n}\n```\n\n**SentinelFallbackHandler.java**\n\n```java\n/**\n * 自定义限流异常处理\n *\n * @author qinweizhao\n */\npublic class SentinelFallbackHandler implements WebExceptionHandler\n{\n    private Mono<Void> writeResponse(ServerResponse response, ServerWebExchange exchange)\n    {\n        ServerHttpResponse serverHttpResponse = exchange.getResponse();\n        serverHttpResponse.getHeaders().add(\"Content-Type\", \"application/json;charset=UTF-8\");\n        byte[] datas = \"{\\\"code\\\":429,\\\"msg\\\":\\\"请求超过最大数，请稍后再试\\\"}\".getBytes(StandardCharsets.UTF_8);\n        DataBuffer buffer = serverHttpResponse.bufferFactory().wrap(datas);\n        return serverHttpResponse.writeWith(Mono.just(buffer));\n    }\n\n    @Override\n    public Mono<Void> handle(ServerWebExchange exchange, Throwable ex)\n    {\n        if (exchange.getResponse().isCommitted())\n        {\n            return Mono.error(ex);\n        }\n        if (!BlockException.isBlockException(ex))\n        {\n            return Mono.error(ex);\n        }\n        return handleBlockedRequest(exchange, ex).flatMap(response -> writeResponse(response, exchange));\n    }\n\n    private Mono<ServerResponse> handleBlockedRequest(ServerWebExchange exchange, Throwable throwable)\n    {\n        return GatewayCallbackManager.getBlockHandler().handleRequest(exchange, throwable);\n    }\n}\n```', '', 'springcloudgatewayshi-xian-xian-liu', 0, 'Spring Cloud Gateway 实现限流限流即限制流量。通过限流，我们可以很好地控制系统的 QPS，从而达到保护系统的目的。常见的限流算法有：计数器算法，**漏桶(Leaky Bucket)**算法，**令牌桶(Token Bucket)**算法。一、令牌桶Spring Cloud Gat', '', '', 'Spring Cloud Gateway 实现限流', 0, NULL, 11, 6084);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 80, '2022-03-16 14:55:26.192000', '2022-03-16 15:01:44.716000', b'0', '2022-03-16 15:01:44.709000', 0, '<h1 id=\"spring-cloud-gateway-实现熔断降级\">Spring Cloud Gateway 实现熔断降级</h1>\n<h2 id=\"一添加依赖\">一、添加依赖。</h2>\n<pre><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre>\n<h2 id=\"二配置服务\">二、配置服务</h2>\n<pre><code class=\"language-yml\">spring:\n  redis:\n    host: localhost\n    port: 6379\n    password: \n  cloud:\n    gateway:\n      routes:\n        # 系统模块\n        - id: service\n          uri: lb://service\n          predicates:\n            - Path=/service/**\n          filters:\n            - StripPrefix=1\n            # 降级配置\n            - name: Hystrix\n              args:\n                name: default\n                # 降级接口的地址\n                fallbackUri: \'forward:/fallback\'\n</code></pre>\n<p>上面配置包含了一个 Hystrix 过滤器，该过滤器会应用 Hystrix 熔断与降级，会将请求包装成名为 <strong>fallback</strong> 的路由指令 <strong>RouteHystrixCommand</strong> ，RouteHystrixCommand 继承于 HystrixObservableCommand，其内包含了 Hystrix 的断路、资源隔离、降级等诸多断路器核心功能，当网关转发的请求出现问题时，网关能对其进行快速失败，执行特定的失败逻辑，保护网关安全。配置中有一个可选参数 fallbackUri ，当前只支持 forward 模式的 URI。如果服务被降级，请求会被转发到该 URI 对应的控制器。控制器可以是自定义的 fallback 接口；也可以使自定义的 Handler，需要实现接口<code>org.springframework.web.reactive.function.server.HandlerFunction&lt;T extends ServerResponse&gt;</code>。</p>\n<h2 id=\"三配置返回\">三、配置返回</h2>\n<p>添加熔断降级处理返回信息</p>\n<pre><code class=\"language-java\">/**\n * 熔断降级处理\n * \n * @author qinweizhao\n */\n@Component\npublic class HystrixFallbackHandler implements HandlerFunction&lt;ServerResponse&gt;\n{\n    private static final Logger log = LoggerFactory.getLogger(HystrixFallbackHandler.class);\n\n    @Override\n    public Mono&lt;ServerResponse&gt; handle(ServerRequest serverRequest)\n    {\n        Optional&lt;Object&gt; originalUris = serverRequest.attribute(GATEWAY_ORIGINAL_REQUEST_URL_ATTR);\n        originalUris.ifPresent(originalUri -&gt; log.error(&quot;网关执行请求:{}失败,hystrix服务降级处理&quot;, originalUri));\n        return ServerResponse.status(HttpStatus.INTERNAL_SERVER_ERROR.value()).contentType(MediaType.APPLICATION_JSON)\n                .body(BodyInserters.fromValue(JSON.toJSONString(R.fail(&quot;服务已被降级熔断&quot;))));\n    }\n}\n</code></pre>\n<h2 id=\"四配置路由\">四、配置路由</h2>\n<p>路由配置信息加一个控制器方法用于处理重定向的<code>/fallback</code>请求</p>\n<pre><code class=\"language-java\">/**\n * 路由配置信息\n * \n * @author qinweizhao\n */\n@Configuration\npublic class RouterFunctionConfiguration\n{\n    @Autowired\n    private HystrixFallbackHandler hystrixFallbackHandler;\n\n    @Autowired\n    private ValidateCodeHandler validateCodeHandler;\n\n    @SuppressWarnings(&quot;rawtypes&quot;)\n    @Bean\n    public RouterFunction routerFunction()\n    {\n        return RouterFunctions\n                .route(RequestPredicates.path(&quot;/fallback&quot;).and(RequestPredicates.accept(MediaType.TEXT_PLAIN)),\n                        hystrixFallbackHandler)\n                .andRoute(RequestPredicates.GET(&quot;/code&quot;).and(RequestPredicates.accept(MediaType.TEXT_PLAIN)),\n                        validateCodeHandler);\n    }\n}\n</code></pre>\n<h2 id=\"五测试服务\">五、测试服务</h2>\n<p>启动网关服务 <code>GatewayApplication.java</code>，访问<code>/service/**</code>在进行测试，会发现返回服务已被降级熔断，表示降级成功。</p>\n', 0, NULL, NULL, '# Spring Cloud Gateway 实现熔断降级\n\n##  一、添加依赖。\n\n```xml\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>\n</dependency>\n```\n\n## 二、配置服务\n\n```yml\nspring:\n  redis:\n    host: localhost\n    port: 6379\n    password: \n  cloud:\n    gateway:\n      routes:\n        # 系统模块\n        - id: service\n          uri: lb://service\n          predicates:\n            - Path=/service/**\n          filters:\n            - StripPrefix=1\n            # 降级配置\n            - name: Hystrix\n              args:\n                name: default\n                # 降级接口的地址\n                fallbackUri: \'forward:/fallback\'\n```\n\n上面配置包含了一个 Hystrix 过滤器，该过滤器会应用 Hystrix 熔断与降级，会将请求包装成名为 **fallback** 的路由指令 **RouteHystrixCommand** ，RouteHystrixCommand 继承于 HystrixObservableCommand，其内包含了 Hystrix 的断路、资源隔离、降级等诸多断路器核心功能，当网关转发的请求出现问题时，网关能对其进行快速失败，执行特定的失败逻辑，保护网关安全。配置中有一个可选参数 fallbackUri ，当前只支持 forward 模式的 URI。如果服务被降级，请求会被转发到该 URI 对应的控制器。控制器可以是自定义的 fallback 接口；也可以使自定义的 Handler，需要实现接口`org.springframework.web.reactive.function.server.HandlerFunction<T extends ServerResponse>`。\n\n## 三、配置返回\n\n添加熔断降级处理返回信息\n\n```java\n/**\n * 熔断降级处理\n * \n * @author qinweizhao\n */\n@Component\npublic class HystrixFallbackHandler implements HandlerFunction<ServerResponse>\n{\n    private static final Logger log = LoggerFactory.getLogger(HystrixFallbackHandler.class);\n\n    @Override\n    public Mono<ServerResponse> handle(ServerRequest serverRequest)\n    {\n        Optional<Object> originalUris = serverRequest.attribute(GATEWAY_ORIGINAL_REQUEST_URL_ATTR);\n        originalUris.ifPresent(originalUri -> log.error(\"网关执行请求:{}失败,hystrix服务降级处理\", originalUri));\n        return ServerResponse.status(HttpStatus.INTERNAL_SERVER_ERROR.value()).contentType(MediaType.APPLICATION_JSON)\n                .body(BodyInserters.fromValue(JSON.toJSONString(R.fail(\"服务已被降级熔断\"))));\n    }\n}\n```\n\n## 四、配置路由\n\n路由配置信息加一个控制器方法用于处理重定向的`/fallback`请求\n\n```java\n/**\n * 路由配置信息\n * \n * @author qinweizhao\n */\n@Configuration\npublic class RouterFunctionConfiguration\n{\n    @Autowired\n    private HystrixFallbackHandler hystrixFallbackHandler;\n\n    @Autowired\n    private ValidateCodeHandler validateCodeHandler;\n\n    @SuppressWarnings(\"rawtypes\")\n    @Bean\n    public RouterFunction routerFunction()\n    {\n        return RouterFunctions\n                .route(RequestPredicates.path(\"/fallback\").and(RequestPredicates.accept(MediaType.TEXT_PLAIN)),\n                        hystrixFallbackHandler)\n                .andRoute(RequestPredicates.GET(\"/code\").and(RequestPredicates.accept(MediaType.TEXT_PLAIN)),\n                        validateCodeHandler);\n    }\n}\n```\n\n## 五、测试服务\n\n启动网关服务 `GatewayApplication.java`，访问`/service/**`在进行测试，会发现返回服务已被降级熔断，表示降级成功。\n\n\n', '', 'springcloudgatewayshi-xian-rong-duan-jiang-ji', 0, 'Spring Cloud Gateway 实现熔断降级一、hystrix1、添加依赖。&lt;dependency&gt;    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;    &lt;artifactId&gt;spring-', '', '', 'Spring Cloud Gateway 实现熔断降级', 0, NULL, 12, 2193);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 81, '2022-03-17 20:53:25.498000', '2022-03-24 13:57:33.267000', b'0', '2022-03-24 13:57:33.265000', 0, '<h1 id=\"spring-cloud-alibaba-nacos-注册中心\">Spring Cloud Alibaba Nacos-注册中心</h1>\n<blockquote>\n<p>注册中心类似于<strong>通讯录</strong>，它记录了服务和服务地址的映射关系。在分布式架构中，服务会注册到这里，当服务需要调用其它服务时，就到这里找到服务的地址，进行调用。注册中心解决了<strong>服务发现</strong>的问题。在没有注册中心时候，服务间调用需要知道被调方的地址或者代理地址。当服务更换部署地址，就不得不修改调用当中指定的地址或者修改代理配置。而有了注册中心之后，服务之间调用只需要记住服务名即可。</p>\n<p>Nacos 是阿里巴巴开源的一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。Nacos 使用 Java 编写，所以需要依赖 Java 环境</p>\n<p>Nacos 文档地址： <a href=\"https://nacos.io/zh-cn/docs/quick-start.html\">https://nacos.io/zh-cn/docs/quick-start.html</a></p>\n</blockquote>\n<h2 id=\"一下载\">一、下载</h2>\n<p>官方地址：<a href=\"https://github.com/alibaba/nacos/releases\">https://github.com/alibaba/nacos/releases</a></p>\n<h3 id=\"1安装包\">1、安装包</h3>\n<p>从 GitHub 上下载对应平台的压缩包</p>\n<h3 id=\"2源码\">2、源码</h3>\n<pre><code class=\"language-sh\">git clone https://github.com/alibaba/nacos.git\n\ncd nacos/\n\nmvn -Prelease-nacos -Dmaven.test.skip=true clean install -U  \n\nls -al distribution/target/\n\n// 更改 $version\ncd distribution/target/nacos-server-$version/nacos/bin\n\n// 执行 bin 目录下载 startup.xx\n./startup.xx -m standalone\n</code></pre>\n<h3 id=\"3docker\">3、Docker</h3>\n<p>（本次使用）</p>\n<pre><code class=\"language-sh\">docker pull nacos/nacos-server\n</code></pre>\n<h2 id=\"二启动\">二、启动</h2>\n<ul>\n<li>压缩包</li>\n<li>源码</li>\n</ul>\n<p>bin 目录的 startup.xx 即为启动脚本，根据相应的环境，选择不同的文件。</p>\n<pre><code class=\"language-sh\">./startup.xx -m standalone\n</code></pre>\n<p>注意：xx</p>\n<ul>\n<li>Docker</li>\n</ul>\n<pre><code class=\"language-sh\">docker run --env MODE=standalone --name nacos -d -p 8848:8848 nacos/nacos-server\n</code></pre>\n<p>注意：Nacos默认是集群模式 cluster。可以修改启动脚本将模式更改为 standalone。当 Nacos 从1.x版本升级为2.x版本后，需要暴露 9848 端口。</p>\n<p>Nacos 提供了一个可视化的操作平台，访问  <a href=\"http://localhost:8848/nacos/\">http://localhost:8848/nacos/</a> ，使用默认的 nacos/nacos 进行登录。</p>\n<h2 id=\"三使用\">三、使用</h2>\n<h3 id=\"1引入依赖\">1、引入依赖</h3>\n<pre><code class=\"language-xml\">&lt;dependency&gt;\n	&lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;\n	&lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre>\n<h3 id=\"2编写配置\">2、编写配置</h3>\n<pre><code class=\"language-yaml\"># Spring\nspring: \n  application:\n    # 应用名称\n    name: service\n  cloud:\n    nacos:\n      discovery:\n        # 服务注册地址\n        server-addr: 127.0.0.1:8848\n</code></pre>\n<h3 id=\"3标注注解\">3、标注注解</h3>\n<p>使用**@EnableDiscoveryClient** 开启服务注册发现功能：</p>\n<pre><code class=\"language-java\">/**\n * @author qinweizhao\n */\n@EnableDiscoveryClient\n@SpringBootApplication\npublic class DiscoveryApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(DiscoveryApplication.class, args);\n    }\n\n}\n</code></pre>\n<h3 id=\"4验证结果\">4、验证结果</h3>\n<h4 id=\"1-观察控制台\">1. 观察控制台</h4>\n<p>启动应用，观察控制台的服务列表是否已经注册上服务。</p>\n<p><img src=\"https://img.qinweizhao.com/2022/03/2022-03-17_203000.png\" alt=\"2022-03-17_203000\" /></p>\n<h4 id=\"2-服务发现\">2. 服务发现</h4>\n<p>为了便于使用，NacosServerList 实现了 com.netflix.loadbalancer.ServerList 接口，并在 @ConditionOnMissingBean 的条件下进行自动注入。如果有定制化的需求，可以自己实现自己的 ServerList。</p>\n<p>Nacos Discovery Starter 默认集成了 Ribbon ，所以对于使用了 Ribbon 做负载均衡的组件，可以直接使用 Nacos 的服务发现。</p>\n<p>经过测试 SpringCloudAlibaba 的版本在2021.1剔除了 Ribbon，所以要使用 @LoadBalanced 注解则需要引入 loadbalancer：</p>\n<pre><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-cloud-starter-loadbalancer&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre>\n<ul>\n<li>FeignClient 已经默认集成了 Ribbon。（测试略）</li>\n<li>配置 RestTemplate 添加 @LoadBlanced 注解，使得 RestTemplate 接入 Ribbon。（此次使用）</li>\n</ul>\n<p><img src=\"https://img.qinweizhao.com/2022/03/2022-03-17_203823.png\" alt=\"2022-03-17_203823\" /></p>\n<p>解释：</p>\n<p>dn-discovery-test 模块和 dn-discovery 都注册在 Nacos。dn-discovery-test 通过 restTemplate 调用 dn-discovery。dn-discovery 做的处理为 id 加 100。</p>\n<p>访问：<a href=\"http://localhost:8080/1\">http://localhost:8080/1</a></p>\n<p>结果：1011</p>\n<h2></h2>\n<blockquote>\n<p>涉及模块：</p>\n<p>dn-discovery</p>\n<p>dn-discovery-test</p>\n<p>代码地址：</p>\n<p><a href=\"https://github.com/qinweizhao/qwz-sample/tree/master/distributed/d-nacos\">https://github.com/qinweizhao/qwz-sample/tree/master/distributed/d-nacos</a></p>\n</blockquote>\n', 0, NULL, NULL, '# Spring Cloud Alibaba Nacos-注册中心\n\n\n> 注册中心类似于**通讯录**，它记录了服务和服务地址的映射关系。在分布式架构中，服务会注册到这里，当服务需要调用其它服务时，就到这里找到服务的地址，进行调用。注册中心解决了**服务发现**的问题。在没有注册中心时候，服务间调用需要知道被调方的地址或者代理地址。当服务更换部署地址，就不得不修改调用当中指定的地址或者修改代理配置。而有了注册中心之后，服务之间调用只需要记住服务名即可。\n>\n> Nacos 是阿里巴巴开源的一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。Nacos 使用 Java 编写，所以需要依赖 Java 环境 \n>\n> Nacos 文档地址： https://nacos.io/zh-cn/docs/quick-start.html\n\n## 一、下载\n\n官方地址：https://github.com/alibaba/nacos/releases\n\n### 1、安装包\n\n从 GitHub 上下载对应平台的压缩包\n\n### 2、源码\n\n```sh\ngit clone https://github.com/alibaba/nacos.git\n\ncd nacos/\n\nmvn -Prelease-nacos -Dmaven.test.skip=true clean install -U  \n\nls -al distribution/target/\n\n// 更改 $version\ncd distribution/target/nacos-server-$version/nacos/bin\n\n// 执行 bin 目录下载 startup.xx\n./startup.xx -m standalone\n```\n\n### 3、Docker\n\n（本次使用）\n\n```sh\ndocker pull nacos/nacos-server\n```\n\n## 二、启动\n\n- 压缩包\n- 源码\n\nbin 目录的 startup.xx 即为启动脚本，根据相应的环境，选择不同的文件。\n\n```sh\n./startup.xx -m standalone\n```\n\n注意：xx\n\n- Docker\n\n```sh\ndocker run --env MODE=standalone --name nacos -d -p 8848:8848 nacos/nacos-server\n```\n\n注意：Nacos默认是集群模式 cluster。可以修改启动脚本将模式更改为 standalone。当 Nacos 从1.x版本升级为2.x版本后，需要暴露 9848 端口。\n\nNacos 提供了一个可视化的操作平台，访问  http://localhost:8848/nacos/ ，使用默认的 nacos/nacos 进行登录。\n\n## 三、使用\n\n### 1、引入依赖\n\n```xml\n<dependency>\n	<groupId>com.alibaba.cloud</groupId>\n	<artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>\n</dependency>\n```\n\n### 2、编写配置\n\n```yaml\n# Spring\nspring: \n  application:\n    # 应用名称\n    name: service\n  cloud:\n    nacos:\n      discovery:\n        # 服务注册地址\n        server-addr: 127.0.0.1:8848\n```\n\n### 3、标注注解\n\n使用**@EnableDiscoveryClient** 开启服务注册发现功能：\n\n```java\n/**\n * @author qinweizhao\n */\n@EnableDiscoveryClient\n@SpringBootApplication\npublic class DiscoveryApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(DiscoveryApplication.class, args);\n    }\n\n}\n```\n\n### 4、验证结果\n\n#### 1. 观察控制台\n\n启动应用，观察控制台的服务列表是否已经注册上服务。\n\n![2022-03-17_203000](https://img.qinweizhao.com/2022/03/2022-03-17_203000.png)\n\n#### 2. 服务发现\n\n为了便于使用，NacosServerList 实现了 com.netflix.loadbalancer.ServerList 接口，并在 @ConditionOnMissingBean 的条件下进行自动注入。如果有定制化的需求，可以自己实现自己的 ServerList。\n\nNacos Discovery Starter 默认集成了 Ribbon ，所以对于使用了 Ribbon 做负载均衡的组件，可以直接使用 Nacos 的服务发现。\n\n经过测试 SpringCloudAlibaba 的版本在2021.1剔除了 Ribbon，所以要使用 @LoadBalanced 注解则需要引入 loadbalancer：\n\n```xml\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-loadbalancer</artifactId>\n</dependency>\n```\n\n\n\n- FeignClient 已经默认集成了 Ribbon。（测试略）\n- 配置 RestTemplate 添加 @LoadBlanced 注解，使得 RestTemplate 接入 Ribbon。（此次使用）\n\n![2022-03-17_203823](https://img.qinweizhao.com/2022/03/2022-03-17_203823.png)\n\n解释：\n\ndn-discovery-test 模块和 dn-discovery 都注册在 Nacos。dn-discovery-test 通过 restTemplate 调用 dn-discovery。dn-discovery 做的处理为 id 加 100。\n\n访问：http://localhost:8080/1\n\n结果：1011\n\n##\n\n>涉及模块：\n>\n>dn-discovery\n>\n>dn-discovery-test\n>\n>代码地址：\n>\n>https://github.com/qinweizhao/qwz-sample/tree/master/distributed/d-nacos\n\n', '', 'nacos--zhu-ce-zhong-xin', 0, 'Nacos-注册中心注册中心类似于通讯录，它记录了服务和服务地址的映射关系。在分布式架构中，服务会注册到这里，当服务需要调用其它服务时，就到这里找到服务的地址，进行调用。注册中心解决了服务发现的问题。在没有注册中心时候，服务间调用需要知道被调方的地址或者代理地址。当服务更换部署地址，就不得不修改调用', '', '', 'Spring Cloud Alibaba Nacos-注册中心', 0, NULL, 20, 2809);
INSERT INTO `posts` (`type`, `id`, `create_time`, `update_time`, `disallow_comment`, `edit_time`, `editor_type`, `format_content`, `likes`, `meta_description`, `meta_keywords`, `original_content`, `password`, `slug`, `status`, `summary`, `template`, `thumbnail`, `title`, `top_priority`, `url`, `visits`, `word_count`) VALUES (0, 82, '2022-03-17 22:43:47.626000', '2022-03-24 13:57:44.802000', b'0', '2022-03-24 13:57:44.800000', 0, '<h1 id=\"spring-cloud-alibaba-nacos-配置中心\">Spring Cloud Alibaba Nacos-配置中心</h1>\n<blockquote>\n<p>在微服务架构中，每个服务都可能会多机部署，当需要更改配置时，则每一台服务器上的配置都要被更改，这无疑是繁琐的。使用配置中心可以将配置从各应用中剥离出来，对配置进行统一管理，应用自身不需要自己去管理配置。</p>\n<p>配置中心的服务流程如下：</p>\n<p>1、用户在配置中心更新配置信息。<br />\n2、服务A和服务B及时得到配置更新通知，从配置中心获取配置</p>\n</blockquote>\n<h2 id=\"一下载\">一、下载</h2>\n<p>参考：<a href=\"https://www.qinweizhao.com/?p=81\">Spring Cloud Alibaba Nacos-注册中心</a></p>\n<h2 id=\"二启动\">二、启动</h2>\n<p>省略：<a href=\"https://www.qinweizhao.com/?p=81\">同上</a></p>\n<h2 id=\"三使用\">三、使用</h2>\n<h3 id=\"1引入依赖\">1、引入依赖</h3>\n<pre><code class=\"language-xml\">&lt;dependency&gt;\n	&lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;\n	&lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre>\n<h3 id=\"2编写配置\">2、编写配置</h3>\n<p>在<code>bootstrap.yml</code>添加 Nacos 配置，配置文件加载的优先级（由高到低）<code>bootstrap.properties -&gt;bootstrap.yml -&gt; application.properties -&gt; application.yml</code>  。</p>\n<pre><code class=\"language-yaml\"># Spring\nspring: \n  application:\n    # 应用名称\n    name: test\n  cloud:\n    nacos:\n      config:\n        # 配置中心地址\n        server-addr: 127.0.0.1:8848\n        # 配置文件格式\n        file-extension: yml\n</code></pre>\n<p><strong>注意</strong>：</p>\n<p><strong>spring-cloud-dependencies 2020.0.0 版本不在默认加载 bootstrap 文件，如果需要加载 bootstrap 文件需要手动添加依赖：</strong></p>\n<pre><code class=\"language-xml\">&lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-cloud-starter-bootstrap&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre>\n<h3 id=\"3添加配置\">3、添加配置</h3>\n<p>打开控制台，在 Nacos 中添加 test.yml 配置文件：</p>\n<pre><code class=\"language-yml\">test:\n    user:\n        name: weizhao\n        age: 20\n</code></pre>\n<p>在 Nacos Spring Cloud 中，dataId 的完整格式如下:</p>\n<pre><code class=\"language-text\">${prefix}-${spring.profile.active}.${file-extension}\n</code></pre>\n<ul>\n<li>\n<p>prefix：</p>\n<p>默认为 spring.application.name 的值，也可以通过配置项 spring.cloud.nacos.config.prefix 来配置。</p>\n</li>\n<li>\n<p>spring.profile.active：</p>\n<p>即为当前环境对应的 profile。</p>\n</li>\n<li>\n<p>file-exetension ：</p>\n<p>为配置内容的数据格式，可以通过配置项 spring.cloud.nacos.config.file-extension 来配置。目前只支持 properties 和 yaml 类型。</p>\n</li>\n</ul>\n<p><img src=\"https://img.qinweizhao.com/2022/03/2022-03-17_230322.png\" alt=\"2022-03-17_230322\" /></p>\n<h3 id=\"4测试代码\">4、测试代码</h3>\n<pre><code class=\"language-java\">/**\n * @author qinweizhao\n */\n@RestController\n//动态刷新\n@RefreshScope\npublic class ConfigController {\n\n    @Value(&quot;${test.user.name}&quot;)\n    private String name;\n\n    @Value(&quot;${test.user.age}&quot;)\n    private String age;\n\n    @GetMapping(&quot;info&quot;)\n    public String get() {\n        return name + age;\n    }\n}\n</code></pre>\n<h3 id=\"5启动测试\">5、启动测试</h3>\n<h4 id=\"1-基础测试\">1. 基础测试</h4>\n<p>访问：<a href=\"http://localhost:8080/info\">localhost:8080/info</a></p>\n<p>结果：weizhao20</p>\n<h4 id=\"2-动态测试\">2. 动态测试</h4>\n<p>修改 Nacos 中的 test.yml</p>\n<pre><code class=\"language-yaml\">test:\n    user:\n        name: wz\n        age: 22\n</code></pre>\n<p>访问：<a href=\"http://localhost:8080/info\">localhost:8080/info</a></p>\n<p>结果：wz22</p>\n<h2 id=\"四进阶\">四、进阶</h2>\n<h3 id=\"1概念\">1、概念</h3>\n<ul>\n<li>\n<p><strong>命名空间：</strong></p>\n<p>用于进行租户粒度的配置隔离。不同的命名空间下，可以存在相同的 <strong>Group</strong> 或 <strong>Data ID</strong> 的配置。<strong>Namespace</strong> 的常用场景之一是不同环境的配置的区分隔离，例如开发测试环境和生产环境的资源（如配置、服务）隔离等。</p>\n</li>\n<li>\n<p><strong>配置集：</strong></p>\n<p>一组相关或者不相关的配置项的集合称为配置集。在系统中，一个配置文件通常就是一个配置集，包含了系统各个方面的配置。例如，一个配置集可能包含了数据源、线程池、日志级别等配置项。</p>\n</li>\n<li>\n<p><strong>配置集</strong> <strong>ID</strong>：</p>\n<p>Nacos 中的某个配置集的 ID。配置集 ID 是组织划分配置的维度之一。<strong>Data ID</strong> 通常用于组织划分系统的配置集。一个系统或者应用可以包含多个配置集，每个配置集都可以被一个有意义的名称标识。Data ID 通常采用类 Java 包（com.taobao.tc.refund.log.level 的命名规则保证全局唯一性。此命名规则非强制。</p>\n</li>\n<li>\n<p><strong>配置分组：</strong></p>\n<p>Nacos 中的一组配置集，是组织配置的维度之一。通过一个有意义的字符串（如 Buy 或 Trade ）对配置集进行分组，从而区分 Data ID 相同的配置集。当在 Nacos 上创建一个配置时，如果未填写配置分组的名称，则配置分组的名称默认采用 DEFAULT_GROUP 。配置分组的常见场景：不同的应用或组件使用了相同的配置类型，如 database_url 配置和 MQ_topic 配置。</p>\n</li>\n</ul>\n<h3 id=\"2实践\">2、实践</h3>\n<ul>\n<li>\n<p>配置分组</p>\n<p>在新增配置的时候可以输入 Grop ，此时新增一个配置在 TEST 组。配置内容为：</p>\n<pre><code class=\"language-yaml\">test:\n    user:\n        name: weizhao-a\n        age: 21\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2022/03/2022-03-17_231233.png\" alt=\"2022-03-17_231233\" /></p>\n<p>在 <code>bootstrap.yml</code>中添加配置：</p>\n<pre><code class=\"language-yaml\">spring:\n  application:\n    # 应用名称\n    name: test\n  cloud:\n    nacos:\n      discovery:\n        server-addr: 127.0.0.1:8848\n      config:\n        # 配置中心地址\n        server-addr: 127.0.0.1:8848\n        # 配置文件格式\n        file-extension: yml\n        # 添加\n        group: TEST\n</code></pre>\n<p><strong>启动程序</strong></p>\n<p>访问：<a href=\"http://localhost:8080/info\">localhost:8080/info</a></p>\n<p>结果：weizhao-a21</p>\n</li>\n<li>\n<p>命名空间</p>\n<p>新增一个命名空间，并在当前命名空间添加一个配置并分配到 TEST 分组，配置内容为：</p>\n<pre><code class=\"language-yaml\">test:\n    user:\n        name: weizhao-b\n        age: 22\n</code></pre>\n<p><img src=\"https://img.qinweizhao.com/2022/03/2022-03-17_231932.png\" alt=\"2022-03-17_231932\" /></p>\n<p><img src=\"https://img.qinweizhao.com/2022/03/2022-03-17_232541.png\" alt=\"2022-03-17_232541\" /></p>\n<p>在 <code>bootstrap.yml</code>中添加配置：</p>\n<pre><code class=\"language-yaml\">spring:\n  application:\n    # 应用名称\n    name: test\n  cloud:\n    nacos:\n      discovery:\n        server-addr: 127.0.0.1:8848\n      config:\n        # 配置中心地址\n        server-addr: 127.0.0.1:8848\n        # 配置文件格式\n        file-extension: yml\n        group: TEST\n        ## 添加 名称空间 ID\n        namespace: cbb3183b-c9ef-4604-8643-4f5da6033510\n</code></pre>\n<p><strong>启动程序</strong></p>\n<p>访问：<a href=\"http://localhost:8080/info\">localhost:8080/info</a></p>\n<p>结果：weizhao-a21</p>\n</li>\n<li>\n<p>配置集</p>\n<p>配置集的实践，即加载多个配置文件，为了更好的说明，此时<strong>将 test.yml 删除</strong>，如果不删除的话还是会加载 test.yml 并且优先级要高于配置的其他配置文件。</p>\n<p>新增 a.yml：</p>\n<pre><code class=\"language-yaml\">test:\n    user:\n        name: weizhao-c\n</code></pre>\n<p>新增 b.yml：</p>\n<pre><code class=\"language-yaml\">test:\n    user:\n        age: 23\n</code></pre>\n<p>在 <code>bootstrap.yml</code>中新增配置：</p>\n<pre><code class=\"language-yaml\"># Spring\nspring:\n  application:\n    # 应用名称\n    name: test\n  cloud:\n    nacos:\n      discovery:\n        server-addr: 127.0.0.1:8848\n      config:\n        # 配置中心地址\n        server-addr: 127.0.0.1:8848\n        # 配置文件格式\n        file-extension: yml\n        group: TEST\n        namespace: cbb3183b-c9ef-4604-8643-4f5da6033510\n        # 新增\n        extension-configs:\n              - data-id: a.yml\n                group: TEST\n                refresh: true\n              - data-id: b.yml\n                group: TEST\n                refresh: true\n</code></pre>\n<p>补充：写法说明</p>\n<p><img src=\"https://img.qinweizhao.com/2022/03/2022-03-17_235946.png\" alt=\"2022-03-17_235946\" /></p>\n<p>extension-configs 参数为一个 List。</p>\n<p><strong>启动程序</strong></p>\n<p>访问：<a href=\"http://localhost:8080/info\">localhost:8080/info</a></p>\n<p>结果：weizhao-c23</p>\n</li>\n</ul>\n<h3 id=\"3原理\">3、原理</h3>\n<ul>\n<li>\n<p><strong>自动注入：</strong></p>\n<p>NacosConfigStarter 实现了 org.springframework.cloud.bootstrap.config.PropertySourceLocator 接口，并将优先级设置成了最高。 在 Spring Cloud 应用启动阶段，会主动从 Nacos Server 端获取对应的数据，并将获取到的 数据转换成 PropertySource 且入到 Environment 的 PropertySources 属性中，所以使用 @Value 注解也能直接获取 Nacos Server 端配置的内容。</p>\n</li>\n<li>\n<p><strong>动态刷新：</strong></p>\n<p>Nacos Config Starter 默认为所有获取数据成功的 Nacos 的配置项添加了监听功能，在监听 到服务端配置发生变化时会实时触发 org.springframework.cloud.context.refresh.ContextRefresher 的 refresh 方法 。 如果需要对 Bean 进行动态刷新，请参照 Spring 和 Spring Cloud 规范。<strong>推荐给类添加</strong> <strong>@RefreshScope</strong> <strong>或</strong> <strong>@ConfigurationProperties</strong> <strong>注解</strong>。</p>\n</li>\n</ul>\n<h3 id=\"4建议\">4、建议</h3>\n<ul>\n<li>\n<p><strong>namespace</strong> <strong>与</strong> <strong>group</strong> <strong>最佳实践</strong></p>\n<p>每个微服务创建自己的 namespace 进行隔离，group 来区分 dev，beta，prod 等环境</p>\n</li>\n</ul>\n<h3 id=\"5mysql-支持\">5、MySQL 支持</h3>\n<p>在单机模式时 Nacos 使用嵌入式数据库实现数据的存储，不方便观察数据存储的基本情况。可以配置 MySQL 数据库（版本要求：5.6.5+），可视化的查看数据的存储。</p>\n<ul>\n<li>使用 <em>conf/nacos-mysql.sql</em> 文件初始化数据库</li>\n<li>修改conf/application.properties文件增加 MySQL 支持</li>\n</ul>\n<pre><code class=\"language-properties\">spring.datasource.platform=mysql\ndb.num=1\ndb.url.0=jdbc:mysql://localhost:3306/nacos-mysql?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC\ndb.user=root\ndb.password=root\n</code></pre>\n<h3 id=\"6集群部署\">6、集群部署</h3>\n<p>集群模式适用于生产环境需要依赖 MySQL，单机可不必，三个及以上 Nacos 节点才能构成集群。</p>\n<p>1、在 Nacos 的解压目录<code>nacos/conf</code>目录下，修改配置文件<code>cluster.conf</code></p>\n<pre><code class=\"language-sh\">192.168.79.65:8848\n192.168.79.66:8848\n192.168.79.67:8848\n</code></pre>\n<p>2、修改<code>bootstrap.yml</code>中的<code>server-addr</code>属性，添加对应集群地址。</p>\n<pre><code class=\"language-properties\">server-addr: 192.168.79.65:8848,192.168.79.66:8848,192.168.79.67:8848\n</code></pre>\n<p>启动运行成功后查看<strong>集群管理/节点列表</strong>来判断是否成功。</p>\n<h2></h2>\n<blockquote>\n<p>代码地址：</p>\n<p><a href=\"https://github.com/qinweizhao/qwz-sample/tree/master/distributed/d-nacos/dn-config\">https://github.com/qinweizhao/qwz-sample/tree/master/distributed/d-nacos/dn-config</a></p>\n</blockquote>\n', 0, NULL, NULL, '# Spring Cloud Alibaba Nacos-配置中心\n\n> 在微服务架构中，每个服务都可能会多机部署，当需要更改配置时，则每一台服务器上的配置都要被更改，这无疑是繁琐的。使用配置中心可以将配置从各应用中剥离出来，对配置进行统一管理，应用自身不需要自己去管理配置。\n>\n> 配置中心的服务流程如下：\n>\n> 1、用户在配置中心更新配置信息。\n> 2、服务A和服务B及时得到配置更新通知，从配置中心获取配置\n\n## 一、下载\n\n参考：[Spring Cloud Alibaba Nacos-注册中心](https://www.qinweizhao.com/?p=81)\n\n## 二、启动\n\n省略：[同上](https://www.qinweizhao.com/?p=81)\n\n## 三、使用\n\n### 1、引入依赖\n\n```xml\n<dependency>\n	<groupId>com.alibaba.cloud</groupId>\n	<artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>\n</dependency>\n```\n\n### 2、编写配置\n\n在`bootstrap.yml`添加 Nacos 配置，配置文件加载的优先级（由高到低）`bootstrap.properties ->bootstrap.yml -> application.properties -> application.yml`  。\n\n```yaml\n# Spring\nspring: \n  application:\n    # 应用名称\n    name: test\n  cloud:\n    nacos:\n      config:\n        # 配置中心地址\n        server-addr: 127.0.0.1:8848\n        # 配置文件格式\n        file-extension: yml\n```\n\n**注意**：\n\n**spring-cloud-dependencies 2020.0.0 版本不在默认加载 bootstrap 文件，如果需要加载 bootstrap 文件需要手动添加依赖：**\n\n```xml\n<dependency>\n        <groupId>org.springframework.cloud</groupId>\n        <artifactId>spring-cloud-starter-bootstrap</artifactId>\n</dependency>\n```\n\n### 3、添加配置\n\n打开控制台，在 Nacos 中添加 test.yml 配置文件：\n\n```yml\ntest:\n    user:\n        name: weizhao\n        age: 20\n```\n\n在 Nacos Spring Cloud 中，dataId 的完整格式如下:\n\n```text\n${prefix}-${spring.profile.active}.${file-extension}\n```\n\n- prefix：\n\n   默认为 spring.application.name 的值，也可以通过配置项 spring.cloud.nacos.config.prefix 来配置。\n\n- spring.profile.active：\n\n  即为当前环境对应的 profile。\n\n- file-exetension ：\n\n  为配置内容的数据格式，可以通过配置项 spring.cloud.nacos.config.file-extension 来配置。目前只支持 properties 和 yaml 类型。\n\n![2022-03-17_230322](https://img.qinweizhao.com/2022/03/2022-03-17_230322.png)\n\n### 4、测试代码\n\n```java\n/**\n * @author qinweizhao\n */\n@RestController\n//动态刷新\n@RefreshScope\npublic class ConfigController {\n\n    @Value(\"${test.user.name}\")\n    private String name;\n\n    @Value(\"${test.user.age}\")\n    private String age;\n\n    @GetMapping(\"info\")\n    public String get() {\n        return name + age;\n    }\n}\n```\n\n### 5、启动测试\n\n#### 1. 基础测试\n\n访问：[localhost:8080/info](http://localhost:8080/info)\n\n结果：weizhao20\n\n#### 2. 动态测试\n\n修改 Nacos 中的 test.yml\n\n```yaml\ntest:\n    user:\n        name: wz\n        age: 22\n```\n\n访问：[localhost:8080/info](http://localhost:8080/info)\n\n结果：wz22\n\n## 四、进阶\n\n### 1、概念\n\n- **命名空间：** \n\n  用于进行租户粒度的配置隔离。不同的命名空间下，可以存在相同的 **Group** 或 **Data ID** 的配置。**Namespace** 的常用场景之一是不同环境的配置的区分隔离，例如开发测试环境和生产环境的资源（如配置、服务）隔离等。\n\n- **配置集：**\n\n  一组相关或者不相关的配置项的集合称为配置集。在系统中，一个配置文件通常就是一个配置集，包含了系统各个方面的配置。例如，一个配置集可能包含了数据源、线程池、日志级别等配置项。\n\n- **配置集** **ID**：\n\n  Nacos 中的某个配置集的 ID。配置集 ID 是组织划分配置的维度之一。**Data ID** 通常用于组织划分系统的配置集。一个系统或者应用可以包含多个配置集，每个配置集都可以被一个有意义的名称标识。Data ID 通常采用类 Java 包（com.taobao.tc.refund.log.level 的命名规则保证全局唯一性。此命名规则非强制。\n\n- **配置分组：** \n\n  Nacos 中的一组配置集，是组织配置的维度之一。通过一个有意义的字符串（如 Buy 或 Trade ）对配置集进行分组，从而区分 Data ID 相同的配置集。当在 Nacos 上创建一个配置时，如果未填写配置分组的名称，则配置分组的名称默认采用 DEFAULT_GROUP 。配置分组的常见场景：不同的应用或组件使用了相同的配置类型，如 database_url 配置和 MQ_topic 配置。\n\n### 2、实践\n\n- 配置分组\n\n  在新增配置的时候可以输入 Grop ，此时新增一个配置在 TEST 组。配置内容为：\n\n  ```yaml\n  test:\n      user:\n          name: weizhao-a\n          age: 21\n  ```\n\n  ![2022-03-17_231233](https://img.qinweizhao.com/2022/03/2022-03-17_231233.png)\n\n  在 `bootstrap.yml`中添加配置：\n\n  ```yaml\n  spring:\n    application:\n      # 应用名称\n      name: test\n    cloud:\n      nacos:\n        discovery:\n          server-addr: 127.0.0.1:8848\n        config:\n          # 配置中心地址\n          server-addr: 127.0.0.1:8848\n          # 配置文件格式\n          file-extension: yml\n          # 添加\n          group: TEST\n  ```\n\n  **启动程序**\n\n  访问：[localhost:8080/info](http://localhost:8080/info)\n\n  结果：weizhao-a21\n\n- 命名空间\n\n  新增一个命名空间，并在当前命名空间添加一个配置并分配到 TEST 分组，配置内容为：\n\n  ```yaml\n  test:\n      user:\n          name: weizhao-b\n          age: 22\n  ```\n\n  ![2022-03-17_231932](https://img.qinweizhao.com/2022/03/2022-03-17_231932.png)\n\n  ![2022-03-17_232541](https://img.qinweizhao.com/2022/03/2022-03-17_232541.png)\n\n  在 `bootstrap.yml`中添加配置：\n\n  ```yaml\n  spring:\n    application:\n      # 应用名称\n      name: test\n    cloud:\n      nacos:\n        discovery:\n          server-addr: 127.0.0.1:8848\n        config:\n          # 配置中心地址\n          server-addr: 127.0.0.1:8848\n          # 配置文件格式\n          file-extension: yml\n          group: TEST\n          ## 添加 名称空间 ID\n          namespace: cbb3183b-c9ef-4604-8643-4f5da6033510\n  ```\n\n  **启动程序**\n\n  访问：[localhost:8080/info](http://localhost:8080/info)\n\n  结果：weizhao-a21\n\n- 配置集\n\n  配置集的实践，即加载多个配置文件，为了更好的说明，此时**将 test.yml 删除**，如果不删除的话还是会加载 test.yml 并且优先级要高于配置的其他配置文件。\n\n  新增 a.yml：\n\n  ```yaml\n  test:\n      user:\n          name: weizhao-c\n  ```\n\n  新增 b.yml：\n\n  ```yaml\n  test:\n      user:\n          age: 23\n  ```\n\n  在 `bootstrap.yml`中新增配置：\n\n  ```yaml\n  # Spring\n  spring:\n    application:\n      # 应用名称\n      name: test\n    cloud:\n      nacos:\n        discovery:\n          server-addr: 127.0.0.1:8848\n        config:\n          # 配置中心地址\n          server-addr: 127.0.0.1:8848\n          # 配置文件格式\n          file-extension: yml\n          group: TEST\n          namespace: cbb3183b-c9ef-4604-8643-4f5da6033510\n          # 新增\n          extension-configs:\n                - data-id: a.yml\n                  group: TEST\n                  refresh: true\n                - data-id: b.yml\n                  group: TEST\n                  refresh: true\n  ```\n\n  补充：写法说明\n\n  ![2022-03-17_235946](https://img.qinweizhao.com/2022/03/2022-03-17_235946.png)\n\n  extension-configs 参数为一个 List。\n\n  **启动程序**\n\n  访问：[localhost:8080/info](http://localhost:8080/info)\n\n  结果：weizhao-c23\n\n### 3、原理\n\n- **自动注入：** \n\n  NacosConfigStarter 实现了 org.springframework.cloud.bootstrap.config.PropertySourceLocator 接口，并将优先级设置成了最高。 在 Spring Cloud 应用启动阶段，会主动从 Nacos Server 端获取对应的数据，并将获取到的 数据转换成 PropertySource 且入到 Environment 的 PropertySources 属性中，所以使用 @Value 注解也能直接获取 Nacos Server 端配置的内容。\n\n- **动态刷新：** \n\n  Nacos Config Starter 默认为所有获取数据成功的 Nacos 的配置项添加了监听功能，在监听 到服务端配置发生变化时会实时触发 org.springframework.cloud.context.refresh.ContextRefresher 的 refresh 方法 。 如果需要对 Bean 进行动态刷新，请参照 Spring 和 Spring Cloud 规范。**推荐给类添加** **@RefreshScope** **或** **@ConfigurationProperties** **注解**。\n\n### 4、建议\n\n- **namespace** **与** **group** **最佳实践**\n\n  每个微服务创建自己的 namespace 进行隔离，group 来区分 dev，beta，prod 等环境\n\n### 5、MySQL 支持\n\n在单机模式时 Nacos 使用嵌入式数据库实现数据的存储，不方便观察数据存储的基本情况。可以配置 MySQL 数据库（版本要求：5.6.5+），可视化的查看数据的存储。\n\n- 使用 *conf/nacos-mysql.sql* 文件初始化数据库\n- 修改conf/application.properties文件增加 MySQL 支持\n\n```properties\nspring.datasource.platform=mysql\ndb.num=1\ndb.url.0=jdbc:mysql://localhost:3306/nacos-mysql?characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true&useUnicode=true&useSSL=false&serverTimezone=UTC\ndb.user=root\ndb.password=root\n```\n\n### 6、集群部署\n\n集群模式适用于生产环境需要依赖 MySQL，单机可不必，三个及以上 Nacos 节点才能构成集群。\n\n1、在 Nacos 的解压目录`nacos/conf`目录下，修改配置文件`cluster.conf`\n\n```sh\n192.168.79.65:8848\n192.168.79.66:8848\n192.168.79.67:8848\n```\n\n2、修改`bootstrap.yml`中的`server-addr`属性，添加对应集群地址。\n\n```properties\nserver-addr: 192.168.79.65:8848,192.168.79.66:8848,192.168.79.67:8848\n```\n\n启动运行成功后查看**集群管理/节点列表**来判断是否成功。\n\n##  \n\n>代码地址：\n>\n>https://github.com/qinweizhao/qwz-sample/tree/master/distributed/d-nacos/dn-config \n\n', '', 'springcloudalibabanacos--zuo-wei-pei-zhi-zhong-xin', 0, 'Spring Cloud Alibaba Nacos-作为配置中心在微服务架构中，每个服务都可能会多机部署，当需要更改配置时，则每一台服务器上的配置都要被更改，这无疑是繁琐的。使用配置中心可以将配置从各应用中剥离出来，对配置进行统一管理，应用自身不需要自己去管理配置。配置中心的服务流程如下：1、用户', '', '', 'Spring Cloud Alibaba Nacos-配置中心', 0, NULL, 21, 6904);
COMMIT;

-- ----------------------------
-- Table structure for tags
-- ----------------------------
DROP TABLE IF EXISTS `tags`;
CREATE TABLE `tags` (
  `id` int NOT NULL AUTO_INCREMENT,
  `create_time` datetime(6) DEFAULT NULL,
  `update_time` datetime(6) DEFAULT NULL,
  `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `slug` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `slug_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL,
  `thumbnail` varchar(1023) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE KEY `UK_sn0d91hxu700qcw0n4pebp5vc` (`slug`) USING BTREE,
  KEY `tags_name` (`name`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=45 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Records of tags
-- ----------------------------
BEGIN;
INSERT INTO `tags` (`id`, `create_time`, `update_time`, `name`, `slug`, `slug_name`, `thumbnail`) VALUES (4, '2021-07-26 17:00:45.695000', '2021-11-15 13:33:00.539000', 'RabbitMQ', 'rabbitmq', NULL, '');
INSERT INTO `tags` (`id`, `create_time`, `update_time`, `name`, `slug`, `slug_name`, `thumbnail`) VALUES (16, '2021-08-09 15:29:00.091000', '2021-11-15 13:32:36.831000', 'Docker', 'docker', NULL, '');
INSERT INTO `tags` (`id`, `create_time`, `update_time`, `name`, `slug`, `slug_name`, `thumbnail`) VALUES (17, '2021-08-09 15:29:14.970000', '2021-11-15 13:32:20.461000', 'Git', 'git', NULL, '');
INSERT INTO `tags` (`id`, `create_time`, `update_time`, `name`, `slug`, `slug_name`, `thumbnail`) VALUES (18, '2021-08-09 15:41:54.556000', '2021-11-15 13:32:10.446000', 'MySQL', 'mysql', NULL, '');
INSERT INTO `tags` (`id`, `create_time`, `update_time`, `name`, `slug`, `slug_name`, `thumbnail`) VALUES (19, '2021-08-09 16:24:32.995000', '2021-11-15 13:31:52.133000', 'Spring', 'spring', NULL, '');
INSERT INTO `tags` (`id`, `create_time`, `update_time`, `name`, `slug`, `slug_name`, `thumbnail`) VALUES (20, '2021-08-09 16:37:55.491000', '2021-11-15 13:31:41.347000', 'Nginx', 'nginx', NULL, '');
INSERT INTO `tags` (`id`, `create_time`, `update_time`, `name`, `slug`, `slug_name`, `thumbnail`) VALUES (21, '2021-08-09 16:59:30.103000', '2021-11-15 13:31:27.636000', 'SpringBoot', 'springboot', NULL, '');
INSERT INTO `tags` (`id`, `create_time`, `update_time`, `name`, `slug`, `slug_name`, `thumbnail`) VALUES (22, '2021-11-15 13:38:07.419000', '2021-11-15 13:38:07.419000', 'CentOS', 'centos', NULL, '');
INSERT INTO `tags` (`id`, `create_time`, `update_time`, `name`, `slug`, `slug_name`, `thumbnail`) VALUES (23, '2021-11-15 13:44:36.178000', '2021-11-15 13:44:36.178000', 'Redis', 'redis', NULL, '');
INSERT INTO `tags` (`id`, `create_time`, `update_time`, `name`, `slug`, `slug_name`, `thumbnail`) VALUES (24, '2021-11-15 13:48:53.836000', '2021-11-15 13:48:53.836000', 'Kibana', 'kibana', NULL, '');
INSERT INTO `tags` (`id`, `create_time`, `update_time`, `name`, `slug`, `slug_name`, `thumbnail`) VALUES (25, '2021-11-15 13:50:45.684000', '2021-11-15 13:51:07.314000', 'Elasticsearch', 'elasticsearch', NULL, '');
INSERT INTO `tags` (`id`, `create_time`, `update_time`, `name`, `slug`, `slug_name`, `thumbnail`) VALUES (26, '2021-11-15 13:52:28.696000', '2021-11-15 13:52:34.123000', 'Windows', 'windows', NULL, '');
INSERT INTO `tags` (`id`, `create_time`, `update_time`, `name`, `slug`, `slug_name`, `thumbnail`) VALUES (27, '2021-11-15 13:54:42.963000', '2021-11-15 13:56:10.530000', 'Java', 'java', NULL, '');
INSERT INTO `tags` (`id`, `create_time`, `update_time`, `name`, `slug`, `slug_name`, `thumbnail`) VALUES (28, '2021-11-15 14:01:16.043000', '2022-01-05 10:47:42.547000', 'SpringSecurity', 'springsecurity', NULL, 'https://www.qinweizhao.com/upload/2022/01/spring-framework-c0b0337a74d9439ba1b2fa2ccc7b2d91.png');
INSERT INTO `tags` (`id`, `create_time`, `update_time`, `name`, `slug`, `slug_name`, `thumbnail`) VALUES (29, '2021-11-15 14:03:16.969000', '2021-11-15 14:03:16.969000', 'Maven', 'maven', NULL, '');
INSERT INTO `tags` (`id`, `create_time`, `update_time`, `name`, `slug`, `slug_name`, `thumbnail`) VALUES (30, '2021-11-15 14:05:34.033000', '2021-11-15 14:05:34.033000', 'GitHub', 'github', NULL, '');
INSERT INTO `tags` (`id`, `create_time`, `update_time`, `name`, `slug`, `slug_name`, `thumbnail`) VALUES (31, '2021-11-15 14:16:31.865000', '2021-11-15 14:16:31.865000', 'ECMAScript', 'ecmascript', NULL, '');
INSERT INTO `tags` (`id`, `create_time`, `update_time`, `name`, `slug`, `slug_name`, `thumbnail`) VALUES (32, '2021-11-15 14:36:59.336000', '2021-11-15 14:36:59.336000', 'Node.js', 'nodejs', NULL, '');
INSERT INTO `tags` (`id`, `create_time`, `update_time`, `name`, `slug`, `slug_name`, `thumbnail`) VALUES (33, '2021-11-15 14:37:53.978000', '2021-11-15 14:37:53.978000', 'Babel', 'babel', NULL, '');
INSERT INTO `tags` (`id`, `create_time`, `update_time`, `name`, `slug`, `slug_name`, `thumbnail`) VALUES (34, '2021-11-15 14:38:44.199000', '2021-11-15 14:38:44.199000', 'webpack', 'webpack', NULL, '');
INSERT INTO `tags` (`id`, `create_time`, `update_time`, `name`, `slug`, `slug_name`, `thumbnail`) VALUES (35, '2021-11-15 14:42:04.791000', '2021-11-15 14:42:04.791000', 'MyBatis', 'mybatis', NULL, '');
INSERT INTO `tags` (`id`, `create_time`, `update_time`, `name`, `slug`, `slug_name`, `thumbnail`) VALUES (36, '2021-11-23 18:26:44.227000', '2021-11-23 18:26:44.227000', 'Jenkins', 'jenkins', NULL, '');
INSERT INTO `tags` (`id`, `create_time`, `update_time`, `name`, `slug`, `slug_name`, `thumbnail`) VALUES (37, '2021-11-25 15:33:22.018000', '2021-11-25 15:33:22.018000', 'Gradle ', 'gradle', NULL, '');
INSERT INTO `tags` (`id`, `create_time`, `update_time`, `name`, `slug`, `slug_name`, `thumbnail`) VALUES (38, '2021-11-27 23:27:21.586000', '2021-11-27 23:27:21.586000', 'Site', 'site', NULL, '');
INSERT INTO `tags` (`id`, `create_time`, `update_time`, `name`, `slug`, `slug_name`, `thumbnail`) VALUES (39, '2022-01-07 16:19:17.433000', '2022-01-07 16:19:17.433000', 'Nacos', 'nacos', NULL, '');
INSERT INTO `tags` (`id`, `create_time`, `update_time`, `name`, `slug`, `slug_name`, `thumbnail`) VALUES (40, '2022-03-06 18:53:58.194000', '2022-03-06 18:53:58.194000', 'Other', 'other', NULL, '');
INSERT INTO `tags` (`id`, `create_time`, `update_time`, `name`, `slug`, `slug_name`, `thumbnail`) VALUES (41, '2022-03-12 15:57:46.807000', '2022-03-12 15:57:46.807000', 'Calf', 'calf', NULL, '');
INSERT INTO `tags` (`id`, `create_time`, `update_time`, `name`, `slug`, `slug_name`, `thumbnail`) VALUES (43, '2022-03-15 15:34:31.959000', '2022-03-17 21:10:49.430000', 'Gateway', 'gateway', NULL, '');
COMMIT;

-- ----------------------------
-- Table structure for theme_settings
-- ----------------------------
DROP TABLE IF EXISTS `theme_settings`;
CREATE TABLE `theme_settings` (
  `id` int NOT NULL AUTO_INCREMENT,
  `create_time` datetime(6) DEFAULT NULL,
  `update_time` datetime(6) DEFAULT NULL,
  `setting_key` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `theme_id` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `setting_value` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  KEY `theme_settings_setting_key` (`setting_key`) USING BTREE,
  KEY `theme_settings_theme_id` (`theme_id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=1169 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Records of theme_settings
-- ----------------------------
BEGIN;
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (201, '2021-06-08 21:04:17.383000', '2021-06-08 21:04:17.383000', 'card_hover_summary', 'wz', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (202, '2021-06-08 21:04:17.388000', '2021-06-08 21:04:17.388000', 'tag_patternimg', 'wz', 'https://cdn.jsdelivr.net/gh/xzzai/static@master/uPic/default-bg.jpg');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (203, '2021-06-08 21:04:17.391000', '2021-06-08 21:04:17.391000', 'pjax_enabled', 'wz', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (204, '2021-06-08 21:04:17.395000', '2021-06-08 21:04:17.395000', 'visit_statistics', 'wz', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (205, '2021-06-08 21:04:17.398000', '2021-06-08 21:04:17.398000', 'links_placeholder', 'wz', 'https://cdn.jsdelivr.net/gh/xzzai/static@master/uPic/default-bg.jpg');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (206, '2021-06-08 21:04:17.402000', '2021-06-08 21:04:17.402000', 'posts_style', 'wz', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (207, '2021-06-08 21:04:17.406000', '2021-06-08 21:04:17.406000', 'list_show_date', 'wz', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (208, '2021-06-08 21:04:17.410000', '2021-06-08 21:04:17.410000', 'archives_patternimg', 'wz', 'https://cdn.jsdelivr.net/gh/xzzai/static@master/uPic/default-bg.jpg');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (209, '2021-06-08 21:04:17.414000', '2021-06-08 21:04:17.414000', 'post_nepre', 'wz', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (210, '2021-06-08 21:04:17.418000', '2021-06-08 21:04:17.418000', 'post_toc', 'wz', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (211, '2021-06-08 21:04:17.421000', '2021-06-08 21:04:17.421000', 'open_night_mode', 'wz', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (212, '2021-06-08 21:04:17.426000', '2021-06-08 21:04:17.426000', 'default_hide_menu', 'wz', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (213, '2021-06-08 21:04:17.430000', '2021-06-08 21:04:17.430000', 'journals_patternimg', 'wz', 'https://cdn.jsdelivr.net/gh/xzzai/static@master/uPic/default-bg.jpg');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (214, '2021-06-08 21:04:17.434000', '2021-06-08 21:04:17.434000', 'right_corner_circle', 'wz', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (215, '2021-06-08 21:04:17.438000', '2021-06-08 21:04:17.438000', 'rss', 'wz', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (216, '2021-06-08 21:04:17.442000', '2021-06-08 21:04:17.442000', 'more_lang_code', 'wz', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (217, '2021-06-08 21:04:17.446000', '2021-06-08 21:04:17.446000', 'xiang_ying_xiong_zhi_jing', 'wz', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (218, '2021-06-08 21:04:17.450000', '2021-06-08 21:04:17.450000', 'enable_code_highlight', 'wz', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (219, '2021-06-08 21:04:17.454000', '2021-06-08 21:04:17.454000', 'tags_title', 'wz', '标签列表');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (220, '2021-06-08 21:04:17.458000', '2021-06-08 21:04:17.458000', 'code_style', 'wz', 'tomorrow-night-bright');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (221, '2021-06-08 21:04:17.461000', '2021-06-08 21:04:17.461000', 'achieve_title', 'wz', '归档');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (222, '2021-06-08 21:04:17.465000', '2021-06-08 21:04:17.465000', 'enabled_index_cover_height', 'wz', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (223, '2021-06-08 21:04:17.469000', '2021-06-08 21:04:17.469000', 'enable_photo', 'wz', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (224, '2021-06-08 21:04:17.473000', '2021-06-08 21:04:17.473000', 'photos_patternimg', 'wz', 'https://cdn.jsdelivr.net/gh/xzzai/static@master/uPic/default-bg.jpg');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (225, '2021-06-08 21:04:17.477000', '2021-06-08 21:04:17.477000', 'auto_night_mode', 'wz', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (226, '2021-06-08 21:04:17.482000', '2021-06-08 21:04:17.482000', 'search_patternimg', 'wz', 'https://cdn.jsdelivr.net/gh/xzzai/static@master/uPic/default-bg.jpg');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (227, '2021-06-08 21:04:17.486000', '2021-06-08 21:04:17.486000', 'collpaseCode', 'wz', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (228, '2021-06-08 21:04:17.491000', '2021-06-08 21:04:17.491000', 'photos_title', 'wz', '相册');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (229, '2021-06-08 21:04:17.495000', '2021-06-08 21:04:17.495000', 'idea_code_style', 'wz', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (230, '2021-06-08 21:04:17.499000', '2021-06-08 21:04:17.499000', 'show_popular', 'wz', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (231, '2021-06-08 21:04:17.537000', '2021-06-08 21:04:17.537000', 'jounarls_title', 'wz', '日志');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (232, '2021-06-08 21:04:17.570000', '2021-06-08 21:04:17.570000', 'home_cover', 'wz', 'https://cdn.jsdelivr.net/gh/xzzai/static@master/uPic/default-bg.jpg');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (233, '2021-06-08 21:04:17.605000', '2021-06-08 21:04:17.605000', 'categories_title', 'wz', '分类列表');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (234, '2021-06-08 21:04:17.647000', '2021-06-08 21:04:17.647000', 'categories_patternimg', 'wz', 'https://cdn.jsdelivr.net/gh/xzzai/static@master/uPic/default-bg.jpg');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (235, '2021-06-08 21:04:17.652000', '2021-06-08 21:04:17.652000', 'links_title', 'wz', '友链');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (236, '2021-06-08 21:04:17.656000', '2021-06-08 21:04:17.656000', 'enable_code_lineNumber', 'wz', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (237, '2021-06-08 21:04:17.661000', '2021-06-08 21:04:17.661000', 'links_patternimg', 'wz', 'https://cdn.jsdelivr.net/gh/xzzai/static@master/uPic/default-bg.jpg');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (238, '2021-06-08 21:04:17.665000', '2021-06-08 21:04:17.665000', 'enable_image_view', 'wz', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (239, '2021-06-08 21:04:17.669000', '2021-06-08 21:04:17.669000', 'enabled_mathjax', 'wz', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (878, '2021-11-12 14:23:18.922000', '2021-11-12 14:23:18.922000', 'gravatar_source', 'blog-frontend-portal', 'https://sdn.geekzu.org/avatar');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (879, '2021-11-12 14:23:18.984000', '2021-11-12 14:23:18.984000', 'enable_like', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (880, '2021-11-12 14:23:19.019000', '2021-11-12 14:23:19.019000', 'live2d_showF12Status', 'blog-frontend-portal', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (881, '2021-11-12 14:23:19.054000', '2022-01-05 17:51:00.870000', 'lazyload_avatar', 'blog-frontend-portal', 'https://cdn.jsdelivr.net/gh/qinhua/halo-theme-joe2.0@master/source/svg/spinner-preloader.svg');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (882, '2021-11-12 14:23:19.084000', '2021-11-12 14:23:19.084000', 'live2d_showWelcomeMessage', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (883, '2021-11-12 14:23:19.114000', '2021-11-12 14:23:19.114000', 'enable_code_line_number', 'blog-frontend-portal', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (884, '2021-11-12 14:23:19.147000', '2021-11-23 19:16:16.807000', 'live2d_canCloseLive2d', 'blog-frontend-portal', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (885, '2021-11-12 14:23:19.177000', '2021-11-12 14:23:19.177000', 'live2d_takagiToolLine', 'blog-frontend-portal', '20px');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (886, '2021-11-12 14:23:19.210000', '2021-11-12 14:23:19.210000', 'enable_mathjax', 'blog-frontend-portal', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (887, '2021-11-12 14:23:19.238000', '2021-11-12 14:23:19.238000', 'comment_email_poptext', 'blog-frontend-portal', '你将收到回复通知');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (888, '2021-11-12 14:23:19.279000', '2021-11-12 16:56:46.346000', 'enable_index_list_effect', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (889, '2021-11-12 14:23:19.309000', '2021-11-12 14:23:19.309000', 'enable_search', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (890, '2021-11-12 14:23:19.337000', '2021-11-12 17:04:36.826000', 'static_mode', 'blog-frontend-portal', 'light');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (891, '2021-11-12 14:23:19.371000', '2021-11-12 14:23:19.371000', 'enable_banner_handle', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (892, '2021-11-12 14:23:19.406000', '2022-01-05 00:41:08.000000', 'enable_weather', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (893, '2021-11-12 14:23:19.436000', '2021-11-12 14:23:19.436000', 'enable_share_weixin', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (894, '2021-11-12 14:23:19.466000', '2021-11-12 14:23:19.466000', 'enable_archive_category', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (895, '2021-11-12 14:23:19.497000', '2021-11-12 14:23:19.497000', 'comment_aword', 'blog-frontend-portal', '你是我一生只会遇见一次的惊喜 ...');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (896, '2021-11-12 14:23:19.536000', '2021-11-12 14:23:19.536000', 'comment_empty_text', 'blog-frontend-portal', '暂无评论');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (897, '2021-11-12 14:23:19.568000', '2021-11-12 14:23:19.568000', 'photos_title', 'blog-frontend-portal', '我的图库');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (898, '2021-11-12 14:23:19.597000', '2021-11-12 14:23:19.597000', 'light_time_scope', 'blog-frontend-portal', '5:00~19:00');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (899, '2021-11-12 14:23:19.639000', '2021-11-12 14:23:19.639000', 'live2d_takagiEdgeSide', 'blog-frontend-portal', 'left:0');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (900, '2021-11-12 14:23:19.665000', '2022-01-06 12:34:19.327000', 'backdrop', 'blog-frontend-portal', 'plexus');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (901, '2021-11-12 14:23:19.690000', '2021-11-12 14:23:19.690000', 'show_logo', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (902, '2021-11-12 14:23:19.722000', '2021-11-12 14:23:19.722000', 'archive_timeline_metric', 'blog-frontend-portal', 'month');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (903, '2021-11-12 14:23:19.764000', '2021-11-12 14:23:19.764000', 'comment_loading_style', 'blog-frontend-portal', 'default');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (904, '2021-11-12 14:23:19.847000', '2021-11-12 14:23:19.847000', 'enable_comment_ua', 'blog-frontend-portal', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (905, '2021-11-12 14:23:19.906000', '2021-11-12 17:30:35.908000', 'index_list_effect_class', 'blog-frontend-portal', 'fadeInDown');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (906, '2021-11-12 14:23:19.965000', '2021-11-12 14:23:19.965000', 'live2d_modelTexturesRandMode', 'blog-frontend-portal', 'rand');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (907, '2021-11-12 14:23:20.023000', '2021-11-12 14:23:20.023000', 'live2d_modelAPI', 'blog-frontend-portal', '//live2d.fghrsh.net/api/');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (908, '2021-11-12 14:23:20.074000', '2021-11-12 17:00:57.909000', 'enable_comment_autoload', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (909, '2021-11-12 14:23:20.178000', '2021-11-23 19:26:45.842000', 'show_lifetime', 'blog-frontend-portal', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (910, '2021-11-12 14:23:20.241000', '2021-11-12 14:23:20.241000', 'live2d_modelRandMode', 'blog-frontend-portal', 'rand');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (911, '2021-11-12 14:23:20.293000', '2021-11-12 14:23:20.293000', 'journals_title', 'blog-frontend-portal', '我的动态');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (912, '2021-11-12 14:23:20.331000', '2021-11-12 14:23:20.331000', 'live2d_showToolMenu', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (913, '2021-11-12 14:23:20.357000', '2021-11-12 14:23:20.357000', 'live2d_takagiTipsSize', 'blog-frontend-portal', '250x70');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (914, '2021-11-12 14:23:20.382000', '2021-11-12 14:23:20.382000', 'live2d_takagiToolTop', 'blog-frontend-portal', '0px');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (915, '2021-11-12 14:23:20.408000', '2021-11-12 14:23:20.408000', 'enable_aside_ads', 'blog-frontend-portal', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (916, '2021-11-12 14:23:20.434000', '2022-02-08 14:10:48.359000', 'enable_hot_category', 'blog-frontend-portal', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (917, '2021-11-12 14:23:20.482000', '2021-11-12 14:23:20.482000', 'enable_back2top', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (918, '2021-11-12 14:23:20.515000', '2021-12-31 11:27:18.539000', 'content_max_width', 'blog-frontend-portal', '1320px');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (919, '2021-11-12 14:23:20.540000', '2021-11-12 14:23:20.540000', 'fold_long_code', 'blog-frontend-portal', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (920, '2021-11-12 14:23:20.562000', '2021-11-12 14:23:20.562000', 'enable_glass_blur', 'blog-frontend-portal', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (921, '2021-11-12 14:23:20.586000', '2021-11-12 14:23:20.586000', 'live2d_takagiMinWidth', 'blog-frontend-portal', '768px');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (922, '2021-11-12 14:23:20.621000', '2021-11-12 14:23:20.621000', 'live2d_modelStorage', 'blog-frontend-portal', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (923, '2021-11-12 14:23:20.652000', '2021-11-12 14:23:20.652000', 'photos_page_size', 'blog-frontend-portal', '10');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (924, '2021-11-12 14:23:20.675000', '2021-11-12 14:23:20.675000', 'live2d_modelTexturesId', 'blog-frontend-portal', '1');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (925, '2021-11-12 14:23:20.699000', '2021-11-12 14:23:20.699000', 'rip_mode', 'blog-frontend-portal', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (926, '2021-11-12 14:23:20.723000', '2021-11-12 14:23:20.723000', 'enable_banner_loop', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (927, '2021-11-12 14:23:20.756000', '2021-11-12 14:27:25.952000', 'enable_rss', 'blog-frontend-portal', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (928, '2021-11-12 14:23:20.787000', '2021-11-12 14:23:20.787000', 'live2d_takagiDraggableRevert', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (929, '2021-11-12 14:23:20.811000', '2021-11-12 14:23:20.811000', 'show_newest_post', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (930, '2021-11-12 14:23:20.834000', '2022-01-05 17:28:13.548000', 'enable_background_light', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (931, '2021-11-12 14:23:20.853000', '2021-11-12 14:23:20.853000', 'enable_photos_effect', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (932, '2021-11-12 14:23:20.871000', '2021-12-16 14:53:50.560000', 'banner_direction', 'blog-frontend-portal', 'vertical');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (933, '2021-11-12 14:23:20.895000', '2021-11-12 14:23:20.895000', 'enable_donate', 'blog-frontend-portal', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (934, '2021-11-12 14:23:20.914000', '2021-11-12 14:23:20.914000', 'enable_post_ads', 'blog-frontend-portal', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (935, '2021-11-12 14:23:20.933000', '2021-11-12 14:23:20.933000', 'show_loaded_time', 'blog-frontend-portal', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (936, '2021-11-12 14:23:20.952000', '2021-11-12 14:23:20.952000', 'avatar_frame', 'blog-frontend-portal', '0');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (937, '2021-11-12 14:23:20.975000', '2021-11-12 14:23:20.975000', 'enable_toc', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (938, '2021-11-12 14:23:20.998000', '2021-11-12 14:23:20.998000', 'enable_strips', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (939, '2021-11-12 14:23:21.020000', '2021-11-12 14:23:21.020000', 'live2d_takagiFontSize', 'blog-frontend-portal', '12px');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (940, '2021-11-12 14:23:21.042000', '2021-11-12 14:23:21.042000', 'long_code_height', 'blog-frontend-portal', '800');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (941, '2021-11-12 14:23:21.070000', '2021-11-12 14:23:21.070000', 'logo_radius', 'blog-frontend-portal', '4px');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (942, '2021-11-12 14:23:21.100000', '2021-11-12 14:23:21.100000', 'fallback_img', 'blog-frontend-portal', 'http://placeholder.idcd.com/?w=600&h=300&text=MBlog&bgcolor=%23F5F5F5&fontcolor=%23DEDEDE&fontsize=18&fontfamily=2');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (943, '2021-11-12 14:23:21.124000', '2021-11-12 14:23:21.124000', 'enable_auto_switch_mode', 'blog-frontend-portal', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (944, '2021-11-12 14:23:21.150000', '2021-11-12 14:28:11.325000', 'enable_passage_tips', 'blog-frontend-portal', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (945, '2021-11-12 14:23:21.172000', '2021-11-12 14:23:21.172000', 'journals_empty_text', 'blog-frontend-portal', '暂无日志数据');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (946, '2021-11-12 14:23:21.195000', '2022-01-06 18:05:56.592000', 'enabel_category_celcius', 'blog-frontend-portal', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (947, '2021-11-12 14:23:21.218000', '2021-11-12 14:23:21.218000', 'live2d_canTurnToHomePage', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (948, '2021-11-12 14:23:21.244000', '2022-01-05 10:04:35.160000', 'enable_clean_mode', 'blog-frontend-portal', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (949, '2021-11-12 14:23:21.267000', '2021-11-12 14:23:21.267000', 'enable_active_shadow', 'blog-frontend-portal', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (950, '2021-11-12 14:23:21.290000', '2021-11-12 14:23:21.290000', 'live2d_takagiDraggable', 'blog-frontend-portal', 'disable');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (951, '2021-11-12 14:23:21.313000', '2021-11-12 14:23:21.313000', 'comment_author_poptext', 'blog-frontend-portal', '输入QQ号将自动拉取昵称和头像');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (952, '2021-11-12 14:23:21.335000', '2021-11-12 14:23:21.335000', 'links_title', 'blog-frontend-portal', '友情链接');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (953, '2021-11-12 14:23:21.352000', '2021-11-12 14:23:21.352000', 'enable_comment_journal', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (954, '2021-11-12 14:23:21.370000', '2021-11-12 14:27:26.337000', 'show_level', 'blog-frontend-portal', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (955, '2021-11-12 14:23:21.402000', '2021-11-12 14:23:21.402000', 'live2d_showF12OpenMsg', 'blog-frontend-portal', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (956, '2021-11-12 14:23:21.422000', '2021-11-12 14:23:21.422000', 'live2d_modelId', 'blog-frontend-portal', '1');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (957, '2021-11-12 14:23:21.448000', '2021-11-12 14:23:21.448000', 'live2d_showHitokoto', 'blog-frontend-portal', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (958, '2021-11-12 14:23:21.472000', '2021-11-12 14:23:21.472000', 'loading_bar_height', 'blog-frontend-portal', '3px');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (959, '2021-11-12 14:23:21.497000', '2021-11-12 14:23:21.497000', 'toc_depth', 'blog-frontend-portal', '0');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (960, '2021-11-12 14:23:21.519000', '2021-11-12 14:23:21.519000', 'enable_comment', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (961, '2021-11-12 14:23:21.550000', '2021-11-12 14:23:21.550000', 'banner_delay', 'blog-frontend-portal', '3500');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (962, '2021-11-12 14:23:21.585000', '2021-11-12 14:23:21.585000', 'enable_journal_effect', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (963, '2021-11-12 14:23:21.610000', '2021-11-12 14:23:21.610000', 'code_theme', 'blog-frontend-portal', 'one-dark');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (964, '2021-11-12 14:23:21.638000', '2021-11-12 14:23:21.638000', 'live2d_canSwitchTextures', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (965, '2021-11-12 14:23:21.661000', '2021-11-12 14:23:21.661000', 'web_font', 'blog-frontend-portal', 'off');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (966, '2021-11-12 14:23:21.684000', '2021-11-12 14:23:21.684000', 'enable_copy', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (967, '2021-11-12 14:23:21.706000', '2021-11-12 14:23:21.706000', 'mode_color_dark', 'blog-frontend-portal', '#9999ff');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (968, '2021-11-12 14:23:21.729000', '2021-11-12 14:23:21.729000', 'live2d_showCopyMessage', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (969, '2021-11-12 14:23:21.752000', '2021-11-12 14:23:21.752000', 'enable_code_expander', 'blog-frontend-portal', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (971, '2021-11-12 14:23:21.809000', '2021-11-13 20:23:23.030000', 'enable_index_list_ajax', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (972, '2021-11-12 14:23:21.840000', '2021-11-12 14:23:21.840000', 'enable_title_shadow', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (973, '2021-11-12 14:23:21.868000', '2021-11-13 20:21:21.407000', 'enable_navbar_icon', 'blog-frontend-portal', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (974, '2021-11-12 14:23:21.893000', '2021-11-23 10:29:31.709000', 'enable_post_thumbnail', 'blog-frontend-portal', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (975, '2021-11-12 14:23:21.947000', '2021-11-19 10:46:24.520000', 'enable_copy_right_text', 'blog-frontend-portal', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (976, '2021-11-12 14:23:21.975000', '2021-11-12 14:23:21.975000', 'mode_color_light', 'blog-frontend-portal', '#fb6c28');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (977, '2021-11-12 14:23:22.000000', '2021-11-12 14:23:22.000000', 'offscreen_title_leave', 'blog-frontend-portal', '歪，你去哪里了？');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (978, '2021-11-12 14:23:22.026000', '2021-12-16 14:54:07.197000', 'show_blogger', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (979, '2021-11-12 14:23:22.056000', '2021-11-25 16:54:03.980000', 'enable_footer', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (980, '2021-11-12 14:23:22.085000', '2021-11-12 14:45:47.374000', 'enable_sitemap', 'blog-frontend-portal', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (981, '2021-11-12 14:23:22.109000', '2021-11-12 14:41:31.892000', 'show_newreply', 'blog-frontend-portal', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (982, '2021-11-12 14:23:22.133000', '2022-01-05 00:30:33.459000', 'enable_offscreen_tip', 'blog-frontend-portal', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (983, '2021-11-12 14:23:22.152000', '2021-11-12 14:23:22.152000', 'enable_fixed_header', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (984, '2021-11-12 14:23:22.170000', '2021-11-12 14:23:22.170000', 'cursor_effect', 'blog-frontend-portal', 'off');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (985, '2021-11-12 14:23:22.193000', '2021-11-23 19:16:19.622000', 'enable_live2d', 'blog-frontend-portal', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (986, '2021-11-12 14:23:22.213000', '2021-11-12 14:23:22.213000', 'comment_avatar_error', 'blog-frontend-portal', 'https://cdn.jsdelivr.net/gh/qinhua/halo-theme-joe2.0@master/source/img/error_avatar.jpg');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (987, '2021-11-12 14:23:22.233000', '2021-11-12 14:26:34.956000', 'enable_birthday', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (988, '2021-11-12 14:23:22.257000', '2021-11-12 14:23:22.257000', 'enable_aside', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (989, '2021-11-12 14:23:22.283000', '2021-11-12 14:23:22.283000', 'show_tag_cloud', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (990, '2021-11-12 14:23:22.307000', '2021-11-12 14:23:22.307000', 'enable_share_qzone', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (991, '2021-11-12 14:23:22.338000', '2021-11-12 14:23:22.338000', 'qrcode_title', 'blog-frontend-portal', '我的二维码');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (992, '2021-11-12 14:23:22.366000', '2022-01-05 10:48:54.875000', 'cursor_skin', 'blog-frontend-portal', 'off');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (993, '2021-11-12 14:23:22.389000', '2021-11-12 14:23:22.389000', 'enable_progress_bar', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (994, '2021-11-12 14:23:22.414000', '2021-11-12 14:23:22.414000', 'enable_cdn', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (995, '2021-11-12 14:23:22.432000', '2022-03-05 21:31:07.870000', 'enable_music_player', 'blog-frontend-portal', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (996, '2021-11-12 14:23:22.461000', '2021-11-12 14:23:22.461000', 'enable_indent', 'blog-frontend-portal', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (997, '2021-11-12 14:23:22.490000', '2021-11-12 14:23:22.490000', 'live2d_canSwitchHitokoto', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (998, '2021-11-12 14:23:22.518000', '2021-11-12 14:23:22.518000', 'enable_share_qq', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (999, '2021-11-12 14:23:22.557000', '2021-11-12 14:23:22.557000', 'live2d_canTurnToAboutPage', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1000, '2021-11-12 14:23:22.587000', '2021-11-12 14:23:22.587000', 'enable_day_words', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1001, '2021-11-12 14:23:22.612000', '2021-11-12 14:23:22.612000', 'enable_share_weibo', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1002, '2021-11-12 14:23:22.636000', '2021-11-12 14:23:22.636000', 'live2d_takagiToolFont', 'blog-frontend-portal', '14px');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1003, '2021-11-12 14:23:22.667000', '2021-11-12 14:23:22.667000', 'live2d_hitokotoAPI', 'blog-frontend-portal', 'hitokoto.cn');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1004, '2021-11-12 14:23:22.689000', '2021-11-12 14:23:22.689000', 'avatar_widget', 'blog-frontend-portal', '0');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1005, '2021-11-12 14:23:22.712000', '2022-01-05 17:51:02.274000', 'default_avatar', 'blog-frontend-portal', 'https://www.qinweizhao.com/upload/2022/01/175018-80790d99894249f78a1f7e3ab58e7af7.jpg');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1006, '2021-11-12 14:23:22.738000', '2021-11-12 14:23:22.738000', 'live2d_showF12Message', 'blog-frontend-portal', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1007, '2021-11-12 14:23:22.761000', '2021-11-12 14:23:22.761000', 'avatar_type', 'blog-frontend-portal', 'circle');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1008, '2021-11-12 14:23:22.784000', '2021-11-12 14:23:22.784000', 'live2d_canSwitchModel', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1009, '2021-11-12 14:23:22.807000', '2021-11-12 14:23:22.807000', 'enable_social', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1010, '2021-11-12 14:23:22.827000', '2021-11-12 14:23:22.827000', 'photos_empty_text', 'blog-frontend-portal', '暂无图片数据');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1011, '2021-11-12 14:23:22.845000', '2021-11-12 14:23:22.845000', 'home_empty_text', 'blog-frontend-portal', '暂无文章数据');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1012, '2021-11-12 14:23:22.872000', '2021-11-12 14:23:22.872000', 'offscreen_title_back', 'blog-frontend-portal', '(つェ⊂)咦，又回来了!');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1013, '2021-11-12 14:23:22.890000', '2021-11-12 14:23:22.890000', 'photos_gap', 'blog-frontend-portal', '10');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1014, '2021-11-12 14:23:22.910000', '2021-11-12 14:23:22.910000', 'post_thumbnail', 'blog-frontend-portal', 'https://picsum.photos/id/1027/210/140');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1015, '2021-11-12 14:23:22.933000', '2021-11-12 14:23:22.933000', 'archive_empty_text', 'blog-frontend-portal', '暂无文章数据');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1016, '2021-11-12 14:23:22.954000', '2021-11-12 14:23:22.954000', 'enable_background_dark', 'blog-frontend-portal', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1017, '2021-11-12 14:23:22.976000', '2022-02-08 14:11:15.470000', 'enable_banner', 'blog-frontend-portal', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1018, '2021-11-12 14:23:22.996000', '2022-01-06 13:18:55.333000', 'enable_banner_autoplay', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1019, '2021-11-12 14:23:23.014000', '2021-11-12 14:23:23.014000', 'qq_group_text', 'blog-frontend-portal', '欢迎加入QQ交流群');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1020, '2021-11-12 14:23:23.031000', '2021-11-12 14:23:23.031000', 'enable_loading_bar', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1021, '2021-11-12 14:23:23.068000', '2021-11-12 14:23:23.068000', 'enable_aside_expander', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1022, '2021-11-12 14:23:23.089000', '2021-11-12 14:23:23.089000', 'enable_archive_effect', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1023, '2021-11-12 14:23:23.107000', '2021-11-12 14:23:23.107000', 'comment_avatar_loading', 'blog-frontend-portal', 'https://cdn.jsdelivr.net/gh/qinhua/halo-theme-joe2.0@master/source/svg/spinner-preloader.svg');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1024, '2021-11-12 14:23:23.127000', '2021-11-12 14:23:23.127000', 'enable_notice', 'blog-frontend-portal', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1025, '2021-11-12 14:23:23.148000', '2021-11-12 14:23:23.148000', 'live2d_screenshotCaptureName', 'blog-frontend-portal', 'live2d.png');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1026, '2021-11-12 14:23:23.173000', '2021-11-12 14:23:23.173000', 'lazyload_thumbnail', 'blog-frontend-portal', 'https://cdn.jsdelivr.net/gh/qinhua/halo-theme-joe2.0@master/source/img/lazyload.gif');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1027, '2021-11-12 14:23:23.196000', '2021-11-12 14:23:23.196000', 'archive_title', 'blog-frontend-portal', '文章归档');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1028, '2021-11-12 14:23:23.213000', '2021-11-12 14:23:23.213000', 'live2d_canTakeScreenshot', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1029, '2021-11-12 14:23:23.231000', '2021-11-12 14:23:23.231000', 'enable_qrcode', 'blog-frontend-portal', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1030, '2021-11-12 14:23:23.248000', '2021-11-12 14:23:23.248000', 'enable_share', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1031, '2021-11-12 14:23:23.269000', '2021-11-12 14:23:23.269000', 'check_baidu_collect', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1032, '2021-11-12 14:23:23.290000', '2021-11-12 14:23:23.290000', 'enable_code_copy', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1033, '2021-11-12 14:23:23.321000', '2021-11-12 14:23:23.321000', 'enable_share_link', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1034, '2021-11-12 14:23:23.349000', '2021-11-12 14:23:23.349000', 'newreply_page_size', 'blog-frontend-portal', '5');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1035, '2021-11-12 14:23:23.370000', '2021-11-12 14:23:23.370000', 'enable_like_journal', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1036, '2021-11-12 14:23:23.389000', '2021-11-12 14:23:23.389000', 'live2d_takagiSize', 'blog-frontend-portal', '280x250');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1037, '2021-11-12 14:23:23.408000', '2022-01-05 09:57:47.791000', 'enable_post_aside', 'blog-frontend-portal', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1038, '2021-11-12 14:23:23.425000', '2021-11-12 14:23:23.425000', 'newest_page_size', 'blog-frontend-portal', '5');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1040, '2021-11-12 14:33:59.236000', '2022-01-05 09:57:23.222000', 'icp', 'blog-frontend-portal', '豫ICP备20024866号-2');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1041, '2021-11-12 14:54:10.327000', '2022-01-07 14:53:12.107000', 'bannerData', 'blog-frontend-portal', '-|||-https://www.qinweizhao.com/upload/2022/01/dj-2147859_640-4eaa7f58c7cc4fc0b4fb4509f980df88.jpg-|||-#\n=====\n-|||-https://www.qinweizhao.com/upload/2022/01/pioneer-698515_640-85387c642aaa459d9d3273460e7a01e1.jpg-|||-#');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1042, '2021-11-12 15:06:10.247000', '2021-11-12 15:06:10.247000', 'banner_lazyload_img', 'blog-frontend-portal', 'https://cdn.jsdelivr.net/gh/qinhua/halo-theme-joe2.0@master/source/img/lazyload_h.gif');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1043, '2021-11-12 15:10:52.574000', '2021-11-12 15:10:52.574000', 'github', 'blog-frontend-portal', 'https://github.com/qinweizhao');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1044, '2021-11-12 15:11:07.046000', '2021-11-12 15:11:07.046000', 'email', 'blog-frontend-portal', 'yvkg@qq.com');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1045, '2021-11-12 16:54:13.532000', '2021-11-12 16:54:13.532000', 'qq', 'blog-frontend-portal', '35272757');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1047, '2021-11-19 10:45:06.085000', '2021-11-19 10:45:06.085000', 'links_empty_text', 'blog-frontend-portal', '暂无友链');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1048, '2021-11-19 10:45:06.363000', '2021-11-19 10:45:06.363000', 'enable_code_title', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1049, '2021-11-19 10:45:06.916000', '2021-11-19 10:45:06.916000', 'enable_single_code_select', 'blog-frontend-portal', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1050, '2021-11-19 10:45:07.081000', '2022-01-06 12:34:20.352000', 'footer_source', 'blog-frontend-portal', 'theme');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1051, '2021-11-19 10:45:07.236000', '2022-01-28 14:41:25.005000', 'theme_mode', 'blog-frontend-portal', 'light');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1052, '2021-11-19 10:45:07.339000', '2022-01-07 11:42:05.518000', 'access_key', 'blog-frontend-portal', 'weizhao');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1053, '2021-11-19 10:45:07.636000', '2021-11-19 10:45:07.636000', 'enable_banner_switch_button', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1054, '2021-11-19 10:45:07.781000', '2022-03-05 21:32:08.041000', 'enable_links_aside', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1055, '2021-11-19 10:45:08.140000', '2021-11-19 10:45:08.140000', 'enable_journal_add', 'blog-frontend-portal', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1056, '2021-11-19 10:45:08.182000', '2022-01-06 13:18:59.430000', 'enable_banner_pagination', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1057, '2021-11-19 10:45:08.428000', '2021-11-19 10:45:08.428000', 'enable_banner_title', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1058, '2021-11-19 10:45:08.468000', '2021-11-19 10:45:08.468000', 'enable_journals_aside', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1059, '2021-11-19 10:45:08.605000', '2021-11-19 10:45:08.605000', 'enable_console_theme', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1060, '2021-11-23 19:26:11.804000', '2022-01-06 11:23:06.996000', 'author_bg', 'blog-frontend-portal', 'https://www.qinweizhao.com/upload/2022/01/christmas-3009949_640-4b507069328b4277bde9d1e13e708bd1.jpg');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1061, '2021-11-28 16:04:09.851000', '2021-11-28 16:04:09.851000', 'banner_amount_limit', 'blog-frontend-portal', '5');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1062, '2021-11-28 16:04:09.931000', '2022-01-05 09:58:24.333000', 'enable_tags_aside', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1063, '2021-11-28 16:04:10.126000', '2021-11-28 16:04:10.126000', 'leaving_empty_text', 'blog-frontend-portal', '暂无留言，期待第一个脚印。');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1064, '2021-11-28 16:04:10.312000', '2022-03-07 21:38:38.082000', 'aside_position', 'blog-frontend-portal', 'left');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1065, '2021-11-28 16:04:10.401000', '2022-03-12 23:04:11.165000', 'tag_cloud_max', 'blog-frontend-portal', '100');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1066, '2021-11-28 16:04:10.435000', '2021-11-28 16:04:10.435000', 'post_img_align', 'blog-frontend-portal', 'center');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1067, '2021-11-28 16:04:10.529000', '2021-11-28 16:04:10.529000', 'tag_cloud_type', 'blog-frontend-portal', '3d');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1068, '2021-11-28 16:04:10.553000', '2021-11-28 16:04:10.553000', 'scrollbar_width', 'blog-frontend-portal', '8px');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1069, '2021-11-28 16:04:10.609000', '2021-11-28 16:04:10.609000', 'journal_list_effect_class', 'blog-frontend-portal', 'fadeInUp');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1070, '2021-11-28 16:04:10.955000', '2021-11-28 16:04:10.955000', 'enable_code_hr', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1071, '2021-11-28 16:04:11.234000', '2021-11-28 16:04:11.234000', 'journal_block_height', 'blog-frontend-portal', '300');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1072, '2021-11-28 16:04:11.266000', '2022-01-05 09:58:25.731000', 'enable_categories_aside', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1073, '2021-11-28 16:04:11.499000', '2022-01-05 11:01:22.137000', 'banner_source', 'blog-frontend-portal', 'manual');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1074, '2021-11-28 16:04:11.585000', '2021-12-28 10:11:24.665000', 'enable_archives_aside', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1075, '2021-11-28 16:04:11.698000', '2021-11-28 16:04:11.698000', 'fallback_thumbnail', 'blog-frontend-portal', 'https://cdn.jsdelivr.net/gh/qinhua/halo-theme-joe2.0@master/source/img/default_thumbnail.png');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1076, '2021-11-28 16:04:11.760000', '2021-11-28 16:04:11.760000', 'enable_photos_aside', 'blog-frontend-portal', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1077, '2021-11-28 16:04:12.290000', '2021-11-28 16:04:12.290000', 'enable_random_img_api', 'blog-frontend-portal', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1078, '2021-11-28 16:04:12.530000', '2021-11-28 16:04:12.530000', 'links_type', 'blog-frontend-portal', 'list');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1079, '2021-11-28 16:04:12.589000', '2021-11-28 16:04:12.589000', 'enable_mermaid', 'blog-frontend-portal', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1080, '2021-11-28 16:04:12.620000', '2021-11-28 16:04:12.620000', 'random_img_api', 'blog-frontend-portal', 'https://tu.ltyuanfang.cn/api/fengjing.php');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1081, '2021-11-28 16:04:12.863000', '2022-01-05 09:58:59.175000', 'enable_sheet_aside', 'blog-frontend-portal', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1082, '2021-12-16 14:53:23.323000', '2022-03-05 21:31:17.841000', 'enable_newest_post', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1083, '2021-12-16 14:53:23.669000', '2021-12-16 14:53:23.669000', 'img_max_width', 'blog-frontend-portal', '100%');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1084, '2021-12-16 14:53:23.749000', '2021-12-16 14:53:23.749000', 'tags_title', 'blog-frontend-portal', '全部标签');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1085, '2021-12-16 14:53:23.899000', '2021-12-16 14:53:23.899000', 'categories_title', 'blog-frontend-portal', '全部分类');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1086, '2021-12-16 14:53:23.917000', '2021-12-16 14:53:23.917000', 'categories_sort', 'blog-frontend-portal', 'createTime');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1087, '2021-12-16 14:53:24.396000', '2021-12-16 14:53:24.396000', 'archives_list_type', 'blog-frontend-portal', 'timeline');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1088, '2021-12-16 14:53:24.741000', '2021-12-16 14:53:24.741000', 'driven_by', 'blog-frontend-portal', 'none');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1089, '2021-12-16 14:53:24.933000', '2021-12-16 14:53:24.933000', 'enable_tags_post_num', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1090, '2021-12-16 14:53:25.132000', '2021-12-16 14:53:25.132000', 'archives_empty_text', 'blog-frontend-portal', '暂无文章数据');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1091, '2021-12-16 14:53:25.149000', '2021-12-16 14:53:25.149000', 'enable_police', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1092, '2021-12-16 14:53:25.167000', '2021-12-16 14:53:25.167000', 'enable_icp', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1093, '2021-12-16 14:53:25.223000', '2021-12-16 14:53:25.223000', 'archives_title', 'blog-frontend-portal', '文章归档');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1094, '2021-12-16 14:53:25.456000', '2021-12-16 14:53:25.456000', 'enable_archives_effect', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1095, '2021-12-16 14:53:25.985000', '2021-12-31 11:32:49.822000', 'enable_powerby', 'blog-frontend-portal', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1096, '2021-12-16 14:53:26.168000', '2021-12-16 14:53:26.168000', 'enable_categories_post_num', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1097, '2021-12-16 14:53:26.200000', '2021-12-16 14:53:26.200000', 'enable_code_newline', 'blog-frontend-portal', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1098, '2021-12-16 14:53:26.261000', '2022-01-05 17:39:55.398000', 'enable_lifetime', 'blog-frontend-portal', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1099, '2021-12-16 14:53:26.315000', '2021-12-16 14:53:26.315000', 'enable_archives_category', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1100, '2021-12-16 14:53:26.376000', '2021-12-16 14:53:26.376000', 'tags_sort', 'blog-frontend-portal', 'createTime');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1101, '2021-12-16 14:53:26.683000', '2021-12-16 15:02:43.134000', 'enable_tag_cloud', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1102, '2021-12-16 14:53:26.822000', '2021-12-16 14:53:26.822000', 'archives_timeline_metric', 'blog-frontend-portal', 'month');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1103, '2021-12-31 11:11:13.880000', '2022-01-06 11:20:15.391000', 'background_light_mode', 'blog-frontend-portal', 'https://www.qinweizhao.com/upload/2022/01/triangles-1430105-dfd1bd6a024746c99f385bfe7f9a8ca5.png');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1104, '2022-01-05 17:38:52.556000', '2022-01-05 17:38:52.556000', 'music_id', 'blog-frontend-portal', '2094091970');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1105, '2022-01-06 13:32:58.556000', '2022-01-06 13:32:58.556000', 'baidu_token', 'blog-frontend-portal', '9CXqeR4GBvGpU0tc');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1152, '2022-03-05 21:30:11.183000', '2022-03-08 11:03:45.950000', 'tags_type', 'blog-frontend-portal', 'tag');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1153, '2022-03-05 21:30:11.445000', '2022-03-05 21:30:11.445000', 'enable_post_ads_bottom', 'blog-frontend-portal', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1154, '2022-03-05 21:30:13.241000', '2022-03-05 21:30:13.241000', 'max_pager_number', 'blog-frontend-portal', '5');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1155, '2022-03-05 21:30:13.410000', '2022-03-05 21:30:13.410000', 'show_tools_when_hover', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1156, '2022-03-05 21:30:14.246000', '2022-03-05 21:30:14.246000', 'enable_show_in_up', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1157, '2022-03-05 21:30:14.334000', '2022-03-08 11:03:48.032000', 'categories_type', 'blog-frontend-portal', 'tag');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1158, '2022-03-05 21:30:14.772000', '2022-03-05 21:30:14.772000', 'cdn_type', 'blog-frontend-portal', 'none');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1159, '2022-03-05 21:30:14.826000', '2022-03-05 21:30:14.826000', 'banner_effect', 'blog-frontend-portal', 'slide');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1160, '2022-03-05 21:30:14.970000', '2022-03-05 21:30:14.970000', 'enable_back2top_smooth', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1161, '2022-03-05 21:30:15.255000', '2022-03-05 21:30:15.255000', 'enable_post_ads_top', 'blog-frontend-portal', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1162, '2022-03-05 21:30:15.810000', '2022-03-05 21:30:15.810000', 'enable_icon_animate', 'blog-frontend-portal', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1163, '2022-03-05 21:30:15.837000', '2022-03-05 21:30:15.837000', 'footer_position', 'blog-frontend-portal', 'none');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1164, '2022-03-05 21:30:16.184000', '2022-03-05 21:30:16.184000', 'overview_type', 'blog-frontend-portal', 'A');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1165, '2022-03-05 21:30:16.365000', '2022-03-05 21:30:16.365000', 'enable_full_header', 'blog-frontend-portal', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1166, '2022-03-05 21:30:16.489000', '2022-03-05 21:30:16.489000', 'enable_code_macdot', 'blog-frontend-portal', 'true');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1167, '2022-03-05 21:30:16.641000', '2022-03-05 21:30:16.641000', 'enable_full_footer', 'blog-frontend-portal', 'false');
INSERT INTO `theme_settings` (`id`, `create_time`, `update_time`, `setting_key`, `theme_id`, `setting_value`) VALUES (1168, '2022-03-05 21:30:16.661000', '2022-03-05 21:30:16.661000', 'banner_speed', 'blog-frontend-portal', '500');
COMMIT;

-- ----------------------------
-- Table structure for users
-- ----------------------------
DROP TABLE IF EXISTS `users`;
CREATE TABLE `users` (
  `id` int NOT NULL AUTO_INCREMENT,
  `create_time` datetime(6) DEFAULT NULL,
  `update_time` datetime(6) DEFAULT NULL,
  `avatar` varchar(1023) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL,
  `description` varchar(1023) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL,
  `email` varchar(127) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL,
  `expire_time` datetime(6) DEFAULT NULL,
  `mfa_key` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL,
  `mfa_type` int NOT NULL DEFAULT '0',
  `nickname` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `password` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `username` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Records of users
-- ----------------------------
BEGIN;
INSERT INTO `users` (`id`, `create_time`, `update_time`, `avatar`, `description`, `email`, `expire_time`, `mfa_key`, `mfa_type`, `nickname`, `password`, `username`) VALUES (1, '2021-06-08 16:11:07.951000', '2021-11-12 18:12:32.881000', 'https://www.qinweizhao.com/upload/2021/11/avatar-9b1b1e49686548049357f88d3eba6e7e.png', '', 'qinweizhao1997@163.com', '2021-06-08 16:11:07.951000', NULL, 0, 'YVKG', '$2a$10$04ySXAOrWd3SEzfkX0M/nOoS.L.UnM.xZe1xXzIKl5u8lWMCec2p6', 'Monday_1201');
COMMIT;

SET FOREIGN_KEY_CHECKS = 1;
